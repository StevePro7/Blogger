<span style="font-family:verdana;font-size:85%;">



<br /><br />

In 2017, we checked out devkitSMS to setup productive development environment to build 8-bit retro video games for the Sega Master System.  In 2018, we streamlined this build process to develop Simpsons Trivia.
<br /><br />
However, as projects became larger they seemed longer to build.  Plus it didn't seem possible to debug step through C source code.  Look for opportunities to improve the process further as we build Platform Explorer!
<!--
<a href="https://3.bp.blogspot.com/-t4P2AWjzxkg/XKtrSak7jJI/AAAAAAAAFW4/2e56wqHdELU0DuHp39UIKDrKVpyxG1GbwCLcBGAs/s1600/Title.png" imageanchor="1" ><img border="0" src="https://3.bp.blogspot.com/-t4P2AWjzxkg/XKtrSak7jJI/AAAAAAAAFW4/2e56wqHdELU0DuHp39UIKDrKVpyxG1GbwCLcBGAs/s640/Title.png" width="95%" height="525" data-original-width="642" data-original-height="527" /></a>
-->
Let's check it out! 
<br /><br />

<u>Game</u>
<br />
Platform Explorer is an open source port of the XNA Platform starter kit for the Sega Master System.  This video game was also an entry in the SMS Power! 2019 Coding Competition.  Download source code <b>here</b>.
<br /><br />

<u>Software</u>
<br />
Follow all instructions from the previous post: this documents how to setup the pre-requisite software.
<br />
Note: ensure you have downloaded and installed the devkitSMS and Small Device C Compiler [SDCC].
<br /><br />

<u>Checklist</u>
<br />
Here is a checklist of tasks to complete in order to ...
<br /><br />

<u>Graphics</u>
<br />
Previous work on SMS graphics progressed from MS Paint to Gimp to use Indexed mode with max 16 colors to conform to the 4bpp (bits per pixel) constraints.  However, this was only with 256x192 full screen images.
<br /><br />
Now, we would like to save multiple individual image files, for example, for sprite animations and share the color palette such that it can be used across all relevant tiles.  Therefore, here is how to import the palette:
<br /><br />
Launch Gimp | Open an image you would like the palette shared.  Image | Mode | Indexed to generate the 16 color palette (4bpp).  Windows | Dockable dialogs | Palettes.  Right click list and enter the following info:
<!--
<a href="https://2.bp.blogspot.com/-x9y9ADCW3LE/XL9caF382CI/AAAAAAAAFZQ/gaZyruMDx_4n2-TOXo8mZnHOW_ZbFLbGgCLcBGAs/s1600/ImportPalette.png" imageanchor="1" ><img border="0" src="https://2.bp.blogspot.com/-x9y9ADCW3LE/XL9caF382CI/AAAAAAAAFZQ/gaZyruMDx_4n2-TOXo8mZnHOW_ZbFLbGgCLcBGAs/s640/ImportPalette.png" width="98%" /></a>
-->
<br />
Now there will new custom 4bpp 16-color palette at %USERPROFILE%\.gimp-2.8\palettes.  Finally, extend previous process after Image | Mode | Indexed choose Colors | Map | Set Colormap... Palette: Platformer.
<br /><br />
EXPORT
https://www.lifewire.com/import-a-color-palette-into-gimp-1701682
http://gimpforums.com/thread-how-do-i-save-an-index-image-s-color-map
<br /><br />


<u>BMP2Tile</u>
<br />
Upgrade to Version 0.43 for -fullpalette option to Output 16 colors rather than as many present in image.
<pre class="csharp" name="code">
bmp2tile.exe raw\back_tiles.bmp -savetiles "back_tiles (tiles).psgcompr" -noremovedupes -planar -tileoffset 0 -exit
bmp2tile.exe raw\back_tiles.bmp -savetilemap "back_tiles (tilemap).bin" -exit
bmp2tile.exe raw\back_tiles.bmp -savepalette "back_tiles (palette).bin" -fullpalette -exit
</pre>

<u>Visual Studio</u>
<br />
In 2017, we were inspired by this suggestion to use Visual Studio as an IDE to better navigate files in larger projects and help automate the development build system.  Now it is time to upgrade from VS2008 to 2015.
<br /><br />
The motivation here assumes a point where it is difficult / impossible to use Visual Studio 2008 on Windows PC.  Plus Visual Studio 2015 has a cool feature to easily Toggle Header / Code files for increased productivity.
<!--
<a href="https://2.bp.blogspot.com/-wNE1msIrcfw/XMASINdQWrI/AAAAAAAAFZg/owrbk06aMWc5zBJC104sUpfU_IqlcjGVQCLcBGAs/s1600/VS2015.png" imageanchor="1" ><img border="0" src="https://2.bp.blogspot.com/-wNE1msIrcfw/XMASINdQWrI/AAAAAAAAFZg/owrbk06aMWc5zBJC104sUpfU_IqlcjGVQCLcBGAs/s640/VS2015.png" width="98%" height="445" data-original-width="1034" data-original-height="719" /></a>
-->
Replicate all instructions here: Setup External Tools to integrate the build process directly from within Visual Studio and connect "Run Batch File" command to Ctrl+1 hot key and automatically build and execute code! 
<br /><br />

<u>Formatting</u>
<br />
Formatting is important because formatted code makes it easier to read, understand, maintain and debug.  Visual Studio 2015.  Tools menu | Options... | Text Editor | C/C++ | Formatting | Spacing.  Update settings:
<!--
<table width="100%">
<tr>
<td valign="top" width="40%">
<a href="https://3.bp.blogspot.com/-q42rbyq1Dng/XL6407aStOI/AAAAAAAAFYY/gT-Ij9eWJ1YIOxJFFElU0yFqnzB2k8tHACLcBGAs/s1600/top.png" imageanchor="1" ><img border="0" src="https://3.bp.blogspot.com/-q42rbyq1Dng/XL6407aStOI/AAAAAAAAFYY/gT-Ij9eWJ1YIOxJFFElU0yFqnzB2k8tHACLcBGAs/s640/top.png" width="95%" /></a>
</td>
<td valign="top" width="40%">
<a href="https://2.bp.blogspot.com/-76-IsOZd6tw/XL648WdfsCI/AAAAAAAAFYc/2rPrh6d1gc47KaZnhqhQgGMBnO1FwaF9wCLcBGAs/s1600/bot.png" imageanchor="1" ><img border="0" src="https://2.bp.blogspot.com/-76-IsOZd6tw/XL648WdfsCI/AAAAAAAAFYc/2rPrh6d1gc47KaZnhqhQgGMBnO1FwaF9wCLcBGAs/s640/bot.png" width="95%" /></a>
</td>
</tr>
</table>
-->

<br /><br />

<u>Setup</u>
<br />
Create folder C:\PlatformExplorerSMS. Create the following sub-folders: asm, crt0, dev, gfx, lib, psg, tmp.  Note: tmp sub-folder contains dummy PSGlib.h and SMSlib.h header files used for debugging - more soon.
<!--
<a href="https://4.bp.blogspot.com/-QmpPb0E7YuI/XMBHf-Zyg0I/AAAAAAAAFZw/DE78cmCYrxY9ly-zI_tHFe1bfrrQCARVwCLcBGAs/s1600/Setup.png" imageanchor="1" ><img border="0" src="https://4.bp.blogspot.com/-QmpPb0E7YuI/XMBHf-Zyg0I/AAAAAAAAFZw/DE78cmCYrxY9ly-zI_tHFe1bfrrQCARVwCLcBGAs/s640/Setup.png" width="98%" height="513" data-original-width="1031" data-original-height="827" /></a>
-->
IMPORTANT: more information on which files reside in sub-folders and why can be found at here and here.
<br /><br />


<u>Separation</u>
<br />
As projects became larger they seemed longer to build.  Traditionally, this has been because all the code has been spread across multiple header files but with only 1x main.c which forces a complete rebuild each time.
<br /><br />
Therefore, in an attempt to improve build compile times, we'd like to separate interface from implementation code: keep header files lean with goal that static code in translation units need not be constantly recompiled!
<br /><br />
Note: here object file would have to be version controlled and build script may change during development.
<br /><br />

<u>Timings</u>
<br />
In order to test hypothesis that separating code improves compilation speed then record build script times:
<br />

<pre class="csharp" name="code">
:: Calculate the start timestamp
set _time=%time: =0%
set /a _hours=100%_time:~0,2%%%100,_min=100%_time:~3,2%%%100,_sec=100%_time:~6,2%%%100,_cs=%_time:~9,2%
set /a _started=_hours*60*60*100+_min*60*100+_sec*100+_cs

sdcc -c -mz80 --opt-code-speed --peep-file ..\peep-rules.txt --std-c99 _sms_manager.c
sdcc -c -mz80 --opt-code-speed --peep-file ..\peep-rules.txt --std-c99 _snd_manager.c
sdcc -c -mz80 --opt-code-speed --peep-file ..\peep-rules.txt --std-c99 global_manager.c
sdcc -c -mz80 --opt-code-speed --peep-file ..\peep-rules.txt --std-c99 debug_manager.c
sdcc -c -mz80 --opt-code-speed --peep-file ..\peep-rules.txt --std-c99 hack_manager.c
:: continue compiling remaining implementation [*.c] files

sdcc -c -mz80 --opt-code-speed --peep-file peep-rules.txt --std-c99 main.c

:: Calculate the difference in cSeconds
set _time=%time: =0%
set /a _hours=100%_time:~0,2%%%100,_min=100%_time:~3,2%%%100,_sec=100%_time:~6,2%%%100,_cs=%_time:~9,2%
set /a _duration=_hours*60*60*100+_min*60*100+_sec*100+_cs-_started

:: Populate variables for rendering (100+ needed for padding)
set /a _hours=_duration/60/60/100,_min=100+_duration/60/100%%60,_sec=100+(_duration/100%%60%%60),_cs=100+_duration%%100

echo.
echo Time taken: %_sec:~-2%.%_cs:~-2% secs
echo
</pre>
</span>