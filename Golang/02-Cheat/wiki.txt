<span style="font-family:verdana;font-size:85%;"> 

<u>Game Development</u><br>
A fun way to learn Go is by making games.  Game <a href="https://gamefromscratch.com/game-development-in-the-go-programming-language">development</a> in Go includes <a href="https://github.com/hajimehoshi/ebiten">Ebiten</a>, <a href="https://github.com/faiface/pixel">Pixel</a> and <a href="https://github.com/vulkan-go/vulkan">Vulkan</a> 3D.
<br /><br />  
<b>Ebiten</b><br>
<a href="https://ebiten.org">Ebiten</a> is an open source game library for Go programming language making it easy to develop 2D games.
<br />
<table width="99%" border="1">
<tr>
<td valign="top">
&nbsp;git clone https://github.com/hajimehoshi/ebiten<br/>
&nbsp;cd ebiten/examples<br/>
&nbsp;go run -tags=example github.com/hajimehoshi/ebiten/v2/examples/rotate<br/>  
</td>
</tr>
</table>
<br />
<b>Pixel</b><br>
<a href="https://github.com/faiface/pixel/wiki">Pixel</a> is a new, fast, innovative 2D game library built for Go language with full documentation and tutorials.
<br />
<table width="99%" border="1">
<tr>
<td valign="top">
&nbsp;git clone https://github.com/faiface/pixel-examples<br/>
&nbsp;cd pixel-examples/platformer<br/>
&nbsp;go run main.go<br/>  
</td>
</tr>
</table>
<br />
<b>Vulkan</b><br>
<a href="https://vulkan-tutorial.com/Introduction">Vulkan</a> is a new graphics and compute API by the Khronos group (known for OpenGL).  This Vulkan Tutorial details setting up Development <a href="https://vulkan-tutorial.com/Development_environment#page_Linux">environment</a> with corresponding 3D graphics examples available on <a href="https://github.com/shravanshetty1/vulkan-tutorial-go">Github</a>.
<br /><br />
      
<br /><br />
  
In the previous POST, we checked out <a href="https://www.techtarget.com/searchitoperations/definition/Go-programming-language">Go</a> as a statically typed and compiled programming language designed at Google.  Go is gaining popularity due to its ability to deliver highly scalable concurrent computing software.
<br /><br />  
Development teams <a href="https://content.techgig.com/technology/5-components-to-learn-googles-golang-coding-language/articleshow/76976910.cms">prefer</a> Golang to harness the power of large servers and sophisticated cloud platorms.  Go can be used in mobile, web and simple game development and can also invoke C code directly via <a href="https://go.dev/blog/cgo">Cgo</a>.
<br />
<!--
<a href="https://1.bp.blogspot.com/-VQLYPzT4tgY/YPcuQB_NcII/AAAAAAAAHII/k2nolLXI4pcUFTSj_CeE5AXO5lW_bEpRACLcBGAsYHQ/s256/Gopher.jpg"><img alt="" border="0" width="98%" height="300" src="https://1.bp.blogspot.com/-VQLYPzT4tgY/YPcuQB_NcII/AAAAAAAAHII/k2nolLXI4pcUFTSj_CeE5AXO5lW_bEpRACLcBGAsYHQ/s600/Gopher.jpg"/></a>
-->
<br />
Let's check it out!
<br /><br />

<u>Example</u><br>
In the previous POST, we created a simple <a href="https://golangbot.com/hello-world-gomod">Hello World</a> example by setting up the development environment, create a Go module with the code and issue go build and run commands to execute the Hello World program
<br /><br />
  
<u>Modules</u><br>
A <a href="https://go.dev/blog/using-go-modules">module</a> in Go is a collection  of Go packages stored in a file tree with a go.mod file at its root
The go.mod file defines the module's path, which is also  the import path used for the root directory,
and its dependency requirements which are other modules needed for a successful build.
<br /><br />
A module is defined by a UTF-8 encoded text file named <a href="https://go.dev/ref/mod#go-mod-file">go.mod</a> in its root directory.  Here are some usages:
<br />
<!--
<table width="99%" border="1">
<tr>
<td valign="top">&nbsp;<a href="https://go.dev/ref/mod#go-get">go get</a></td>
<td valign="top">&nbsp;Updates module dependencies in the go.mod file</td>
</tr>
<tr>
<td valign="top">&nbsp;<a href="https://go.dev/ref/mod#go-install">go install</a></td>
<td valign="top">&nbsp;Builds and installs the packages named by paths</td>
</tr>
<tr>
<td valign="top">&nbsp;<a href="https://go.dev/ref/mod#go-list-m">go list -m</a></td>
<td valign="top">&nbsp;Lists all the modules instead of all the packages</td>
</tr>
<tr>
<td valign="top">&nbsp;<a href="https://go.dev/ref/mod#go-mod-download">go mod download</a></td>
<td valign="top">&nbsp;Downloads named modules into the module cache</td>
</tr>
<tr>
<td valign="top">&nbsp;<a href="https://go.dev/ref/mod#go-mod-init">go mod init</a></td>
<td valign="top">&nbsp;Initializes + writes new go.mod file in the current directory</td>
</tr>
<tr>
<td valign="top">&nbsp;<a href="https://go.dev/ref/mod#go-mod-tidy">go mod tidy</a></td>
<td valign="top">&nbsp;Ensures the go.mod file matches source code in the module</td>
</tr>
</table>
<br />
 -->
<br />

<u>Packages</u><br>
Go programs are built by linking together <a href="https://go.dev/ref/spec#Packages">packages</a>.  A package is constructed from one or more source files that declare constants, types, variables and functions belonging to the package to which are accessible in all files of the sams package.  Those elements may be exported and used in other package(s).
<br /><br />
  
<u>Functional Programming</u><br>
<a href="https://medium.com/@geisonfgfg/functional-go-bc116f4c96a4">Functional</a> programming is the paradigm that treats computation as the evaluation of functions and avoids state and mutable data as opposed to imperative programming which empathizes change of state.  Without shared data, concurrency becomes easier because this means no locks, race conditions, no dead locks etc.
<br /><br />
  
<u>Concurrency</u><br>
<a href="https://en.wikipedia.org/wiki/Concurrency_(computer_science)">Concurrency</a> is the "composition of independently executing computations".  Concurrency: dealing with lots of things at once but parallelism: about doing lots of things at once.  Concurrency is all about structure whereas parallelism is about execution.  Consequently, Golang provides first-class language <a href="https://www.digitalocean.com/community/tutorials/how-to-run-multiple-functions-concurrently-in-go">support</a> for concurrency.
<br /><br />
Challenges in <a href="https://www.youtube.com/playlist?list=PLve39GJ2D71wSwRQLp_h8B60pKgS85StC">concurrent</a> programming include co-ordinating tasks + shared memory.  Thus, Go concurrency implementation centers around  <a href="https://go.dev/tour/concurrency/1">goroutines</a>: functions that execute simultaneously in Go program with other (goroutine) functions and are lightweight threads managed by the Go runtime.  Here are some more terms:
<!--<br><br>Definitions-->
<br />
<!---->
<br />
<table width="99%" border="1">
<tr>
<td valign="top">&nbsp;Concurrency</td>
<td valign="top">&nbsp;Ability to have multiple things that can be worked on not necessarily at the same time</td>
</tr>
<tr>
<td valign="top">&nbsp;Parallelism</td>
<td valign="top">&nbsp;Ability to work on multiple concurrent tasks typically all worked on at the same time</td>
</tr>
<tr>
<td valign="top">&nbsp;Process</td>
<td valign="top">&nbsp;Part of the Operating System resposible for executing an application</td>
</tr>
<tr>
<td valign="top">&nbsp;Thread</td>
<td valign="top">&nbsp;Unit within the process which executes the code inside an application</td>
</tr>
<tr>
<td valign="top">&nbsp;Goroutine</td>
<td valign="top">&nbsp;Special function type that can run while other goroutines are running</td>
</tr>
<tr>
<td valign="top">&nbsp;WaitGroups</td>
<td valign="top">&nbsp;Allows a supervising goroutine to wait on several other go routines</td>
</tr>
<tr>
<td valign="top">&nbsp;Mutexes</td>
<td valign="top">&nbsp;Allow us to share memory between go routines and our application</td>
</tr>
<tr>
<td valign="top">&nbsp;Channels</td>
<td valign="top">&nbsp;Another mechanism available to us to coordinate the work between multiple go routines</td>
</tr>
</table>
<!---->
<br />

Concurrency in Go is also based on <a href="https://en.wikipedia.org/wiki/Communicating_sequential_processes">Communicating</a> Sequential Processes.  <a href="https://levelup.gitconnected.com/communicating-sequential-processes-csp-for-go-developer-in-a-nutshell-866795eb879d">CSP</a> is a form to describe patterns of interaction in concurrent systems.  CSP involvement in concurrency based on messaging passing <a href="https://en.wikipedia.org/wiki/Channel_(programming)">channels</a>.  Channels in Go allow goroutines to communincate with each other safely + co-ordinate work between them.

<br /><br />
<b>Demos</b><br>
<table width="99%" border="1">
<tr>
<td valign="top">&nbsp;Introduction</td>
<td valign="top">&nbsp;<a href="01">Goroutine ID</a></td>
</tr>
<tr>
<td valign="top">&nbsp;Goroutines</td>
<td valign="top">&nbsp;<a href="01">Sequential code</a>, <a href="01">Creating goroutines</a></td>
</tr>
<tr>
<td valign="top">&nbsp;Sync Package</td>
<td valign="top">&nbsp;<a href="01">Using WaitGroups</a>, <a href="01">Mutexes</a>, <a href="01">Read/Write Mutexes</a></td>
</tr>
<tr>
<td valign="top">&nbsp;Channels</td>
<td valign="top">
  &nbsp;<a href="01">Unbuffered channels</a>, <a href="demo02">Buffered channels</a>, <a href="demo03">Channel types</a>
  <br />
  &nbsp;<a href="demo05">Working with closed channels</a>, <a href="demo07">Using select statements</a>
</td>
</tr>
</table>

<br />
IMPORTANT<br>
If you are new to goroutines then you may like to log go ID() similar to logging thread ID in multithreading:
<br />
<!--
<pre class="csharp" name="code">
go mod init goidtesting
go get "github.com/nikandfor/goid"
go mod tidy
</pre>
main.go
<pre class="csharp" name="code">
package main
import (
	"fmt"
	"os"
	"time"
	"github.com/nikandfor/goid"
)
func say(s string) {
	for i := 0; i < 5; i++ {
		time.Sleep(100 * time.Millisecond)
		_, _ = fmt.Fprintln(os.Stdout, goid.ID(), s)
	}
}
func main() {
	go say("world")
	say("hello")
}
</pre>
<br />
-->
<br />

<u>Game Development</u><br>
A fun way to learn Go is by making games.  Game <a href="https://gamefromscratch.com/game-development-in-the-go-programming-language">development</a> in Go includes <a href="https://github.com/hajimehoshi/ebiten">Ebiten</a>, <a href="https://github.com/faiface/pixel">Pixel</a> and <a href="https://github.com/vulkan-go/vulkan">Vulkan</a> 3D.
<br /><br />  
<b>Ebiten</b><br>
<a href="https://ebiten.org">Ebiten</a> is an open source game library for Go programming language making it easy to develop 2D games.
<br />
<table width="99%" border="1">
<tr>
<td valign="top">
&nbsp;git clone https://github.com/hajimehoshi/ebiten<br/>
&nbsp;cd ebiten/examples<br/>
&nbsp;go run -tags=example github.com/hajimehoshi/ebiten/v2/examples/rotate<br/>  
</td>
</tr>
</table>
<br />
<b>Pixel</b><br>
<a href="https://github.com/faiface/pixel/wiki">Pixel</a> is a new, fast, innovative 2D game library built for Go language with full documentation and tutorials.
<br />
<table width="99%" border="1">
<tr>
<td valign="top">
&nbsp;git clone https://github.com/faiface/pixel-examples<br/>
&nbsp;cd pixel-examples/platformer<br/>
&nbsp;go run main.go<br/>  
</td>
</tr>
</table>
<br />
<b>Vulkan</b><br>
<a href="https://vulkan-tutorial.com/Introduction">Vulkan</a> is a new graphics and compute API by the Khronos group (known for OpenGL).  This Vulkan Tutorial details setting up Development <a href="https://vulkan-tutorial.com/Development_environment#page_Linux">environment</a> with corresponding 3D graphics examples available on <a href="https://github.com/shravanshetty1/vulkan-tutorial-go">Github</a>.
<br /><br />
<br>

<u>Cgo</u><br>
<a href="https://go.dev/blog/cgo">Cgo</a> lets Go packages <a href="https://karthikkaranth.me/blog/calling-c-code-from-go">call</a> C code.  Cgo outputs Go and C files that can be combined into a single Go package.
<br /><br>
<b>Hello World</b><br>
<!-- -->
<table width="99%" border="1">
<tr>
<td valign="top" width="30%">&nbsp;hello.go</td>
<td valign="top" width="30%">&nbsp;hello.h</td>
<td valign="top" width="40%">&nbsp;hello.c</td>
</tr>
<tr>
<td valign="top">
<pre class="csharp" name="code">
&nbsp;package main
&nbsp;import "fmt"

&nbsp;// #include "hello.h"
&nbsp;import "C"

&nbsp;func main() {
&nbsp;	fmt.Println("beg")
&nbsp;	C.hello()
&nbsp;	fmt.Println("end")
&nbsp;}
</pre>
</td>
<td valign="top">
<pre class="csharp" name="code">
&nbsp;#ifndef _HELLO_H_
&nbsp;#define _HELLO_H_

&nbsp;#include &lt;stdio.h&gt;

&nbsp;void hello();

&nbsp;#endif//_HELLO_H_
</pre>
</td>
<td valign="top">
<pre class="csharp" name="code">
&nbsp;#include "hello.h"

&nbsp;void hello()
&nbsp;{
&nbsp;    fprintf(stderr, "%s\n", "Hello CGO!!");
&nbsp;}
</pre>
</td>
</tr>
</table>
<!-- -->
<!--<br />-->
According to this <a href="https://stackoverflow.com/questions/69904782/how-to-debug-go-with-cgo-in-visual-studio-code">thread</a>, it is possible to debug Go to C from Visual Studio Code on Linux.  Assuming you can F5 run the project then set breakpoints either side the Go code calling into and out of the C function to step.
<br /><br />
<!--<br />-->
<b>Mod Security</b><br>
In the previous <a href="http://steveproxna.blogspot.com/2021/09/kubernetes-cheat-sheet.html">post</a>, we coded an example in Go from scratch as full end-to-end Web API demo on our local host, in Docker and on Kubernetes.  Extend this <a href="https://medium.com/lightbaseio/web-application-firewall-in-go-feat-owasp-modsecurity-core-rule-set-3f97a26e3311">example</a> as Web Application Firewall using <a href="https://github.com/SpiderLabs/ModSecurity">Mod Sec</a> and Cgo.
<br /><br />
Install Mod Security on local host
<table width="99%" border="1">
<tr>
<td valign="top" width="30%">
&nbsp;git clone --depth 1 -b v3/master --single-branch https://github.com/SpiderLabs/ModSecurity<br/>
&nbsp;cd ModSecurity<br/>
&nbsp;git submodule init<br/>
&nbsp;git submodule update<br/>
&nbsp;./build.sh<br/>
&nbsp;./configure<br/>
&nbsp;make<br/>
&nbsp;sudo make install<br/>
</td>
</tr>
</table>
<!--<br />-->
Follow all instructions from the <a href="https://medium.com/lightbaseio/web-application-firewall-in-go-feat-owasp-modsecurity-core-rule-set-3f97a26e3311">example</a> i.e. download OWASP rules, build <a href="TODO">main</a>, <a href="TODO">server</a> and <a href="TODO">waf</a> code.  Here, it is critical for Go to C interface to set include + linker flags correctly <a href="http://gridengine.eu/index.php/other-stories/232-avoiding-the-ldlibrarypath-with-shared">avoiding</a> runtime PATH for shared libs!
<br /><br />
waf.go<br />
<table width="99%" border="1">
<tr>
<td valign="top">
&nbsp;package waf<br/>

&nbsp;// #cgo CFLAGS: -I/usr/local/modsecurity/include<br/>
&nbsp;// #cgo LDFLAGS: -L/usr/local/modsecurity/lib/ -Wl,-rpath -Wl,/usr/local/modsecurity/lib/ -lmodsecurity<br/>
&nbsp;// #include "waf.h"<br/>
&nbsp;import "C"<br/>
</td>
</tr>
</table>
<br />
  
<u>Asm</u><br>
Finally, if you would like to reproduce Go example that calls ASM assembly code then replicate <a href="https://github.com/nikandfor/goid">goid</a> source:
<!--
<table width="99%" border="1">
<tr>
<td valign="top" width="50%">&nbsp;main.go</td>
<td valign="top" width="50%">&nbsp;goid_amd64.s</td>

</tr>
<tr>
<td valign="top">
<pre class="csharp" name="code">
&nbsp;package main
&nbsp;import (
&nbsp;	"fmt"
&nbsp;	"goidtesting/goid"
&nbsp;	"os"
&nbsp;	"time"
&nbsp;)
&nbsp;func say(s string) {
&nbsp;	for i := 0; i < 5; i++ {
&nbsp;		time.Sleep(100 * time.Millisecond)
&nbsp;		_, _ = fmt.Fprintln(os.Stdout, goid.ID(), s)
&nbsp;	}
&nbsp;}
&nbsp;func main() {
&nbsp;	go say("world")
&nbsp;	say("hello")
&nbsp;}
</pre>
</td>
<td valign="top">
<pre class="csharp" name="code">
&nbsp;#include "textflag.h"

&nbsp;TEXT ·ID(SB), NOSPLIT, $0-8
&nbsp;	MOVQ	(TLS), AX     // AX = getg()
&nbsp;	MOVQ	0x98(AX), AX   // AX = AX.goid
&nbsp;	MOVQ	AX, ret+0(FP) // ret = AX
&nbsp;	RET
</pre>
</td>
</tr>
</table>
<br />
-->
<br />

<u>Summary</u><br>
</span>
