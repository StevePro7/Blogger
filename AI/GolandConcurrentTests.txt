Sure! Go (Golang) is known for its excellent support for concurrency through goroutines and channels. Here are some advanced examples of using channels for concurrency in Go along with unit tests.

Let's start with a simple example of concurrent execution using channels to calculate the square of a set of numbers. Then we'll create unit tests to verify the correctness of the concurrent function.

```go
// main.go

package main

import (
	"fmt"
	"sync"
)

func squareWorker(input <-chan int, output chan<- int, wg *sync.WaitGroup) {
	defer wg.Done()
	for num := range input {
		output <- num * num
	}
}

func concurrentSquare(nums []int) []int {
	inputCh := make(chan int)
	outputCh := make(chan int)
	var wg sync.WaitGroup

	// Start squareWorker goroutines
	for i := 0; i < 4; i++ { // Let's use 4 goroutines for parallelism
		wg.Add(1)
		go squareWorker(inputCh, outputCh, &wg)
	}

	// Send numbers to be squared
	go func() {
		for _, num := range nums {
			inputCh <- num
		}
		close(inputCh)
	}()

	// Collect the squared results
	go func() {
		wg.Wait()
		close(outputCh)
	}()

	var results []int
	for squaredNum := range outputCh {
		results = append(results, squaredNum)
	}

	return results
}

func main() {
	numbers := []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}
	squaredNumbers := concurrentSquare(numbers)
	fmt.Println("Squared Numbers:", squaredNumbers)
}
```

In the above example, the function `concurrentSquare` squares a slice of integers concurrently using multiple goroutines. The `squareWorker` function performs the actual squaring operation on the numbers.

Now, let's create unit tests to verify the correctness of the `concurrentSquare` function:

```go
// main_test.go

package main

import (
	"reflect"
	"testing"
)

func TestConcurrentSquare(t *testing.T) {
	numbers := []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}
	expectedSquared := []int{1, 4, 9, 16, 25, 36, 49, 64, 81, 100}

	squaredNumbers := concurrentSquare(numbers)

	if !reflect.DeepEqual(squaredNumbers, expectedSquared) {
		t.Errorf("Expected squared numbers to be %v, but got %v", expectedSquared, squaredNumbers)
	}
}
```

To run the unit tests, you can use the `go test` command:

```
go test
```

These examples demonstrate how to use channels for concurrent operations in Go and how to write unit tests to ensure the correctness of the concurrent functions. The number of goroutines used in the example can be adjusted based on the number of CPU cores or the size of the task to optimize performance.