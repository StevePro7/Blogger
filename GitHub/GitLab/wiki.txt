<span style="font-family:verdana;font-size:85%;">

In 2016, we checked out <a href="http://steveproxna.blogspot.com/2016/08/github-cheat-sheet.html">GitHub Cheat Sheet</a>: a distributed version control system for Open Source projects.  Now we will explore differences in GitLab to streamline collaborative workflow and leverage <a href="https://www.bomberbot.com/devops/automate-your-software-development-lifecycle-with-gitlab-ci-cd">CI/CD pipelines</a>.
<br />
<!--
<a href="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEjfdryn90ILEQjxlge0UqwMW56nzSHXLsRAkYD0iz3Kr0e3PbwLmRbdkn_FUgSn_pX43Y0SViVk1BDpb_bN9TYxrbtWENbO_A4uAHJLAqwrQ4z6hohhScg4NRV_ZCWZZBMS1AkFFY0Qlv7E9L7uQJr_9dFml5CaoXCwENAeF7My9r9k0mn7jW9Qc4l9Ovg/s713/GitLab.png"><img alt="" border="0" width="98%" src="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEjfdryn90ILEQjxlge0UqwMW56nzSHXLsRAkYD0iz3Kr0e3PbwLmRbdkn_FUgSn_pX43Y0SViVk1BDpb_bN9TYxrbtWENbO_A4uAHJLAqwrQ4z6hohhScg4NRV_ZCWZZBMS1AkFFY0Qlv7E9L7uQJr_9dFml5CaoXCwENAeF7My9r9k0mn7jW9Qc4l9Ovg/s600/GitLab.png"/></a>
-->
<br />
Let's check it out!
<br /><br />
  
<u>GitLab</u><br />
As per previous post assumes an account setup on <a href="https://github.com/SteveProXNA">github.com</a>.  Create an account on <a href="https://gitlab.com/SteveProXNA">gitlab.com</a> if you have not already done so.  As GitLab also uses underlying git we setup the following on localhost for development:
<br /><br />

<b>SSH Keys</b><br />
An SSH key is an access credential for the SSH network protocol.  Git supports both RSA and ED25519 keys.  Launch Terminal.  Issue the following commands to <a href="https://docs.github.com/en/authentication/connecting-to-github-with-ssh/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent">generate</a> new SSH key and <a href="https://docs.github.com/en/authentication/connecting-to-github-with-ssh/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent#adding-your-ssh-key-to-the-ssh-agent">adding</a> SSH key to ssh-agent:
<br />
<!--
<br />
<table width="100%" border="1">
<tr>
<td>&nbsp;<b>RSA</b></td>
<td>&nbsp;<b>ED25519</b></td>
</tr>
<tr>
<td>&nbsp;cd ~/.ssh</td>
<td>&nbsp;cd ~/.ssh</td>
</tr>
<tr>
<td>&nbsp;ssh-keygen -t rsa -b 4096 -C "steven_boland@hotmail.com"</td>
<td>&nbsp;ssh-keygen -t ed25519 -C &lt;email&gt;</td>
</tr>
<tr>
<td>&nbsp;Passphrase &lt;redacted&gt;</td>
<td>&nbsp;Passphrase &lt;redacted&gt;</td>
</tr>
<tr>
<td>&nbsp;eval "$(ssh-agent -s)"</td>
<td>&nbsp;eval "$(ssh-agent -s)"</td>
<tr>
<td>&nbsp;ssh-add ~/.ssh/id_rsa</td>
<td>&nbsp;ssh-add ~/.ssh/id_ed25519</td>
</tr>
<tr>
<td>&nbsp;xclip -selection clipboard < ~/.ssh/id_rsa.pub</td>
<td>&nbsp;xclip -selection clipboard < &lt;key&gt;</td>
</tr>
</table>
-->
<br />
IMPORTANT:<br />
If <b>xclip</b> is not installed then issue 2x commands: <i>sudo apt-get update</i> and <i>sudo apt-get install xclip</i>.  Finally, navigate to github.com Settings | <a href="https://github.com/settings/keys">SSH and GPG</a> keys | New SSH key | Paste contents from id_rsa.pub here.
<br /><br />

<b>Personal Access Token</b><br />
If you favor HTTPS then Personal Access Tokens offer security benefits over password-based <a href="https://github.blog/2020-12-15-token-authentication-requirements-for-git-operations">authentication</a>.  Launch <a href="https://gitlab.com/SteveProXNA">gitlab.com</a>.  Navigate to Edit Profile | Access Tokens | Add new token.  <a href="https://docs.gitlab.com/ee/user/profile/personal_access_tokens.html#create-a-personal-access-token">Create</a> personal access token.
<br />
<!--
<a href="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEj1wDKBpfmtIOFqgzXHsQvpzgwfg2xeZeES03OwSDC5IbM9Xl9IXSHD2TgaAciFgM4-1LUHfIVBtyg9N1YWtCH6VE9j6DOh9ih1U2QD34xiDnz4aQrOsYIBUIWEZh2CYafvGcMQWdYBit42VQlt6TJ-YiuM7q31-yX45cvAhtmWEfaeIkdvJ13bemSxgzQ/s1209/PersonalAccessToken.png"><img alt="" border="0" width="98%" src="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEj1wDKBpfmtIOFqgzXHsQvpzgwfg2xeZeES03OwSDC5IbM9Xl9IXSHD2TgaAciFgM4-1LUHfIVBtyg9N1YWtCH6VE9j6DOh9ih1U2QD34xiDnz4aQrOsYIBUIWEZh2CYafvGcMQWdYBit42VQlt6TJ-YiuM7q31-yX45cvAhtmWEfaeIkdvJ13bemSxgzQ/s600/PersonalAccessToken.png"/></a>
-->
<br />
After new Personal Access Token is created upload into source control software for example Source Tree on Windows and Mac OS/X and JetBrains products on Linux that integrate Git like PyCharm for Python etc etc.
<br /><br />
  
<i>Source Tree</i><br />
Launch Source Tree | Settings | Accounts Add... | Enter the following details | Paste personal access token:
<br />
<!--
<a href="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEjoe_STkSKCChQRNh1KuIAge9dKx-bfQwgfkfjHIL5PaNb8l808ZXcgnAXuc-aXAuHpvc6EHuXl0c9lAXZNo35ItpFq212AjWZy6VHmZF-gMbN7srBtvQlT1Q0fjw4LTvzg1XlymKxmj1CU6t6hqg8YreD5rj2R1UHOYRPEneO19XZO-oS1vzvWuoYaEEE/s476/PrivateToken.png"><img alt="" border="0" width="98%" src="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEjoe_STkSKCChQRNh1KuIAge9dKx-bfQwgfkfjHIL5PaNb8l808ZXcgnAXuc-aXAuHpvc6EHuXl0c9lAXZNo35ItpFq212AjWZy6VHmZF-gMbN7srBtvQlT1Q0fjw4LTvzg1XlymKxmj1CU6t6hqg8YreD5rj2R1UHOYRPEneO19XZO-oS1vzvWuoYaEEE/s600/PrivateToken.png"/></a>
-->
<br />
  
<i>JetBrains IDE</i><br />
Launch PyCharm | File | Settings... | Version Control | GitLab.  Click "+" button | Enter GitLab token | Log In:
<br />
<!--
<a href="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEjoLlhDerqsiX9yoLP66MwbrbaejlN-ySRugsaaq7iI_qphyZtk5QRdbfFSmjf5X2VdSfTtBNshBro-2bnECxgnxw6QKhS_H2dREDshBhlyLMtyT6gTP92WXsWJMObXvFEd5DlWXEc_awf2CzQSU520-nPlj_SRwuS3W1Iau_Dx4ACN0Lph8Xl0Ozz6dYg/s1022/JetBrainsLogin.png"><img alt="" border="0" width="98%" src="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEjoLlhDerqsiX9yoLP66MwbrbaejlN-ySRugsaaq7iI_qphyZtk5QRdbfFSmjf5X2VdSfTtBNshBro-2bnECxgnxw6QKhS_H2dREDshBhlyLMtyT6gTP92WXsWJMObXvFEd5DlWXEc_awf2CzQSU520-nPlj_SRwuS3W1Iau_Dx4ACN0Lph8Xl0Ozz6dYg/s600/JetBrainsLogin.png"/></a>
-->
<br /><br />
  
<u>GitFlow Example</u><br />
<a href="https://www.atlassian.com/git/tutorials/comparing-workflows/gitflow-workflow">Gitflow</a> is an alternative Git branching model that involves the use of feature branches and multiple primary branches.  Here is practical <a href="https://hackernoon.com/from-git-flow-to-cicd-a-practical-guide-to-implement-git-workflow">guide</a> to implement GitFlow using GitLab with the corresponding git commands.
<br /><br />
Launch <a href="https://gitlab.com">gitlab.com</a>.  Create new project.  Default branch will be main.  Git clone repository to localhost.  For completeness cut initial Tag 0.1.  In SourceTree setup GitFlow: Repository | Git-flow | Initialize Repository:
<br />
<!-- -->
<a href="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEgvGW7oKKtSjFsTDDBWddpfXELIMOcA0KHDwkzj2oWSZkBuVppHEr7Rxg_tUR55avW0pOw0o-e9yWdfbboCm6RMazX77GbKBIRofpVl1UYdQ4cz5xs6PSLckEGqbiGjSWstXElPHRF-8v5qHGAC0oH1xOLd2si-_zZCkj6dBmydnftN8fVrwUdqT_LqNcw/s413/sourcetree.png"><img alt="" border="0" width="98%" src="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEgvGW7oKKtSjFsTDDBWddpfXELIMOcA0KHDwkzj2oWSZkBuVppHEr7Rxg_tUR55avW0pOw0o-e9yWdfbboCm6RMazX77GbKBIRofpVl1UYdQ4cz5xs6PSLckEGqbiGjSWstXElPHRF-8v5qHGAC0oH1xOLd2si-_zZCkj6dBmydnftN8fVrwUdqT_LqNcw/s600/sourcetree.png"/></a>
<!-- -->
<br />
In <a href="https://gitlab.com">gitlab.com</a> set develop as default branch: GitLab | Setttings | Repository | Branch defaults | <b>develop</b>.
<br />
<!-- -->
<table width="99%" border="1">
<tr><td>
<table width="99%" border="0">
<tr><td>&nbsp;<b>FEATURE</b> [start]</td></tr>
<tr><td>&nbsp;git checkout -b feature/my-feature develop</td><td>&nbsp;# cut feature branch</td></tr>
<tr><td>&nbsp;git push --set-upstream origin feature/my-feature</td><td>&nbsp;# push feature to remote</td></tr>
<tr><td>&nbsp;git checkout develop</td><td>&nbsp;</td></tr>
<tr><td>&nbsp;git merge --no-ff feature/my-feature</td><td>&nbsp;# merge feature to develop</td></tr>
<tr><td>&nbsp;git push</td><td>&nbsp;# push develop to remote</td></tr>
<tr><td>&nbsp;<b>FEATURE</b> [end]</td></tr>
<tr><td>&nbsp;git branch -d feature/my-feature</td><td>&nbsp;# delete local branch</td></tr>
<tr><td>&nbsp;git push origin -d feature/my-feature</td><td>&nbsp;# delete remote branch</td></tr>
<tr><td>&nbsp;<b>RELEASE</b> [start]</td></tr>
<tr><td>&nbsp;git checkout -b release/1.0 develop</td><td>&nbsp;# cut release branch</td></tr>
<tr><td>&nbsp;git push --set-upstream origin release/1.0</td><td>&nbsp;# push release to remote</td></tr>
<tr><td>&nbsp;<b>BUGFIX</b> [start]</td></tr>
<tr><td>&nbsp;git checkout -b bugfix/1.0 release/1.0</td><td>&nbsp;# cut bugfix branch</td></tr>
<tr><td>&nbsp;git push --set-upstream origin bugfix/1.0</td><td>&nbsp;# push bugfix to remote</td></tr>
<tr><td>&nbsp;git checkout release/1.0</td><td>&nbsp;</td></tr>
<tr><td>&nbsp;git merge --no-ff bugfix/1.0</td><td>&nbsp;# merge bugfix to release</td></tr>
<tr><td>&nbsp;git push</td><td>&nbsp;# push release to remote</td></tr>
<tr><td>&nbsp;<b>BUGFIX</b> [end]</td></tr>
<tr><td>&nbsp;git branch -d bugfix/1.0</td><td>&nbsp;# delete local branch</td></tr>
<tr><td>&nbsp;git push origin -d bugfix/1.0</td><td>&nbsp;# delete remote branch</td></tr>
<tr><td>&nbsp;<b>RELEASE</b> [end]</td></tr>
<tr><td>&nbsp;git checkout main</td><td>&nbsp;</td></tr>
<tr><td>&nbsp;git merge --no-ff release/1.0</td><td>&nbsp;# merge release to main</td></tr>
<tr><td>&nbsp;git push</td><td>&nbsp;# sync release with main</td></tr>
<tr><td>&nbsp;git tag -a 1.0 -m "Tag 1.0"</td><td>&nbsp;# cut tag 1.0 off main</td></tr>
<tr><td>&nbsp;git push origin tag 1.0</td><td>&nbsp;# push tag 1.0 to remote</td></tr>
<tr><td>&nbsp;git checkout develop</td><td>&nbsp;</td></tr>
<tr><td>&nbsp;git merge --no-ff release/1.0</td><td>&nbsp;# merge release to develop</td></tr>
<tr><td>&nbsp;git push</td><td>&nbsp;# sync release with develop</td></tr>
<tr><td>&nbsp;git branch -d release/1.0</td><td>&nbsp;# delete local branch</td></tr>
<tr><td>&nbsp;git push origin -d release/1.0</td><td>&nbsp;# delete remote branch</td></tr>
<tr><td>&nbsp;<b>HOTFIX</b> [start]</td></tr>
<tr><td>&nbsp;git checkout main</td><td>&nbsp;</td></tr>
<tr><td>&nbsp;git checkout -b hotfix/1.1 main</td><td>&nbsp;# cut hotfix branch</td></tr>
<tr><td>&nbsp;git push --set-upstream origin hotfix/1.1</td><td>&nbsp;# push hotfix to remote</td></tr>
<tr><td>&nbsp;<b>HOTFIX</b> [end]</td></tr>
<tr><td>&nbsp;git checkout main</td><td>&nbsp;</td></tr>
<tr><td>&nbsp;git merge --no-ff hotfix/1.1</td><td>&nbsp;# merge hotfix to main</td></tr>
<tr><td>&nbsp;git push</td><td>&nbsp;# sync hotfix with main</td></tr>
<tr><td>&nbsp;git tag -a 1.1 -m "Tag 1.1"</td><td>&nbsp;# cut Tag 1.1 off main</td></tr>
<tr><td>&nbsp;git push origin tag 1.1</td><td>&nbsp;# push Tag 1.1 to remote</td></tr>
<tr><td>&nbsp;git checkout develop</td><td>&nbsp;</td></tr>
<tr><td>&nbsp;git merge --no-ff hotfix/1.1</td><td>&nbsp;# merge hotfix to develop</td></tr>
<tr><td>&nbsp;git push</td><td>&nbsp;# sync hotfix with develop</td></tr>
<tr><td>&nbsp;git branch -d hotfix/1.1</td><td>&nbsp;# delete local branch</td></tr>
<tr><td>&nbsp;git push origin -d hotfix/1.1</td><td>&nbsp;# delete remote branch</td></tr>
</table>
</td></tr>
</table>
<!-- -->
<br />
IMPORTANT - you can compare two branches [source vs. target] anytime issuing the following commands:
<br />
<table width="99%" border="1">
<tr><td>
<table width="99%" border="0">
<tr><td>&nbsp;git checkout develop</td><td>&nbsp;# source branch</td></tr>
<tr><td>&nbsp;git diff --name-only main</td><td>&nbsp;# target branch</td></tr>
<tr><td align="center">&nbsp;<b>OR</b></td><td>&nbsp;# target branch</td></tr>
<tr><td>&nbsp;git diff-tree --no-commit-id --name-only -r main..develop</td><td>&nbsp;# source vs. target branch</td></tr>
</table>
</td></tr>
</table>
<br />
  
<u>Summary</u><br />
To summarize, now that we have discussed the <a href="https://www.geeksforgeeks.org/difference-between-gitlab-and-github">differences</a> between GitHub and GitLab, we have extended our previous end-to-end Web API demo on local host, in Docker and Kubernetes but now leveraged GitLab CI/CD pipelines to automate deployments to the cloud.  Our next steps would be more GitFlow integration: Replicate deployments across multiple environments and complete the full Software Development LifeCyle!

</span>