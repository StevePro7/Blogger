<span style="font-family:verdana;font-size:85%;"> 
In 2017, we checked out <a href="http://steveproxna.blogspot.com/2017/09/devkitsms-programming-setup.html">devkitSMS Programming Setup</a> to build 8-bit video games in <a href="http://en.wikipedia.org/wiki/C_(programming_language)">C</a> for the <a href="http://en.wikipedia.org/wiki/Master_System">Sega Master System</a> (SMS).  Here we use SDCC v3.6.9 which allows maximum 32KB for your main ROM game code size.
<br /><br />
Now, the latest <a href="https://github.com/sverx/devkitSMS">devkitSMS</a> requires <a href="http://sdcc.sourceforge.net">SDCC</a> 4.x which supports banked code which means it is now possible to page code out transparently.  Plus we'd also like to build <a href="http://www.smspower.org">SMS</a> projects cross platform for Windows and Linux.
<br /><br />
<a href="https://3.bp.blogspot.com/-V-s3bFQyWXE/WQB7Lw64JpI/AAAAAAAAD-g/GEoxW1vrGGccMvp3aedQdqaYxtXCHVz3QCLcB/s1600/devkitsms.jpg" imageanchor="1" ><img border="0" src="https://3.bp.blogspot.com/-V-s3bFQyWXE/WQB7Lw64JpI/AAAAAAAAD-g/GEoxW1vrGGccMvp3aedQdqaYxtXCHVz3QCLcB/s640/devkitsms.jpg" width="98%" height="300" /></a>
<br />
Letâ€™s check it out! 
<br /><br />
<u>devkitSMS</u>
<br />
The <a href="https://github.com/sverx/devkitSMS">devkitSMS</a> is a collection of tools and code built specifically for the Sega Master System but also supports homebrew development using C language for <a href="https://en.wikipedia.org/wiki/SG-1000">SG-1000</a>, <a href="https://en.wikipedia.org/wiki/SG-1000#SC-3000">SC-3000</a> and the Sega <a href="https://en.wikipedia.org/wiki/Game_Gear">Game Gear</a>.
<br /><br />
<u>Software</u><br />
Follow all instructions from the previous <a href="http://steveproxna.blogspot.com/2017/09/devkitsms-programming-setup.html">post</a>: this documents how to setup the pre-requisite software.
<br /><br />
Here is a summary of all required software to be installed:
<table width="99%" border="0">
<tr>
<td>
<table width="100%" border="1">
<tr><td valign="top">&nbsp;<b>Name</b></td><td valign="top">&nbsp;<b>Version</b></td></tr>
<tr><td valign="top">&nbsp;C IDE Editor</td><td valign="top">&nbsp;<a href="https://my.visualstudio.com/Downloads?q=visual%20studio%202015&wt.mc_id=o~msft~vscom~older-downloads">Visual Studio 2015</a></td></tr>
<tr><td valign="top">&nbsp;C IDE Editor</td><td valign="top">&nbsp;<a href="https://code.visualstudio.com">Visual Studio Code</a></td></tr>
<tr><td valign="top">&nbsp;Cross compiler</td><td valign="top">&nbsp;<a href="http://sdcc.sourceforge.net">Small Device C Compiler</a></td></tr>
</table>
</td>
<td>&nbsp;</td>
<td>
<table width="100%" border="1">
<tr><td valign="top">&nbsp;<b>Name</b></td><td valign="top">&nbsp;<b>Version</b></td></tr>
<tr><td valign="top">&nbsp;Make files</td><td valign="top">&nbsp;<a href="http://cygwin.com/install.html">Cygwin</a></td></tr>
<tr><td valign="top">&nbsp;Emulators</td><td valign="top">&nbsp<a href="http://emulicious.net/downloads">Emulicious</a>, <a href="http://www.emutopia.com/index.php?option=com_cobalt&task=files.download&no_html=1&id=3537&fid=20&fidx=2&rid=404&return=aHR0cDovL3d3dy5lbXV0b3BpYS5jb20vaW5kZXgucGhwL2Rvd25sb2Fkcy1lbXVsYXRvcnMvaXRlbS8yOTgtc2VnYS1zZy0xMDAwLXNjLTMwMDAvNDA0LWtlZ2EtZnVzaW9u">Fusion</a>, <a href="http://www.emutopia.com/index.php?option=com_cobalt&task=files.download&no_html=1&id=1912&fid=20&fidx=3&rid=239&return=aHR0cDovL3d3dy5lbXV0b3BpYS5jb20vaW5kZXgucGhwL2Rvd25sb2Fkcy1lbXVsYXRvcnMvaXRlbS8yOTgtc2VnYS1zZy0xMDAwLXNjLTMwMDAvMjM5LW1la2E%3D">Meka</a></td></tr>
<tr><td valign="top">&nbsp;Debugger</td><td valign="top">&nbsp;<a href="https://marketplace.visualstudio.com/items?itemName=emulicious.emulicious-debugger">Emulicious Debugger</a></td></tr>
</table>
</td>
</tr>
</table>
Note: Emulicioushas dependency on Java therefore launch using <i>java -jar ~/Sega/Emulicious/Emulicious.jar</i>
<br /><br />
<b>Windows</b><br />
Download and install <a href="https://sourceforge.net/projects/sdcc/files/sdcc-win64/4.1.0/sdcc-4.1.0-x64-setup.exe/download">sdcc-4.1.0-</a>x64-setup.exe to C:\Program Files\SDCC.  Choose all features to install.
<br />
<a href="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEj9uu45CRtwIEOo8gtwCHFbYucP7VEGBIzhSKXE6Gg4DCG4oe57g9Q1-qM99MsFQwnOtPomvuc4E4EHDFQqSh7AP37wsE_TTbspjCGttTeWG41BcNOEeNonMziEI58bAQmWKttnLv8WJjjUYxgt5UhI_p0U5r8aP_syb8GhXLcK95SiOtodkdJYFx54/s499/Win05.png"><img alt="" border="0" width="98%" src="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEj9uu45CRtwIEOo8gtwCHFbYucP7VEGBIzhSKXE6Gg4DCG4oe57g9Q1-qM99MsFQwnOtPomvuc4E4EHDFQqSh7AP37wsE_TTbspjCGttTeWG41BcNOEeNonMziEI58bAQmWKttnLv8WJjjUYxgt5UhI_p0U5r8aP_syb8GhXLcK95SiOtodkdJYFx54/s600/Win05.png"/></a>
<br />
<br />
There should be no extra configuration except add C:\Program Files\SDCC\bin to the Environment PATH.
<br />
<a href="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEhbigqleqkDOKp4Qcf67driJ8Te-wEQXcv-H_1Hkp2A9qBYduLEqE0LgJbR9dYnGJEVJuMb2tZbNSG4pu5AvtFIuLrKNCGi198srGW-kxJ1R1w3r6BU59Srwb8wjZrEVA6bugePVugGUf5Tvwc0yqTdkXXAhb80ngSYEjCsqE01GEV_Rx3L0hhyGTwj/s499/Win06.png"><img alt="" border="0" width="98%" src="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEhbigqleqkDOKp4Qcf67driJ8Te-wEQXcv-H_1Hkp2A9qBYduLEqE0LgJbR9dYnGJEVJuMb2tZbNSG4pu5AvtFIuLrKNCGi198srGW-kxJ1R1w3r6BU59Srwb8wjZrEVA6bugePVugGUf5Tvwc0yqTdkXXAhb80ngSYEjCsqE01GEV_Rx3L0hhyGTwj/s600/Win06.png"/></a>
<br />
<br />
Start | Run | cmd. Type sdcc --version. The following info should display to confirm SDCC version 4.1.0:
<br />
<a href="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEgOz6Ai5SZ-OyTnfwuu7VSyCkVqO0TuiANAd91iIaAyGlIRjHsOBcEE-zBAJe8YnwRU0zpjwNA4DNGwW5NKdh_beYewbA4ZULW7I4Sli7ba7exD78pyyfxJzhkv_paldvabqbBTS_Ge_5ESD2NEJYLPZPF0Sv_OMZlovCLtdTfUk29BqkMaSgDIphVU/s1111/Win07.png"><img alt="" border="0" width="98%" src="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEgOz6Ai5SZ-OyTnfwuu7VSyCkVqO0TuiANAd91iIaAyGlIRjHsOBcEE-zBAJe8YnwRU0zpjwNA4DNGwW5NKdh_beYewbA4ZULW7I4Sli7ba7exD78pyyfxJzhkv_paldvabqbBTS_Ge_5ESD2NEJYLPZPF0Sv_OMZlovCLtdTfUk29BqkMaSgDIphVU/s600/Win07.png"/></a>
<br />
<br />
<b>Linux</b><br />
Download and extract <a href="https://sourceforge.net/projects/sdcc/files/sdcc-linux-amd64/4.1.0/sdcc-4.1.0-amd64-unknown-linux2.5.tar.bz2/download">sdcc-4.1.0-</a>amd64-unknown-linux2.5.tar.bz2 to ~/sdcc.  This should install all features.
<br />
<a href="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEgl_I59OuU2qA1Iy7yr1DaBPntXqoeiYvlSz2Rx3laGr_jFOp7PKisSdjZkNK-s5yljCMXKa9VgH36H6AAkkdRD2txOL7kRr-DPhwDgrZ7csckFLof4syuXvjmzm_L4mCQ1FcT4CVgRyPbM91KFoa5NP_PRXgBGNbMg4KuUNreK0jXHNwpNXR5eNflz/s600/Lin05.png"><img alt="" border="0" width="98%" src="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEgl_I59OuU2qA1Iy7yr1DaBPntXqoeiYvlSz2Rx3laGr_jFOp7PKisSdjZkNK-s5yljCMXKa9VgH36H6AAkkdRD2txOL7kRr-DPhwDgrZ7csckFLof4syuXvjmzm_L4mCQ1FcT4CVgRyPbM91KFoa5NP_PRXgBGNbMg4KuUNreK0jXHNwpNXR5eNflz/s600/Lin05.png"/></a>
<br />
<br />
There should be no extra configuration except add $HOME/sdcc/bin to the ~/.bashrc file so always available.
<br />
<table width="100%" border="1">
<tr>
<td valign="top">
&nbsp;gedit ~/.bashrc
<br />
&nbsp;export PATH="$PATH:$HOME/sdcc/bin"
</td>
</tr>
</table>
<br />
Launch Terminal. Type sdcc --version [sdcc -v]. The following should display to confirm SDCC version 4.1.0:
<br />
<a href="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEj52LS-l9Is_zr73tpLXKr7Npbzr0eEuE7j1KnpfXhflSSxE9CMAGz51g6iZKUW6CEIP5f4xxSPG75XKudDT8ITQAtaAlGYP5dKR9PQZ2iQ6S5-WKqGCc3UmuUDfA_EjdE_PY2LNsYb_WJzhQN_xRrPctVk_J8tmGKg-R7vU4CO2bFViNN4dO_GqbvS/s889/Lin07.png"><img alt="" border="0" width="98%" src="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEj52LS-l9Is_zr73tpLXKr7Npbzr0eEuE7j1KnpfXhflSSxE9CMAGz51g6iZKUW6CEIP5f4xxSPG75XKudDT8ITQAtaAlGYP5dKR9PQZ2iQ6S5-WKqGCc3UmuUDfA_EjdE_PY2LNsYb_WJzhQN_xRrPctVk_J8tmGKg-R7vU4CO2bFViNN4dO_GqbvS/s600/Lin07.png"/></a>
<br />
<br />
<u>Directories</u><br />
<table width="100%" border="1">
<tr>
<td valign="top">&nbsp;Windows</td>
<td valign="top">&nbsp;C:\Program Files\SDCC\bin
</td>
</tr>
<tr>
<td valign="top">&nbsp;Linux</td>
<td valign="top">&nbsp;~/sdcc/bin
</td>
</tr>
</table>
<br />
<u>devkitSMS</u><br />
Navigate to the <a href="https://github.com/sverx/devkitSMS">devkitSMS</a> repository on github.  <a href="https://twitter.com/i_am_sverx">@sverx</a> has full instructions <a href="https://github.com/sverx/devkitSMS/blob/master/README.md">here</a> and advises to copy the following 4x executables into SDCC bin folder: assets2banks.exe, folder2c.exe, ihx2sms.exe, makesms.exe.
<br />
<pre class="csharp" name="code">
# Clone devkitSMS
git clone https://github.com/sverx/devkitSMS.git

# Copy 4x files
cd devkitSMS
copy assets2banks/%PLATFORM%/assets2banks %INSTALLATION%/SDCC/bin
copy folder2c/%PLATFORM%/folder2c.exe %INSTALLATION%/SDCC/bin
copy ihx2sms/%PLATFORM%/ihx2sms.exe %INSTALLATION%/SDCC/bin
copy makesms/%PLATFORM%/makesms.exe %INSTALLATION%/SDCC/bin
</pre>
<br />
Note: my preference is to usually copy the relevant files up-to-date as each Master System project is built.
<br /><br />
<u>Example</u><br />
As an example, replicate the simple program from <a href="http://steveproxna.blogspot.com/2017/09/devkitsms-programming-setup.html">2017</a> that sets the border colors of the screen using devkitSMS but this time we will port the Windows build cross platform to Linux and include debugging!
<br /><br />  
Create new directory HelloWorld: <b><a href="https://github.com/SteveProXNA/devkitSMScode/tree/main/SetupII/01-HelloWorld/01-SimpleExample">~/HelloWorld</a></b>.  Copy these files across <a href="https://github.com/SteveProXNA/devkitSMScode/blob/main/SetupII/01-HelloWorld/01-SimpleExample/crt0_sms.rel">crt0_sms.rel</a>, <a href="https://github.com/SteveProXNA/devkitSMScode/blob/main/SetupII/01-HelloWorld/01-SimpleExample/SMSlib.h">SMSlib.h</a>, <a href="https://github.com/SteveProXNA/devkitSMScode/blob/main/SetupII/01-HelloWorld/01-SimpleExample/SMSlib.lib">SMSlib.lib</a>.  Launch Visual Studio Code.  Open HelloWorld directory.  Create new file main.c and enter the following code:
<br />
<br />
<a href="https://github.com/SteveProXNA/devkitSMScode/blob/main/SetupII/01-HelloWorld/01-SimpleExample/main.c">main.c</a>
<br />
<pre class="csharp" name="code">
#include "SMSlib.h"
void main ( void )
{
  SMS_setSpritePaletteColor( 0, RGB( 3, 3, 3 ) );
  SMS_displayOn();
  for ( ;; )
  {
    SMS_waitForVBlank();
  }
}

SMS_EMBED_SEGA_ROM_HEADER(9999, 0);
SMS_EMBED_SDSC_HEADER(1, 0, 2017, 9, 15, "StevePro Studios", "Hello World", "Simple Sega Master System demo to run on real hardware!");
</pre>
<br />
<u>Build</u><br />
Manually compile, link and execute the Hello program.  Launch command prompt: Start | Run | cmd.
<br />
<a href="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEjTuIxswM0j3IUVMa2XK-0IX3_PaCoJHw8N6ycP5YJWoDKJS2ELlBcOR9e09tnULAkVlkVnCZDKseUo1RvZcXLzH_p8mfvU3mbf4rhHBDiIJmDlZ5P8pfYh0cdTtr3fo95firdD4Z2V2WbAn3B-8JUlHOstD2l8g2iJzQs0z1jLUZpB-c0ml0_mapUh/s1195/HelloWorld.png"><img alt="" border="0" width="98%" src="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEjTuIxswM0j3IUVMa2XK-0IX3_PaCoJHw8N6ycP5YJWoDKJS2ELlBcOR9e09tnULAkVlkVnCZDKseUo1RvZcXLzH_p8mfvU3mbf4rhHBDiIJmDlZ5P8pfYh0cdTtr3fo95firdD4Z2V2WbAn3B-8JUlHOstD2l8g2iJzQs0z1jLUZpB-c0ml0_mapUh/s600/HelloWorld.png"/></a>
<br />
<br />
Change directory cd ~/HelloWorld.  Next, execute following 3x commands (in bold) but add <b>debug</b> keyword:
<br />
<table width="99%" border="1">
<tr>
<td valign="top">&nbsp;ACTION</td>
<td valign="top">&nbsp;COMMAND</td>
<td valign="top">&nbsp;OUTPUT</td>
</tr>
<tr>
<td valign="top">&nbsp;Compile&nbsp;</td>
<td valign="top">&nbsp;<b>sdcc --debug -c -mz80 main.c</b></td>
<td valign="top">&nbsp;main.rel</td>
</tr>
<tr>
<td valign="top">&nbsp;Link</td>
<td valign="top">&nbsp;<b>sdcc --debug -o output.ihx -mz80 --data-loc 0xC000 --no-std-crt0 crt0_sms.rel<br />&nbsp;main.rel SMSlib.lib</b></td>
<td valign="top">&nbsp;output.ihx</td>
</tr>
<tr>
<td valign="top">&nbsp;Exceute</td>
<td valign="top">&nbsp;<b>ihx2sms output.ihx output.sms</b></td>
<td valign="top">&nbsp;output.sms&nbsp;</td>
</tr>
</table>
<br />
Finally, type <b>java -jar ~/Sega/Emulicious/Emulicious.jar output.sms</b> to launch the Hello program.  
<br />
Congratulations! You have just written your first SMS program using <a href="https://github.com/sverx/devkitSMS">devkitSMS</a>.
<br />
<a href="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEiGkI1nwBuGVDf9OsU7_NHep0HsYQiURoXGFv1XByvfIWkOuN9NyttPhTGFu_7kbgh1cIjrnXB-EpDMcAaW2uZCboRMBO5qSpWqdbnnAUmz5BQLtlKb70jnIJxshYTetQffQkbbyBHHVADNwo4lEHh3Nma42eHXhqzDaRejc6ctG2ad4hfIBpPgZMWN/s568/HelloWorldImage.png"><img alt="" border="0" width="98%" height="500" src="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEiGkI1nwBuGVDf9OsU7_NHep0HsYQiURoXGFv1XByvfIWkOuN9NyttPhTGFu_7kbgh1cIjrnXB-EpDMcAaW2uZCboRMBO5qSpWqdbnnAUmz5BQLtlKb70jnIJxshYTetQffQkbbyBHHVADNwo4lEHh3Nma42eHXhqzDaRejc6ctG2ad4hfIBpPgZMWN/s600/HelloWorldImage.png"/></a>
<br />
<br />
<u>Automate</u><br />
Let's automate the build process: create build script file that contains the previous commands.  On Windows name the file <b><a href="https://github.com/SteveProXNA/devkitSMScode/blob/main/SetupII/01-HelloWorld/01-SimpleExample/build.bat">build.bat</a></b>.  On Linux name the file <b><a href="https://github.com/SteveProXNA/devkitSMScode/blob/main/SetupII/01-HelloWorld/01-SimpleExample/build.sh">build.sh</a></b> and add EXE permissions as <b>chmod +x build.sh</b>.
<pre class="csharp" name="code">
@echo off
sdcc --debug -c -mz80 main.c
sdcc --debug -o output.ihx -mz80 --data-loc 0xC000 --no-std-crt0 crt0_sms.rel main.rel SMSlib.lib
ihx2sms output.ihx output.sms
java -jar ~/Sega/Emulicious/Emulicious.jar output.sms
</pre>
<br />
<u>Visual Studio Code</u><br />
Finally, add hidden <b><a href="https://github.com/SteveProXNA/devkitSMScode/blob/main/SetupII/01-HelloWorld/01-SimpleExample/.vscode">.vscode</a></b> folder in Visual Studio Code + include tasks.json and launch.json files beneath:
<br />
<br />
<a href="https://github.com/SteveProXNA/devkitSMScode/blob/main/SetupII/01-HelloWorld/01-SimpleExample/.vscode/tasks.json">tasks.json</a>
<br />
<pre class="csharp" name="code">
{
    "version": "2.0.0",
    "label": "build",
    "type": "shell",
    "linux": {
        "command": "./build.sh"
    },
    "windows": {
        "command": "./build.bat"
      },
    "presentation": {"echo": true, "reveal": "always", "focus": false, "panel": "shared", "showReuseMessage": false, "clear": true},
    "group": {"kind": "build", "isDefault": true},
}
</pre>
Important: On Windows prefer the ./build syntax as Linux otherwise an "unrecognized cmdlet" may result.
<br />
<br />  
<a href="https://github.com/SteveProXNA/devkitSMScode/blob/main/SetupII/01-HelloWorld/01-SimpleExample/.vscode/launch.json">launch.json</a>
<br />
<pre class="csharp" name="code">
{
    "version": "0.2.0",
    "configurations": [
        {
            "type": "emulicious-debugger",
            "request": "launch",
            "name": "Launch in Emulicious",
            "program": "${workspaceFolder}/output.sms",
            "port": 58870,
            "stopOnEntry": true
        }
    ]
}
</pre>
On Linux, launch Emulicious as above.  Press Ctrl + Shift + B to build code and F5 to debug step thru code:
<br />
<a href="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEjJ6R2KqufnPKW_9CM3jWRxtXuYpQ2cK44r5UhR79WbYo487HzV2OABXXwIqsA_RVbA7oKjs175kqPSteJm_Mlxzg3lFKqMvU1t7QA5taOmLd6SK81GJdu4Sj6JWgC7Jfj_r9OXnjY5YI-DNuYSrpENFxPzFhaK4qqNf7fXEOTqR7lIlhejcEqZtije/s751/debugging.png"><img alt="" border="0" height="600" width="98%"
src="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEjJ6R2KqufnPKW_9CM3jWRxtXuYpQ2cK44r5UhR79WbYo487HzV2OABXXwIqsA_RVbA7oKjs175kqPSteJm_Mlxzg3lFKqMvU1t7QA5taOmLd6SK81GJdu4Sj6JWgC7Jfj_r9OXnjY5YI-DNuYSrpENFxPzFhaK4qqNf7fXEOTqR7lIlhejcEqZtije/s600/debugging.png"/></a>
<br /><br />

<u>Visual Studio 2015</u><br />
For completeness, if the main workstation is Windows then another option is Visual Studio 2015 can also be used to debug step thru the ANSI-C source code.  For more background info see <a href="http://steveproxna.blogspot.com/2019/04/devkitsms-programming-sample-iii.html">this</a>.  Here is the alternative:
<br />
<br />
<a href="https://github.com/SteveProXNA/devkitSMScode/blob/main/SetupII/01-HelloWorld/02-DevkitExample/dev/main.c">main.c</a>
<br />
<pre class="csharp" name="code">
#include "main.h"
void main( void )
{
  devkit_SMS_init();
  devkit_SMS_setSpritePaletteColor( 0, devkit_RGB( 3, 3, 3 ) );
  devkit_SMS_displayOn();
  for( ;; )
  {
    devkit_SMS_waitForVBlank();
  }
}
</pre>
<br />
<u>Summary</u><br />
To summarize, the <a href="http://en.wikipedia.org/wiki/Master_System">Sega Master System</a> development process has been very consistent after the <a href="http://sdcc.sourceforge.net">SDCC</a> 4.x upgrade plus the ability to support banked code means initial 32KB ROM restriction now no longer applies!
<br />
This will be the topic of the next <a href="http://steveproxna.blogspot.com/2022/07/devkitsms-programming-sample-v.html">post</a>.
</span>