<span style="font-family:verdana;font-size:85%;">
In <a href="http://steveproxna.blogspot.com/2017/11/devkitsms-programming-sample.html">2017</a>, we checked out <a href="https://github.com/sverx/devkitSMS">devkitsms</a> to setup productive development environment to build 8-bit retro video games for the Sega Master System.  In <a href="http://steveproxna.blogspot.com/2018/03/devkitsms-programming-sample-ii.html">2018</a>, we streamlined this build process to develop <a href="http://www.smspower.org/Homebrew/SimpsonsTrivia-SMS">Simpsons Trivia</a>.
<br /><br />
However, as projects became larger they seemed longer to build.  Plus it didn't seem possible to debug step through <a href="https://en.wikipedia.org/wiki/C_(programming_language)">C</a> source code.  Look for opportunities to improve the process further as we build <a href="http://www.smspower.org/Homebrew/PlatformExplorer-SMS">Platform Explorer</a>!
<a href="https://3.bp.blogspot.com/-t4P2AWjzxkg/XKtrSak7jJI/AAAAAAAAFW4/2e56wqHdELU0DuHp39UIKDrKVpyxG1GbwCLcBGAs/s1600/Title.png" imageanchor="1" ><img border="0" src="https://3.bp.blogspot.com/-t4P2AWjzxkg/XKtrSak7jJI/AAAAAAAAFW4/2e56wqHdELU0DuHp39UIKDrKVpyxG1GbwCLcBGAs/s640/Title.png" width="95%" height="525" data-original-width="642" data-original-height="527" /></a>
Let's check it out! 
<br /><br />
<u>Game</u>
<br />
Platform Explorer is an open source port of the XNA Platform <a href="https://www.youtube.com/watch?v=Wf49xwFrNMo">starter kit</a> for the <a href="https://en.wikipedia.org/wiki/Master_System">Sega Master System</a>.  This video game was also an entry in the SMS Power! <a href="http://www.smspower.org/Competitions/Coding-2019">2019</a> Coding Competition.  Download source code <b><a href="https://github.com/SteveProXNA/PlatformExplorerSMS">here</a></b>.
<br /><br />
<u>Software</u>
<br />
Follow all instructions from the previous <a href="http://steveproxna.blogspot.com/2017/09/devkitsms-programming-setup.html">post</a>: this documents how to setup the pre-requisite software.
<br />
Note: ensure you have downloaded and installed the <a href="https://github.com/sverx/devkitSMS">devkitSMS</a> and Small Device C Compiler [<a href="http://sdcc.sourceforge.net">SDCC</a>].
<br /><br />
<u>Checklist</u>
<br />
Here is a checklist of tasks to complete in order to try and improve the existing development environment:
<ul>
<li>Graphics changes and BMP2Tile update</li>
<li>Visual Studio 2015 upgrade and setup</li>
<li>Code file separation and build times</li>
<li>Various code architectural updates</li>
<li>Debug step through code support</li>
<li>Performance tweaks then polish</li>
</ul>
<br />
<u>Graphics</u>
<br />
Previous work on SMS graphics progressed from MS Paint to <a href="https://www.gimp.org/downloads">Gimp</a> to use Indexed mode with max 16 colors to conform to the 4bpp (bits per pixel) constraints.  However, this was only with 256x192 full screen images.
<br /><br />
Now, we would like to save multiple individual image files, for example, for sprite animations and share the color palette such that it can be used across all relevant tiles.  Therefore, here is how to <a href="http://gimpforums.com/thread-how-do-i-save-an-index-image-s-color-map">import</a> the palette:
<br /><br />
Launch Gimp | Open an image you would like the palette shared.  Image | Mode | Indexed to generate the 16 color palette (4bpp).  Windows | Dockable dialogs | Palettes.  Right click list and enter the following info:
<a href="https://2.bp.blogspot.com/-x9y9ADCW3LE/XL9caF382CI/AAAAAAAAFZQ/gaZyruMDx_4n2-TOXo8mZnHOW_ZbFLbGgCLcBGAs/s1600/ImportPalette.png" imageanchor="1" ><img border="0" src="https://2.bp.blogspot.com/-x9y9ADCW3LE/XL9caF382CI/AAAAAAAAFZQ/gaZyruMDx_4n2-TOXo8mZnHOW_ZbFLbGgCLcBGAs/s640/ImportPalette.png" width="98%" /></a>
<br />
Now there will new custom 4bpp 16-color palette at %USERPROFILE%\.gimp-2.8\palettes.  Finally, extend previous process after Image | Mode | Indexed choose Colors | Map | Set Colormap... Palette: Platformer.
<br /><br />
<u>BMP2Tile</u>
<br />
Upgrade to Version <a href="https://github.com/maxim-zhao/bmp2tile/releases/tag/v0.43">0.43</a> for -fullpalette option to Output 16 colors rather than as many present in image.
<pre class="csharp" name="code">
bmp2tile.exe raw\back_tiles.bmp -savetiles "back_tiles (tiles).psgcompr" -noremovedupes -planar -tileoffset 0 -exit
bmp2tile.exe raw\back_tiles.bmp -savetilemap "back_tiles (tilemap).bin" -exit
bmp2tile.exe raw\back_tiles.bmp -savepalette "back_tiles (palette).bin" -fullpalette -exit
</pre>
<br />
<u>Visual Studio</u>
<br />
In 2017, we were inspired by this <a href="http://www.smspower.org/forums/15228-DevkitSMSDevelopYourHomebrewInC?start=250">suggestion</a> to use Visual Studio as an IDE to better navigate files in larger projects and help automate the development build system.  Now it is time to upgrade from VS2008 to 2015.
<br /><br />
The motivation here assumes a point where it is difficult / impossible to use Visual Studio 2008 on Windows PC.  Plus Visual Studio 2015 has a cool feature to easily Toggle Header / Code files for increased productivity.
<a href="https://2.bp.blogspot.com/-wNE1msIrcfw/XMASINdQWrI/AAAAAAAAFZg/owrbk06aMWc5zBJC104sUpfU_IqlcjGVQCLcBGAs/s1600/VS2015.png" imageanchor="1" ><img border="0" src="https://2.bp.blogspot.com/-wNE1msIrcfw/XMASINdQWrI/AAAAAAAAFZg/owrbk06aMWc5zBJC104sUpfU_IqlcjGVQCLcBGAs/s640/VS2015.png" width="98%" height="445" data-original-width="1034" data-original-height="719" /></a>
Replicate all instructions <a href="http://steveproxna.blogspot.com/2017/09/devkitsms-programming-setup.html">here</a>: Setup External Tools to integrate the build process directly from within Visual Studio and connect "Run Batch File" command to Ctrl+1 hot key and automatically build and execute code! 
<br /><br />
<u>Formatting</u>
<br />
Formatting is important because formatted code makes it easier to read, understand, maintain and debug.  Visual Studio 2015.  Tools menu | Options... | Text Editor | C/C++ | Formatting | Spacing.  Update settings:
<table width="100%">
<tr>
<td valign="top" width="40%">
<a href="https://3.bp.blogspot.com/-q42rbyq1Dng/XL6407aStOI/AAAAAAAAFYY/gT-Ij9eWJ1YIOxJFFElU0yFqnzB2k8tHACLcBGAs/s1600/top.png" imageanchor="1" ><img border="0" src="https://3.bp.blogspot.com/-q42rbyq1Dng/XL6407aStOI/AAAAAAAAFYY/gT-Ij9eWJ1YIOxJFFElU0yFqnzB2k8tHACLcBGAs/s640/top.png" width="95%" /></a>
</td>
<td valign="top" width="40%">
<a href="https://2.bp.blogspot.com/-76-IsOZd6tw/XL648WdfsCI/AAAAAAAAFYc/2rPrh6d1gc47KaZnhqhQgGMBnO1FwaF9wCLcBGAs/s1600/bot.png" imageanchor="1" ><img border="0" src="https://2.bp.blogspot.com/-76-IsOZd6tw/XL648WdfsCI/AAAAAAAAFYc/2rPrh6d1gc47KaZnhqhQgGMBnO1FwaF9wCLcBGAs/s640/bot.png" width="95%" /></a>
</td>
</tr>
</table>
<br />
<u>Setup</u>
<br />
Create folder C:\PlatformExplorerSMS. Create the following sub-folders: asm, crt0, dev, gfx, lib, psg, tmp.  Note: tmp sub-folder contains dummy PSGlib.h and SMSlib.h header files used for debugging - more soon.
<a href="https://4.bp.blogspot.com/-QmpPb0E7YuI/XMBHf-Zyg0I/AAAAAAAAFZw/DE78cmCYrxY9ly-zI_tHFe1bfrrQCARVwCLcBGAs/s1600/Setup.png" imageanchor="1" ><img border="0" src="https://4.bp.blogspot.com/-QmpPb0E7YuI/XMBHf-Zyg0I/AAAAAAAAFZw/DE78cmCYrxY9ly-zI_tHFe1bfrrQCARVwCLcBGAs/s640/Setup.png" width="98%" height="513" data-original-width="1031" data-original-height="827" /></a>
IMPORTANT: more information on which files reside in sub-folders and why can be found at <a href="http://steveproxna.blogspot.com/2017/11/devkitsms-programming-sample.html">here</a> and <a href="http://steveproxna.blogspot.com/2018/03/devkitsms-programming-sample-ii.html">here</a>.
<br /><br />
<u>Separation</u>
<br />
As projects became larger they seemed longer to build.  Traditionally, this has been because all the code has been spread across multiple header files and with only 1x main.c which forces a complete rebuild each time.
<br /><br />
Therefore, in an attempt to improve build compile times, we'd like to separate interface from implementation code: keep header files lean with goal that static code in translation units need not be constantly recompiled!
<br /><br />
Note: here object files would have to be version controlled and build script may change during development.
<br /><br />
<u>Timing</u>
<br />
In order to test hypothesis that separating code improves compilation speed then <a href="https://stackoverflow.com/questions/673523/how-do-i-measure-execution-time-of-a-command-on-the-windows-command-line">record</a> build script times:
<br />
<pre class="csharp" name="code">
:: Calculate the start timestamp
set _time=%time: =0%
set /a _hours=100%_time:~0,2%%%100,_min=100%_time:~3,2%%%100,_sec=100%_time:~6,2%%%100,_cs=%_time:~9,2%
set /a _started=_hours*60*60*100+_min*60*100+_sec*100+_cs

sdcc -c -mz80 --opt-code-speed --peep-file ..\peep-rules.txt --std-c99 _sms_manager.c
sdcc -c -mz80 --opt-code-speed --peep-file ..\peep-rules.txt --std-c99 _snd_manager.c
sdcc -c -mz80 --opt-code-speed --peep-file ..\peep-rules.txt --std-c99 global_manager.c
sdcc -c -mz80 --opt-code-speed --peep-file ..\peep-rules.txt --std-c99 debug_manager.c
sdcc -c -mz80 --opt-code-speed --peep-file ..\peep-rules.txt --std-c99 hack_manager.c
:: continue compiling remaining implementation [*.c] files

sdcc -c -mz80 --opt-code-speed --peep-file peep-rules.txt --std-c99 main.c

:: Calculate the difference in cSeconds
set _time=%time: =0%
set /a _hours=100%_time:~0,2%%%100,_min=100%_time:~3,2%%%100,_sec=100%_time:~6,2%%%100,_cs=%_time:~9,2%
set /a _duration=_hours*60*60*100+_min*60*100+_sec*100+_cs-_started

:: Populate variables for rendering (100+ needed for padding)
set /a _hours=_duration/60/60/100,_min=100+_duration/60/100%%60,_sec=100+(_duration/100%%60%%60),_cs=100+_duration%%100

echo.
echo Time taken: %_sec:~-2%.%_cs:~-2% secs
echo
</pre>
<br />
<u>Coding</u>
<br />
The following coding changes + enhancements have been made throughout Platform Explorer development:
<br /><br />
<b>devkitSMS</b>
<br />
The original <a href="https://github.com/sverx/devkitSMS/blob/master/SMSlib/src/SMSlib.h">SMSlib.h</a> and <a href="https://github.com/sverx/devkitSMS/blob/master/PSGlib/src/PSGlib.h">PSGlib.h</a> header files do not seem to have include guard clauses which means they can't be included more than once so let's create wrappers for them.  In fact, this is beneficial for debugging.
<pre class="csharp" name="code">
// _sms_manager.h
#ifndef _SMS_MANAGER_H_
#define _SMS_MANAGER_H_

void devkit_SMS_init();
void devkit_SMS_displayOn();
void devkit_SMS_displayOff();
void devkit_SMS_mapROMBank( unsigned char n );
// ...

// input
unsigned int devkit_SMS_getKeysStatus();
unsigned int devkit_PORT_A_KEY_UP();
unsigned int devkit_PORT_A_KEY_DOWN();
// ...
unsigned int devkit_PORT_A_KEY_1();
unsigned int devkit_PORT_A_KEY_2();

// #defines
unsigned char devkit_SPRITEMODE_NORMAL();
unsigned int devkit_VDPFEATURE_HIDEFIRSTCOL();

#endif//_SMS_MANAGER_H_
</pre>
Note: repeat this process for PSGlib.h.  Also, don't forget to upgrade PSGlib to include <a href="https://github.com/sverx/devkitSMS/blob/master/PSGlib/src/PSGlib.c">PSGResume</a>() API.
<br /><br />
<b>Screen</b>
<br />
As projects get larger there will be more screens.  Therefore, refactor and channel through screen manager:
<pre class="csharp" name="code">
// screen_manager.c
#include "screen_manager.h"
#include "global_manager.h"
#include "enum_manager.h"

// Screens
#include "splash_screen.h"
#include "intro_screen.h"
// ...
#include "over_screen.h"

static void( *load_method[ MAX_SCREEENS ] )( );
static void( *update_method[ MAX_SCREEENS ] )( unsigned char *screen_type );

static unsigned char curr_screen_type;
static unsigned char next_screen_type;

void engine_screen_manager_init( unsigned char open_screen_type )
{
  next_screen_type = open_screen_type;
  curr_screen_type = screen_type_none;

  // Set load methods.
  load_method[ screen_type_splash ] = screen_splash_screen_load;
  load_method[ screen_type_intro ] = screen_intro_screen_load;
  // ...
}

void engine_screen_manager_update()
{
  if( curr_screen_type != next_screen_type )
  {
    curr_screen_type = next_screen_type;
    load_method[ curr_screen_type ]();
  }

  update_method[ curr_screen_type ]( &next_screen_type );
}
</pre>
<br />
<b>Input</b>
<br />
Remove previous + current input state that was injected into methods and channel through input manager:
<pre class="csharp" name="code">
// input_manager.c
#include "input_manager.h"
#include "_sms_manager.h"

// Must be static to persist values!
static unsigned int curr_joypad1 = 0;
static unsigned int prev_joypad1 = 0;

// Private helper methods.
static unsigned char engine_input_manager_hold( unsigned int data );
static unsigned char engine_input_manager_move( unsigned int data );

// Public method.
void engine_input_manager_update()
{
  prev_joypad1 = curr_joypad1;
  curr_joypad1 = devkit_SMS_getKeysStatus();
}

// main.c
for (;;)
{
  if( devkit_SMS_queryPauseRequested() )
  {
    // ...
  }

  devkit_SMS_initSprites();
  engine_input_manager_update();
  engine_screen_manager_update();

  devkit_SMS_finalizeSprites();
  devkit_SMS_waitForVBlank();
  devkit_SMS_copySpritestoSAT();

  devkit_PSGFrame();
  devkit_PSGSFXFrame();
}
</pre>
<br />
<b>Banks</b>
<br />
In 2017, <a href="http://www.smspower.org/Homebrew/AstroForce-SMS">Astro Force</a> by <a href="http://www.smspower.org/forums/member10267">eruiz00</a> gave a great example on how to reference bank information generated from bmp2tile and folder2c in code to lookup data stored in arrays, for example, to load banked sprite animation:
<pre class="csharp" name="code">
// anim_object.h
extern const unsigned char *player_anim_data[];
extern const unsigned char player_anim_bank[];

//anim_object.c
#include "anim_object.h"
#include "..\banks\bank2.h"

const unsigned char *player_anim_data[] =
{
  player_idle__tiles__psgcompr,
  player_run_left_01__tiles__psgcompr,
  player_run_left_02__tiles__psgcompr,
  // ...
  player_run_rght_04__tiles__psgcompr,
  player_run_rght_05__tiles__psgcompr,
};
const unsigned char player_anim_bank[] =
{
  player_idle__tiles__psgcompr_bank,
  player_run_left_01__tiles__psgcompr_bank,
  player_run_left_02__tiles__psgcompr_bank,
  // ...
  player_run_rght_04__tiles__psgcompr_bank,
  player_run_rght_05__tiles__psgcompr_bank,
};

// anim_manager.c
static void player_load( unsigned char index, unsigned int tile )
{
  const unsigned char *data = ( const unsigned char * ) player_anim_data[ index ];
  const unsigned char bank = ( const unsigned char ) player_anim_bank[ index ];

  devkit_SMS_mapROMBank( bank );
  devkit_SMS_loadPSGaidencompressedTiles( data, tile );
}
</pre>
<br />
<b>Levels</b>
<br />
In 2018, <a href="http://www.smspower.org/Homebrew/DuckslayerAdventures-SMS">Duckslayer Adventures</a> by <a href="http://www.smspower.org/forums/member601">haroldoop</a> gave a great example of how levels could be stored externally in text files then converted into byte arrays using folder2c.  The byte arrays are then interpreted for drawing:
<table width="99%" border="1">
<tr>
<td valign="top" width="20%">
<table width="100%">
<tr>
<td valign="top" width="40%">&nbsp;<b>KEY</b></td>
<td valign="top" width="40%">&nbsp;<b>VALUE</b></td>
</tr>
<tr>
<td valign="top" width="40%">&nbsp;.</td>
<td valign="top" width="40%">&nbsp;Blank</td>
</tr>
<tr>
<td valign="top" width="40%">&nbsp;#</td>
<td valign="top" width="40%">&nbsp;Block</td>
</tr>
<tr>
<td valign="top" width="40%">&nbsp;@</td>
<td valign="top" width="40%">&nbsp;Platform</td>
</tr>
<tr>
<td valign="top" width="40%">&nbsp;$</td>
<td valign="top" width="40%">&nbsp;Optional</td>
</tr>
<tr>
<td valign="top" width="40%">&nbsp;1</td>
<td valign="top" width="40%">&nbsp;Player</td>
</tr>
<tr>
<td valign="top" width="40%">&nbsp;X</td>
<td valign="top" width="40%">&nbsp;Exit</td>
</tr>
<tr>
<td valign="top" width="40%">&nbsp;G</td>
<td valign="top" width="40%">&nbsp;Gem</td>
</tr>
<tr>
<td valign="top" width="40%">&nbsp;P</td>
<td valign="top" width="40%">&nbsp;Power</td>
</tr>
</table>
</td>
<td valign="top" width="20%" >
<pre class="csharp" name="code">
&nbsp;&nbsp;// Level0101
&nbsp;&nbsp;................
&nbsp;&nbsp;.P..............
&nbsp;&nbsp;.@@...........@@
&nbsp;&nbsp;..........A.....
&nbsp;&nbsp;..G...$@@@@....G
&nbsp;&nbsp;.@@...........@@
&nbsp;&nbsp;................
&nbsp;&nbsp;.G............G.
&nbsp;&nbsp;.@@...........@@
&nbsp;&nbsp;.@@.1.......X.@@
&nbsp;&nbsp;.####$$$$$$#####
&nbsp;&nbsp;..###$$$$$$####.
</pre>
</td>
<td valign="top" width="60%">
<a href="https://4.bp.blogspot.com/-KR1qFV6kMLs/XL8oMGZ6Y2I/AAAAAAAAFZE/wB00siBfJBkplLILCJnR1Us78Wq8H2I0ACLcBGAs/s1600/Level0101.png" imageanchor="1" ><img border="0" src="https://4.bp.blogspot.com/-KR1qFV6kMLs/XL8oMGZ6Y2I/AAAAAAAAFZE/wB00siBfJBkplLILCJnR1Us78Wq8H2I0ACLcBGAs/s640/Level0101.png" width="95%" /></a>
</td>
</tr>
</table>
<br />
<b>Structs</b>
<br />
Finally, as seen in many code samples from haroldoop, <a href="https://en.wikipedia.org/wiki/Struct_(C_programming_language)">structs</a> are used extensively to store data especially data accessed globally throughout the code base.  Platform Explorer uses this idea coupled with "manager":
<pre class="csharp" name="code">
// hack_object.h
typedef struct tag_struct_hack_object
{
  unsigned char hack_delayspeed;
  unsigned char hack_invincible;
  unsigned char hack_difficulty;
  unsigned char hack_game_speed;

} struct_hack_object;

 
// hack_manager.h
#include "hack_object.h"

void engine_hack_manager_init();
extern struct_hack_object global_hack_object;


// hack_manager.c
#include "hack_manager.h"
#include "global_manager.h"
#include "enum_manager.h"

#define PEEK( addr)        (* ( unsigned char *)( addr ) )
#define POKE( addr, data ) (* ( unsigned char *)( addr ) = ( data ) )

#define HACKER_START       0x0050

// Global variable.
struct_hack_object global_hack_object;

void engine_hack_manager_init()
{
  struct_hack_object *ho = &global_hack_object;
  ho->hack_delayspeed = 0;
  ho->hack_invincible = 0;
  ho->hack_difficulty = 0;
  ho->hack_game_speed = 0;

#ifndef _CONSOLE
  ho->hack_delayspeed = PEEK( HACKER_START - 1 );
  ho->hack_invincible = PEEK( HACKER_START + 0 );
  ho->hack_difficulty = PEEK( HACKER_START + 1 );
  ho->hack_game_speed = PEEK( HACKER_START + 2 );
#endif
}
</pre>

<br />
<u>Debugging</u>
<br />
Visual Studio is useful IDE for navigating a large code base.  However, as the game code currently targets SDCC compiler it does not seem possible to debug step through the devkitSMS specific API source calls.
<br /><br />
Nonetheless, leverage the _CONSOLE conditional compilation statement and implement the following code.  Here, it is possible to debug step through all ANSI-C code at least trusting devkitSMS code works correctly.
<pre class="csharp" name="code">
// _sms_manager.c
#include "_sms_manager.h"
#include "info_manager.h"
#include &lt;stdbool.h&gt;

#ifdef _CONSOLE
#include "..\..\tmp\SMSlib.h"
#else
#include "..\..\lib\SMSlib.h"
#endif

void devkit_SMS_init()
{
  SMS_init();
}
void devkit_SMS_displayOn()
{
  SMS_displayOn();
}
void devkit_SMS_displayOff()
{
  SMS_displayOff();
}
void devkit_SMS_mapROMBank( unsigned char n )
{
  SMS_mapROMBank( n );
}
// ...

// Sega header.
#ifdef _CONSOLE
#else
  SMS_EMBED_SEGA_ROM_HEADER( productCode, revision );
  SMS_EMBED_SDSC_HEADER( verMaj, verMin, dateYear, dateMonth, dateDay, author, name, descr );
#endif
</pre>
Remember: tmp sub-folder contains dummy PSGlib.h and SMSlib.h header files that facilitate debugging.
<br /><br />
<u>Performance</u>
<br />
In order to process collision detections in <a href="https://en.wikipedia.org/wiki/Platform_game">Platformers</a>, it is commonplace to take the absolute value of the distance of two points + use for comparison.  Unfortunately, there was noticeable delay with this <a href="https://stackoverflow.com/questions/9772348/get-absolute-value-without-using-abs-function-nor-if-statement">function</a>:
<pre class="csharp" name="code">
int abs( int v )
{
  return v * ( ( v < 0 ) * ( -1 ) + ( v > 0 ) );
}
</pre>
After examining code this function invoked multiple times per frame it was clear that abs() could be replaced with simple if statement.  Being able to debug step through <a href="https://en.wikipedia.org/wiki/C_(programming_language)">C</a> code helped ensure this still worked as before!
<br /><br />
<u>Polish</u>
<br />
Also, as projects become larger, more content is required.  Therefore, to ensure polish throughout the game it was critical that the <a href="https://en.wikipedia.org/wiki/Video_RAM_(dual-ported_DRAM)">VRAM</a> was cleared properly between large graphic content loads to avoid any glitches.
<pre class="csharp" name="code">
// intro_screen.c
void screen_intro_screen_load()
{
  // Unload VRAM each begin to remove any unwanted graphics glitches...!
  devkit_SMS_displayOff();
  engine_asm_manager_clear_VRAM();
  engine_text_manager_clear_all();

  engine_content_manager_load_back_tiles();
  engine_content_manager_load_sprites();
  engine_content_manager_load_title();
  // ...
  devkit_SMS_displayOn();
}
</pre>
<u>Deployment</u>
<br />
Finally, a big shout out to <a href="http://www.smspower.org/forums/member6944">Calindro</a> who helped deploy updated versions of Platform Explorer during the competition + for outlining is always better to stick with Power of 2 ROM sizes for compatibility reasons. 
<br /><br />
<u>Summary</u>
<br />
To summarize, once again the SMS Power! community has been awesome and by members sharing their code this has helped immensely with <a href="http://www.smspower.org/Homebrew/PlatformExplorer-SMS">Platform Explorer</a> doing so well in the <a href="http://www.smspower.org/Competitions/Coding-2019">2019</a> Coding Competition <span style='font-family:Wingdings'>J</span><span><o:p></o:p></span>
</span>