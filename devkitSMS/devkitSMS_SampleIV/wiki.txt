<span style="font-family:verdana;font-size:85%;">
In <a href="http://steveproxna.blogspot.com/2017/09/devkitsms-programming-setup.html">2017</a>, we checked out <a href="https://github.com/sverx/devkitSMS">devkitsms</a> to setup productive development environment to build 8-bit retro video games for the Sega Master System (<a href="http://en.wikipedia.org/wiki/Master_System">SMS</a>).  In <a href="http://steveproxna.blogspot.com/2019/04/devkitsms-programming-sample-iii.html">2019</a>, we improved build process to develop <a href="https://www.smspower.org/Homebrew/PlatformExplorer-SMS">Platform Explorer</a>.
<br /><br />
Though after five years of SMS development we would like to connect more the <a href="http://en.wikipedia.org/wiki/C_(programming_language)">C language</a> with underlying <a href="http://en.wikipedia.org/wiki/Zilog_Z80#Z80_assembly_language">Z80 assembly</a> code.  Look for opportunities to consolidate 8-bit retro game development to build <a href="https://www.smspower.org/Homebrew/CandyKid-SMS">Candy Kid</a>!
<a href="https://3.bp.blogspot.com/-zT9aLBPp0Wk/Xpi6uVGyT1I/AAAAAAAAGH8/9LcVK5jl8aY-ltvqiMaA5n3jI9VZA6vYgCLcBGAsYHQ/s1600/01.png" imageanchor="1" ><img border="0" src="https://3.bp.blogspot.com/-zT9aLBPp0Wk/Xpi6uVGyT1I/AAAAAAAAGH8/9LcVK5jl8aY-ltvqiMaA5n3jI9VZA6vYgCLcBGAsYHQ/s640/01.png" width="98%" height="526" /></a>
<br />
Let's check it out!
<br /><br />
<u>Game</u><br />
<a href="https://www.smspower.org/Scans/SegaComputer-Magazine-Issue02?gallerypage=17">Candy Kid</a> video game was originally programmed by Grandstand Leisure from New Zealand in September 1984.  The game written in <a href="http://en.wikipedia.org/wiki/BASIC">BASIC</a> on the Sega SC-3000.  Thanks to the awesome SMS Power! community Candy Kid is available on Sega Master System in <a href="http://www.smspower.org/Competitions/Coding-2020">2020</a> Coding Competition.  Download source code <b><a href="https://github.com/SteveProXNA/CandyKidSMS">here</a></b>.
<br /><br />
<u>Software</u><br />
Follow all instructions from the previous <a href="http://steveproxna.blogspot.com/2017/09/devkitsms-programming-setup.html">post</a>: this documents how to setup the pre-requisite software.
<br />
Note: ensure you have downloaded and installed the <a href="https://github.com/sverx/devkitSMS">devkitSMS</a> and Small Device C Compiler [<a href="http://sdcc.sourceforge.net">SDCC</a>].
<br /><br />
<u>Checklist</u>
<br />
Here is a checklist of tasks to complete in order to try and improve the existing development environment:
<ul>
<li>Connect more the C language and Z80 assembly code via emulation</li>
<li>Implement various code architectural updates from the devkitSMS</li>
<li>Apply techniques to resolve vulnerabilities debugging source code</li>
<li>Explore strategies to confront the 32KB ROM game code capacity</li>
</ul>
<br />
<u>Emulation</u><br />
In 2013, we checked out <a href="http://steveproxna.blogspot.ie/2013/09/sega-console-programming.html">Sega Console Programming</a> with goal to build retro game in Z80 assembler for the Sega Master System.  However, the process to write Z80 assembly language from scratch seemed daunting.
<br /><br />
In 2019, since collaborating with <a href="http://www.smspower.org/forums/member6944">Calindro</a>, we now have the opportunity to understand relationship between C source code and the generated Z80 assembly: <a href="https://emulicious.net">Emulicious</a> will decorate Z80 code in the debugger with its corresponding C function!
<br /><br />
Launch Emulicious. Tools menu | ensure "Reopen Tools" option is checked. Launch the debugger. File menu | ensure "Load Sources automatically" is checked + Run menu | ensure "Suspend On Open" is checked.  Close
<a href="https://3.bp.blogspot.com/-fkOzJSV7b3I/XtaVckohaQI/AAAAAAAAGL4/K71AKqFw2t4dyX2xFPbediWFTegZpfITACLcBGAsYHQ/s1600/emulicious01.png" imageanchor="1" ><img border="0" src="https://3.bp.blogspot.com/-fkOzJSV7b3I/XtaVckohaQI/AAAAAAAAGL4/K71AKqFw2t4dyX2xFPbediWFTegZpfITACLcBGAsYHQ/s640/emulicious01.png" width="98%" /></a>
<br />
Ensure the <a href="https://github.com/SteveProXNA/CandyKidSMS/blob/master/dev/output.map">output.map</a> file is <b>not</b> deleted in build script.  E.g. both <a href="https://github.com/SteveProXNA/CandyKidSMS/blob/master/dev/output.sms">output.sms</a> and <a href="https://github.com/SteveProXNA/CandyKidSMS/blob/master/dev/output.map">output.map</a> are built and loaded into Emulicious.  The output.map maps C source code functions to the underlying Z80 assembly code.
<br /><br />
<i>Example</i><br />
Search for main function.  Ctrl + F | Find "_main"  Ctrl+click "main" to navigate there.  Ctrl+click any function name to navigate + inspect Z80 assembly code built for that function.  Click Alt+Left to navigate back.  Nice!
<a href="https://1.bp.blogspot.com/-aIDQ5wzWFKE/XtaV4Iz0vXI/AAAAAAAAGMA/d7zmYe29S78eFgYDnaSi_dJedEL9a4qzgCLcBGAsYHQ/s1600/emulicious02.png" imageanchor="1" ><img border="0" src="https://1.bp.blogspot.com/-aIDQ5wzWFKE/XtaV4Iz0vXI/AAAAAAAAGMA/d7zmYe29S78eFgYDnaSi_dJedEL9a4qzgCLcBGAsYHQ/s640/emulicious02.png" width="98%" /></a>
<br /><br />
<u>Coding</u><br />
The following coding changes and enhancements have been made throughout Candy Kid development cycle:
<br /><br />
<b>Collision</b><br />
Leverage the built-in <a href="https://github.com/SteveProXNA/CandyKidSMS/blob/master/lib/SMSlib.h">SMS_VDPFlags</a> for fast sprite collision detection.  If value equals 0x20 then at least two sprites have collided then implement slow(er) collision detection by checking if sprite rectangle(s) intersect:
<br /><br />
<a href="https://github.com/SteveProXNA/CandyKidSMS/blob/master/dev/screen/play_screen.c">play_screen.c</a>
<pre class="csharp" name="code">
gamer_collision = devkit_isCollisionDetected();
if ( 0 != gamer_collision )             // Fast.
{                                       // Slow.
    for( enemy = 0; enemy < MAX_ENEMIES; enemy++ )
    {
        eo = &global_enemy_objects[ enemy ];
        if( go->posnX > eo->posnX )     { dx = go->posnX - eo->posnX; }
        else                            { dx = eo->posnX - go->posnX; }

        if( go->posnY > eo->posnY )     { dy = go->posnY - eo->posnY; }
        else                            { dy = eo->posnY - go->posnY; }

        if( dx <= distance && dy <= distance ) { gamer_collision = enemy; break; }
    }
}
</pre>
<br />
<b>Levels</b><br />
In 2018, <a href="http://www.smspower.org/Homebrew/DuckslayerAdventures-SMS">Duckslayer Adventures</a> by <a href="http://www.smspower.org/forums/member601">haroldoop</a> gave a great example of how levels could be stored externally in text files then converted into byte arrays using folder2c.  The byte arrays are then interpreted for drawing:
<table width="99%" border="1">
<tr>
<td valign="top" width="20%">
<table width="100%">
<tr>
<td valign="top" width="40%">&nbsp;<b>KEY</b></td>
<td valign="top" width="40%">&nbsp;<b>VALUE</b></td>
</tr>
<tr>
<td valign="top" width="40%">&nbsp;0</td>
<td valign="top" width="40%">&nbsp;Blank</td>
</tr>
<tr>
<td valign="top" width="40%">&nbsp;1</td>
<td valign="top" width="40%">&nbsp;Trees</td>
</tr>
<tr>
<td valign="top" width="40%">&nbsp;2</td>
<td valign="top" width="40%">&nbsp;Candy</td>
</tr>
<tr>
<td valign="top" width="40%">&nbsp;3</td>
<td valign="top" width="40%">&nbsp;BonusA</td>
</tr>
<tr>
<td valign="top" width="40%">&nbsp;4</td>
<td valign="top" width="40%">&nbsp;BonusB</td>
</tr>
<tr>
<td valign="top" width="40%">&nbsp;5</td>
<td valign="top" width="40%">&nbsp;BonusC</td>
</tr>
<tr>
<td valign="top" width="40%">&nbsp;6</td>
<td valign="top" width="40%">&nbsp;BonusD</td>
</tr>
</table>
</td>
<td valign="top" width="20%" >
<pre class="csharp" name="code">
&nbsp;&nbsp;// Level0101
&nbsp;&nbsp;3000000004
&nbsp;&nbsp;0002222000
&nbsp;&nbsp;0000000000
&nbsp;&nbsp;0211111120
&nbsp;&nbsp;0210110120
&nbsp;&nbsp;0210110120
&nbsp;&nbsp;0211111120
&nbsp;&nbsp;0000000000
&nbsp;&nbsp;0002222000
&nbsp;&nbsp;5000000006
</pre>
</td>
<td valign="top" width="60%">
<a href="https://4.bp.blogspot.com/-FpiXReMwg0c/Xsbjvhv9iQI/AAAAAAAAGLc/IFmNAOA2gTMLq2y2e56yx87CHu_92tVgQCLcBGAsYHQ/s1600/Level0101.png" imageanchor="1" ><img border="0" src="https://4.bp.blogspot.com/-FpiXReMwg0c/Xsbjvhv9iQI/AAAAAAAAGLc/IFmNAOA2gTMLq2y2e56yx87CHu_92tVgQCLcBGAsYHQ/s640/Level0101.png" width="95%" /></a>
</td>
</tr>
</table>
<br />
<b>SRAM</b><br />
Persisting important data like Hi Scores and player settings across game sessions makes for better gaming experience.  Here is the Candy Kid implementation with <a href="https://www.smspower.org/forums/16013-DevkitSMSSMSlibMissingRequestingFeatures">SRAM support</a> currently included in the devkitSMS:
<br /><br />
<a href="https://github.com/SteveProXNA/CandyKidSMS/blob/master/dev/engine/storage_manager.c">storage_manager.c</a>
<pre class="csharp" name="code">
#define MAGIC   0xACE0B004
#define FINAL   0xFF

// Global variable.
struct_storage_object global_savegame_object;

unsigned char engine_storage_manager_available()
{
    struct_storage_object *savegame = ( struct_storage_object* ) ( devkit_SMS_SRAM() );
    unsigned char foundMagic;

    devkit_SMS_enableSRAM();
    foundMagic = MAGIC == savegame->Magic;
    devkit_SMS_disableSRAM();
    return foundMagic;
}
void engine_storage_manager_read()
{
    struct_storage_object *savegame = ( struct_storage_object* ) ( devkit_SMS_SRAM() );
    struct_state_object *st = &global_state_object;

    devkit_SMS_enableSRAM();
    st->state_object_high_score = savegame->save_high_score;
//  ...
    devkit_SMS_disableSRAM();
}
void engine_storage_manager_write()
{
    struct_storage_object *savegame = ( struct_storage_object* ) ( devkit_SMS_SRAM() );
    struct_state_object *st = &global_state_object;

    devkit_SMS_enableSRAM();
    savegame->Magic = MAGIC;
    savegame->save_high_score = st->state_object_high_score;
//  ...
    savegame->terminal = FINAL;
    devkit_SMS_disableSRAM();
}
void engine_storage_manager_erase()
{
    struct_storage_object *savegame = ( struct_storage_object* ) ( devkit_SMS_SRAM() );

    devkit_SMS_enableSRAM();
    savegame->Magic = 0x00000000;
    savegame->save_high_score = DEF_HI_SCORE;
//  ...
    savegame->terminal = FINAL;
    devkit_SMS_disableSRAM();
}
</pre>
<br />
<u>Debugging</u><br />
<a href="https://en.wikipedia.org/wiki/Buffer_overflow">Buffer overflow</a> [or overrun] is an anomaly where writing data to buffer overruns the buffer's boundary and overwrites adjacent memory.  In Candy Kid, the player can be killed by any one of the three Mama enemies; Actors 0-2.  But Kid can also be killed by death tree ie "actor" 4.  When Kid is killed we initially reset the "kill" enemy unconditionally.  Thus if killed by death tree enemy "4" would be reset hence a buffer overrun occurs!  Big thanks to <a href="http://www.smspower.org/forums/member6944">Calindro</a> + <a href="https://www.smspower.org/forums/member7198">sverx</a> for helping debug this issue.  The solution is to check enemy kill before reset.
<br /><br />

<br />
<u>Capacity</u><br />
The following challenges were encountered with 32KB ROM game code capacity during development cycle:
<br /><br />
<b>Input</b><br />
The previous <a href="https://github.com/SteveProXNA/PlatformExplorerSMS/blob/master/dev/source/input_manager.h">input</a> manager had clean <a href="https://www.haroldserrano.com/blog/c-tip-12-make-interfaces-easy-to-use-correctly-and-hard-to-use-incorrectly">interface</a> that's "Easy to use correctly" and "Hard to use incorrectly"  But this suffered from code bloat + additional costly bytes.  Therefore, inject key test for simpler interface:
<br /><br />
<a href="https://github.com/SteveProXNA/CandyKidSMS/blob/master/dev/engine/input_manager.c">input_manager.c</a>
<pre class="csharp" name="code">
#include "input_manager.h"
#include "..\devkit\_sms_manager.h"

static unsigned int curr_joypad1 = 0;
static unsigned int prev_joypad1 = 0;

// Public methods.
void engine_input_manager_update()
{
    prev_joypad1 = curr_joypad1;
    curr_joypad1 = devkit_SMS_getKeysStatus();
}
unsigned char engine_input_manager_hold( unsigned char data )
{
    return curr_joypad1 & data && !( prev_joypad1 & data );
}
unsigned char engine_input_manager_move( unsigned char data )
{
    return curr_joypad1 & data;
}
</pre>
<br />
<b>Banks</b><br />
In 2017, <a href="http://www.smspower.org/Homebrew/AstroForce-SMS">Astro Force</a> by <a href="http://www.smspower.org/forums/member10267">eruiz00</a> gave great example on how to store static data in <a href="https://github.com/kusfo/astroforce/blob/master/fixedbank.c">fixedbank.c</a> to scale out more game content and bank switch on-the-fly without consuming the precious 32KB ROM for game code.  
<br /><br />
Candy Kid attempts to replicate this strategy, unfortunately still hitting 32KB capacity for game code.  Next step could be store function pointer arrays in fixedbank.c like Astro Force to conserve more precious bytes!
<br /><br />
<a href="https://github.com/SteveProXNA/CandyKidSMS/blob/master/dev/banks/fixedbank.c">fixedbank.c</a>
<pre class="csharp" name="code">
const unsigned char bossX_object_speed[] = { 1, 1, 2, 1, 1, 1, 3, 3, 1, 1, 1, 1 };
const unsigned char bossX_object_delay[] = { 2, 2, 3, 1, 1, 1, 2, 2, 3, 3, 2, 2 };
const unsigned char enemy_object_image[] = { 0, 2, 4, 12, 14, 16, 24, 26, 28, 36, 38, 40 };
const unsigned char enemy_object_speed[] = { 2, 3, 1, 3, 2, 1, 3, 2, 1, 1, 2, 3 };
const unsigned char enemy_object_delay[] = { 3, 3, 1, 2, 3, 1, 2, 1, 2, 2, 3, 3 };
const unsigned char enemy_object_hands[] = { 90, 80, 70, 60, 95, 85, 75, 65, 99, 90, 80, 70 };
const unsigned char enemy_object_waits[] = { 80, 60, 40, 20, 85, 65, 45, 25, 90, 70, 50, 30 };
const unsigned char enemy_object_tours[] = { 64, 72, 80, 88, 68, 76, 84, 92, 72, 80, 88, 96 };
const unsigned char enemy_object_kills[] = { 65, 73, 81, 89, 69, 77, 85, 93, 73, 81, 89, 97 };
const unsigned char gamer_object_image[] = { 0, 2, 4, 12, 14, 16 };
const unsigned char gamer_object_speed[] = { 1, 2, 3, 3 };
const unsigned char gamer_object_delay[] = { 1, 1, 2, 1 };
// TODO potentially include function pointer arrays here also!
</pre>
<br />
<b>Build</b><br />
In previous projects our <a href="https://github.com/SteveProXNA/PlatformExplorerSMS/blob/master/dev/build.bat">build.bat</a> file had always used SDCC compiler switch to favor code speed.  However, as Candy Kid was struggling to stay within 32KB ROM limit, unfortunately was necessary to favor code size:
<br /><br />
<a href="https://github.com/SteveProXNA/CandyKidSMS/blob/master/dev/build.bat">build.bat</a>
<pre class="csharp" name="code">
sdcc -c -mz80 --opt-code-size --peep-file peep-rules.txt --std-c99 main.c
</pre>
<br />
<b>Command</b><br />
In 2009, we implemented the <a href="http://steveproxna.blogspot.com/2009/12/command-design-pattern.html">Command Design</a> pattern to record sprite movement in <a href="http://steveproxna.blogspot.com/2009/09/first-game-completion.html">Henway</a> to playback for debugging and demo modes.  Therefore, we would also like to implement the Command Design pattern for Candy Kid.  The motivation here is record enemy movement for <a href="https://en.wikipedia.org/wiki/Reinforcement_learning">Reinforcement Learning</a> in video games.
<br /><br />
<a href="https://github.com/SteveProXNA/CandyKidSMS/blob/master/dev/engine/command_manager.h">command_manager.h</a>
<pre class="csharp" name="code">
void engine_command_manager_add( unsigned int frame, unsigned char command_type, unsigned char args );
void engine_command_manager_execute( unsigned int frame );
</pre>
<a href="https://github.com/SteveProXNA/CandyKidSMS/blob/master/dev/screen/play_screen.c">play_screen.c</a>
<pre class="csharp" name="code">
void screen_play_screen_update( unsigned char *screen_type )
{
    // Implement logic to boost and move Candy Kid gamer.
    engine_command_manager_add( frame, command_type_gamer_speed, gamer_boost );
    engine_command_manager_add( frame, command_type_gamer_mover, gamer_direction );

    // Implement logic to boost and move Candy Mama enemies.
    engine_command_manager_add( frame, command_type_enemy_speed, ( enemy | ( enemy_boost << 4 ) ) );
    engine_command_manager_add( frame, command_type_enemy_mover, ( enemy | ( enemy_direction << 4 ) ) );

    // Execute all commands for this frame.
    engine_command_manager_execute( frame );
}
</pre>
Rather than boost and move actors directly from game events we add these as commands to an array and execute them accordingly.  However, even when storing 255 commands this quickly added to 1KB memory!
<br /><br />
<a href="https://github.com/SteveProXNA/CandyKidSMS/blob/master/dev/engine/command_manager.c">command_manager.c</a>
<pre class="csharp" name="code">
#define MAX_FRAMES 255
static unsigned int command_object_frames[ MAX_FRAMES ];
static unsigned char command_object_cmds[ MAX_FRAMES ];
static unsigned char command_object_args[ MAX_FRAMES ];
</pre>
Unfortunately, due to competition time constraints and hitting 32KB capacity for game code the Command Design pattern was not fully implemented.  Next steps: code refactor and perhaps storing less commands.
<br /><br />
<br />
<b>z88dk</b><br />
In 2016, <a href="http://steveproxna.blogspot.com/2016/03/3dcity-code-complete.html">3D City</a> was built using an old version of the <a href="https://en.wikipedia.org/wiki/Z88DK">z88dk</a> which worked on emulators but real Master System hardware experienced graphics glitches.  Subsequently, the updated version of z88dk integrates devkitSMS which also works on real hardware.  In fact, this is how <a href="http://www.smspower.org/Homebrew/GalacticRevenge-SMS">Galactic Revenge</a> was built by <a href="http://www.smspower.org/forums/member10267">eruiz00</a>.  This was preferred because the libraries are optimized in assembly language and produce smaller object code.
<br /><br />
Therefore, this seemed a promising option for Candy Kid especially late in the development cycle when the game hit 32KB capacity for game code.  Unfortunately, z88dk does not support the following two APIs used:
<table width="98%" border="1">
<tr>
<td valign="top">
&nbsp;<a href="https://github.com/SteveProXNA/CandyKidSMS/blob/master/lib/SMSlib.h">SMSlib.h</a>
</td>
<td valign="top">
&nbsp;extern volatile unsigned char SMS_VDPFlags;
</td>
</tr>
<tr>
<td valign="top">
&nbsp;<a href="https://github.com/SteveProXNA/CandyKidSMS/blob/master/lib/PSGlib.h">PSGlib.h</a>
</td>
<td valign="top">
&nbsp;void PSGResume (void);
</td>
</tr>
</table>
<br /><br />
<u>Summary</u><br />
To summarize, the development process to build Candy Kid, like all previous SMS projects, has been very educational + has provided numerous opportunities to collaborate more with the SMS Power! community.
<br /><br />
However, the biggest challenge in completing Candy Kid was to stay within the 32KB ROM game code limit.  Here is a short list of current + future options:
<ul>
<li>Build game code in Z80 assembly directly for complete control of the machine code byte output</li>
<li>Refactor duplicate code to store generic code in function pointer arrays accessible by fixed bank</li>
<li>Integrate z88dk and devkitSMS that produces smaller object code by using only supported APIs</li>
<li>Upgrade from 8-bit Master System to 16-bit Mega Drive and bypass 32KB hard limit altogether</li>
</ul>
<br />
In fact, the final option is the most unique: much like how the Sega Master System has the devkitSMS to support homebrew game development using C language, the Sega Mega Drive has the <a href="https://github.com/Stephane-D/SGDK">SGDK</a>.  Therefore, would be interesting to transition many <a href="http://steveproxna.blogspot.com/2013/06/sega-retro-gaming.html">Sega Retro Gaming</a> ideas developed from 8-bit onward to 16-bit!
</span>