<span style="font-family:verdana;font-size:85%;"> 
Last year, I conducted a simple retrospective for 2020. Therefore, here is a retrospective for 2021.
<br /><br />
<u>2021 Achievements</u><br />
<table width="100%">
<tr>
<td valign="top">
<ul>
<li><a href="https://steveproxna.blogspot.com/2021/02/z80-programming-setup.html">Setup</a> Z80 Assembly Programming cross platform for Windows, MacOS/X and Linux</li>
<li>Configure VS Code Emulicious Debugger plugin for <a href="https://steveproxna.blogspot.com/2021/03/z80-programming-sample.html">Z80</a> source code stepin + hacks</li>
<li>Enter Van Halen <a href="https://www.smspower.org/Homebrew/VanHalenDemo-SMS">demo</a> for SMS Power! 2021 competition built in pure Z80 Assembly</li>
<li>Build <a href="https://steveproxna.itch.io/vintage-van-halen">Van Halen</a> quiz using C/SGDK for the Sega MegaDrive similar to C/devkitSMS</li>
<li>Upgrade <a href="https://www.smspower.org/Homebrew/SimpsonsTrivia-SMS">Simpsons Trivia</a> for Sega Master System include more characters and SFX</li>
<li><a href="https://steveproxna.itch.io/simpsons-trivia">Port</a> Simpsons Trivia to the Sega MegaDrive using similar <a href="https://en.wikipedia.org/wiki/C_(programming_language)">C</a> development processes</li>
<li>Compile Docker <a href="https://steveproxna.blogspot.com/2021/08/docker-cheat-sheet.html">cheat</a> sheet for cluster containerization in Cloud Native technology</li>
<li>Compile Kuberenetes <a href="https://steveproxna.blogspot.com/2021/09/kubernetes-cheat-sheet.html">cheat</a> sheet for Cloud Native technology cluster orchestration</li>
</ul>
Note: port low level homebrew games built from C/devkitSMS to C/SGDK is an achievement! 
</td>
</tr>
</table>
<br />
<u>2022 Objectives</u><br />
<table width="100%">
<tr>
<td valign="top">
<ul>
<li>Configure VS Code Emulicious Debugger <a href="https://marketplace.visualstudio.com/items?itemName=emulicious.emulicious-debugger">plugin</a> for C/devkitSMS source code step thru</li>
<li>Transition homebrew programming skills in C to professional work for example in <a href="https://dave.cheney.net/tag/cgo">CGo</a></li>
<li>Expand low level cross platform skills to Linux kernel e.g. <a href="https://www.infoq.com/presentations/facebook-google-bpf-linux-kernel">eBPF</a> networking + security</li>
<li>Extend <a href="https://www.packtpub.com/product/cloud-native-programming-with-golang/9781787125988">Golang</a> into Docker / Kubernetes experience as Cloud Native technology work</li>
</ul>
</table>
<br />
<u>Cloud</u>
<a href="https://blogger.googleusercontent.com/img/a/AVvXsEiCj481fVWFMoyO-kJkFBrGdOjK9cBzwTv4jHVtJbYgpy4KzOh0Hidn576NTY2osFPoCGxU96leIaS1c23MdpIZxqxK4fJspudZa3g_zU9tQa_v31dotCWdBjC7t9VafujVUPF0zsQJpkNyMNfetqOz5ETqmxE6so8hqD7qpYMbINxw7uzi4Td9rsDP=s364"><img alt="" border="0" width="98%" src="https://blogger.googleusercontent.com/img/a/AVvXsEiCj481fVWFMoyO-kJkFBrGdOjK9cBzwTv4jHVtJbYgpy4KzOh0Hidn576NTY2osFPoCGxU96leIaS1c23MdpIZxqxK4fJspudZa3g_zU9tQa_v31dotCWdBjC7t9VafujVUPF0zsQJpkNyMNfetqOz5ETqmxE6so8hqD7qpYMbINxw7uzi4Td9rsDP=s600"/></a>
<a href="https://www.investopedia.com/terms/c/cloud-computing.asp">Cloud Computing</a> is the on-demand delivery of infrastructure [hardware / servers], storage + databases via the Internet frequently delivered by cloud-based platforms: Amazon <a href="https://en.wikipedia.org/wiki/Amazon_Web_Services">AWS</a> / Google <a href="https://en.wikipedia.org/wiki/Google_Cloud_Platform">GCP</a> / Microsoft <a href="https://en.wikipedia.org/wiki/Microsoft_Azure">Azure</a>.
<br /><br />
<a href="https://kubernetes.io/blog/2019/05/17/kubernetes-cloud-native-and-the-future-of-software">Cloud Native</a> is architecture for assembling these cloud-based components optimized for cloud environment; Not about servers but the services.  Enterprises modernize their infrastructure and process by choosing cloud technologies e.g. <a href="https://en.wikipedia.org/wiki/Docker_(software)">Docker</a> for containerization, <a href="https://en.wikipedia.org/wiki/Kubernetes">Kuberenetes</a> for orchestration, that best fit their specific needs.
<br /><br />
<u>Golang</u>
<a href="https://blogger.googleusercontent.com/img/a/AVvXsEjIjhX6Qo239XaOcVZe2QF0huqCXqMlGXdl6rQGlANVVHiqh5Hwyt0OTIgsxGplgcIXFbioRUNkKkyMP9lMFsHEF6M-rWzEtdOHGwDUYC7NVWXTAnZFUBa5682nD5pWw7TSdUfHmmoJ8o5ZSaiRtU_yvJeT6IhR3sNsvcYcmIUUaD6xACtlpM4F57u0=s750"><img alt="" border="0" width="98%" src="https://blogger.googleusercontent.com/img/a/AVvXsEjIjhX6Qo239XaOcVZe2QF0huqCXqMlGXdl6rQGlANVVHiqh5Hwyt0OTIgsxGplgcIXFbioRUNkKkyMP9lMFsHEF6M-rWzEtdOHGwDUYC7NVWXTAnZFUBa5682nD5pWw7TSdUfHmmoJ8o5ZSaiRtU_yvJeT6IhR3sNsvcYcmIUUaD6xACtlpM4F57u0=s600"/></a>
<a href="https://en.wikipedia.org/wiki/Go_(programming_language)">Golang</a> [Go] is statically typed programming language syntactically similar to <a href="https://en.wikipedia.org/wiki/C_(programming_language)">C</a> but with memory safety and garbage collection.  Go was developed at Google to help solve the problem of concurrent messaging between distributed systems in the cloud using <a href="https://en.wikipedia.org/wiki/Communicating_sequential_processes">CSP</a> style concurrency.  Subsequently, Go is asynchronous by default.
<br /><br />
Therefore, all three major public cloud providers <a href="https://en.wikipedia.org/wiki/Amazon_Web_Services">AWS</a>, <a href="https://en.wikipedia.org/wiki/Google_Cloud_Platform">GCP</a>, <a href="https://en.wikipedia.org/wiki/Microsoft_Azure">Azure</a> support Go and have SDKs that interface with their systems in Go.  Thus <a href="https://www.quora.com/Is-Golang-the-future-of-cloud">Go</a> may become the standard way of distributed computing into the future.
<br /><br />
<u>Cgo</u><br />
<a href="https://go.dev/blog/cgo">CGo</a> is a technology which allows Go programs to interoperate with <a href="https://en.wikipedia.org/wiki/C_(programming_language)">C</a> libraries.  For example distributed cloud computing packages that consume <b><a href="https://github.com/SpiderLabs/ModSecurity">ModSecurity</a></b> C/C++ library for Web Applicaton Firewall (WAF) detection.
<br /><br />
Another example <b><a href="https://ebpf.io">eBPF</a></b>: a revolutionary technology that can run sandboxed <a href="https://en.wikipedia.org/wiki/C_(programming_language)">C</a> programs safely and efficiently extending the capabilities of the Linux kernel, without requiring changes to kernel source code or load kernel modules, consumed from Go packages providing high-performance networking in cloud native environments. 
<br /><br />
<u>Summary</u><br />
Writing low level <a href="https://en.wikipedia.org/wiki/C_(programming_language)">C</a> code to target 8-bit Sega <a href="https://en.wikipedia.org/wiki/Master_System">Master System</a>  hardware and now the 16-bit Sega <a href="https://en.wikipedia.org/wiki/Sega_Genesis">Mega Drive</a> it has proved to be very valuable experience for CGo applications which could assist in Go + Cloud Computing.  The next challenge is port projects exclusively on Windows and include Linux system builds cross platform <span style='font-family:Wingdings'>J</span><span><o:p></o:p></span>  
</span>