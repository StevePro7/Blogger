Clean Code
07/08/2025

Reference:
https://github.com/Gatjuat-Wicteat-Riek/clean-code-book/blob/master/Clean%20Code%20(%20PDFDrive.com%20).pdf


Medium Digest
How to Write Clean Code, Actually..
https://medium.com/@brandt.a.derrick/how-to-write-clean-code-actually-5205963ec524


Chp01.
	code easy to read
8.	broken windows


Chp02.
	Indent - naming
21	Conventions
24	DISAGREE	Interface vs. Implementation
25	mental map = GOOD

class	noun
method	verb

26	cute
	pick one	Consistency
30	precise


Chp03.
34	small	4x lines
36	one thing	Single Responsibility
39	small	easier to name
40	Time!
	Consistent
	func args != IoC	Unit Test
42	args replaced by class field
43	func objects
	Intent
48	DRY


Chp04.
54	no comments - code	type hints
	self-describe code	unit tests	self-documenting
55	Intent			in code
56	Why = OK
60	Intent	what does the author mean?
63	Mandate	Yes - agree
64	Noise	Yes


Chp05.	Functions
summary - like Chp1 - when code easy to read 
it's easy to understand, modify, fix, debug

76	simple rules - format
	team agree rules	automate
77	small files
	newspaper article 	separate
78	thoughts		blank lines
80	vertical distance	stop hopping around files
81	instance vars		at top contradicts newspaper metaphor
82	caller above callee
84	function call dependencies downward
85	80 chars wide		Python
88	w/o indentation		unreadable
90	team rules		agree on formatting style = consistent


Chp06.	Objects
93	private variables	don't want anyone to depend on them
	hide implementation
Global variables not mentioned
Global variables
make it difficult to track state changes
introduce hidden dependencies
can cause unexpected side effects	esp. larger / multithreaded apps

Global variables
discouraged due to maintainability and reproducibility concerns
better = config files, classes, parameters

94	interface [methods] enforce access policy
	hiding implementation = 	about abstractions
					layer of functions btwn variables
94	abstract interfaces that allows its users to manipulate essence of the
	data without having to know its implementation

95	do not expose details of data
95	Objects			hide data behind abstractions + expose functions on data
	Data structures		expose their data + no functions

97	Procedural code		Data structures		easy to add functions w/o change data structure
	Object Orientated	Classes			add new classes w/o change existing functions
	Usually want to add new functions rather than new data types

97	Law of Demeter
	module should not know about the innards of the objects it manipulates
However	internal structure	get accessor useful for unit tests

99	Hybrid			half object and half data structure
100	DTO			Data Transfer Objects
	useful when communicate w/ databases, messages from sockets
	move data efficiently between the layers

101	Active Record		special DTO but have navigational methods
101	Objects			expose behavior + hide data
	Data structures		expose data + no behavior
	Add new data types	prefer objects
	Add new behaviors	prefer data types and procedures


Chp07.	Error Handling
103	too much error handling	obscures logic	WRONG
104	better to throw an exception than to return an error code
105	exceptions define a scope within your program
106	narrow the type of exception to match type actually thrown
	checked exceptions not relevant for Python

107	context	create informative error messages pass with exceptions
	DO NOT log.error("something went wrong")

108	multiple exceptions caught here but Python can catch tuple of exceptions
	(TypeError, ValueError)
109	wrap third party API makes it easier to mock out third-party calls in UTs
110	No null -> empty object - used in games programming
112	Assertions - don't agree with this as modern way is to offload to UTs


Chp08.	Boundaries
SUMMARY	already knew a lot about this chapter i.e. Adaptor pattern and seams
	however don't think these concepts only apply to 3rd party S/W use for everything!!

114	Power = flexibility = liability	passing concrete types all around
115	Why?	liberally pass around the system = lot of places to fix when interface change
	Instead Map interface at the boundary = hidden
	Code that is easier to understand and hard to misuse
SCOTT Meyers
Interface	should be easy to use hard to misuse

115	Boundary interface keep inside class	also easier to UT [stub - black box]

116	Learning tests = I think of these as system tests	V/ important
	write [system] tests to explore understanding of [3rd party] code	ALL code!

118	Encapsulate - repeat idea of 3rd party code in class = black box = boundary interface
	learning tests = experiments that helped increase understanding

119	Code not exist = Adaptor pattern = write code to your interface
	integrate w/ 3rd party once API ready
	Code against your interface and "adapt" once destination implemented

SEAMS	thin interfaces that separate concerns	NOT tightly couple code
	good design to have seams in code - not just for 3rd party but everywhere
	makes code integration easier - minimize conflicts in code review / merge

120	Boundaries = Change
	Only thing in S/W that changes is change

Good S/W design accommodate change W/O huge rework
Depend on something you control - not something you don't = it will control you


Chp09.	Unit Tests
V/ familiar w/ TDD
121	last team I worked on still write throw away code as "tests"
122	3x laws of TDD
	TDD strange first time you do = write test for code that does not exist
123	test + prod code written together
123	Interesting - dirtier the tests the harder they are to change = liability
	maintain tests = expensive = don't maintain = increased bug count = less refactoring
STORY	BFG legacy tests rot never run = don't get value of writing them
124	Test code IMPORTANT as Prod code
	UTs keep code maintainable	otherwise code changes = maybe bug
ESP	important w/ Python		brittle language	UTs = code w/o fear
123	clean tests = reability
127	Build-Operate-Check	now	Arrange Act Assert	AAA
	Testing language	APIs that wrap Prod code called by Test code
127	Dual standard
130	What you might not do in Prod code OK for Test code
130 	One Assert - not so relevant in Python as can have single assert but parametrize
130	ditto Template Method - not so relevant in Python for same reason
131	However Single Concept per Test	DEFINITELY
131	bottom hints towards BDD	given when then		w/o saying BDD
132	minimize the no. asserts per concept	test one concept per test fn
132	FIRST	Fast, Independent, Repeatable, Self-Validating, Timely
133	Clean tests preserve maintainability of Prod code
	if you let tests rot then prod code rots	Keep tests clean


Chp10.	Classes
SOLID	Principle			S, O, D
136	Newspaper article repeat	Public then private variables
136	Classes = small
	Functions measure		no. lines
	Classes   measure		no. responsibilities
138	SRP Single Responsiblity Principle
	one reason to change only
GOD class = too many responsibilities
139	No time for refactoring
	move on to the next problem rather than refactoring09:56 09/09/2025
140	wade thru code!
140	Cohesion
	more variables a method manipulates the more cohesive that method is to is class
GOAL	highly cohesive loosely couple classes
141	When classes lose cohesion split them up	
EXAMPLE
147	Organize classes to reduce risk of change
	Open Closed principle
	opening a class introduces risk
	any modifications to the class can potentially break other code in the class
148	Example of O/C principle	no other code will break from change
149	incorporate new features by extending system NOT modify existing code
149	Isolate change
	Depend on abstractions not [concrete] implementations
	client depending on concrete details is at risk when those details change
150	lack of coupling means elements are better isolated from change
	DIP	Dependency Inversion [Injection?] principle
	classes should depend on abstractions not concrete details
IoC	Inversion of Control