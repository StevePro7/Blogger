Clean Code
07/08/2025

Reference:
https://github.com/Gatjuat-Wicteat-Riek/clean-code-book/blob/master/Clean%20Code%20(%20PDFDrive.com%20).pdf


Medium Digest
How to Write Clean Code, Actually..
https://medium.com/@brandt.a.derrick/how-to-write-clean-code-actually-5205963ec524


Chp01.
	code easy to read
8.	broken windows


Chp02.
	Indent - naming
21	Conventions
24	DISAGREE	Interface vs. Implementation
25	mental map = GOOD

class	noun
method	verb

26	cute
	pick one	Consistency
30	precise


Chp03.
34	small	4x lines
36	one thing	Single Responsibility
39	small	easier to name
40	Time!
	Consistent
	func args != IoC	Unit Test
42	args replaced by class field
43	func objects
	Intent
48	DRY


Chp04.
54	no comments - code	type hints
	self-describe code	unit tests	self-documenting
55	Intent			in code
56	Why = OK
60	Intent	what does the author mean?
63	Mandate	Yes - agree
64	Noise	Yes


Chp05.	Functions
summary - like Chp1 - when code easy to read 
it's easy to understand, modify, fix, debug

76	simple rules - format
	team agree rules	automate
77	small files
	newspaper article 	separate
78	thoughts		blank lines
80	vertical distance	stop hopping around files
81	instance vars		at top contradicts newspaper metaphor
82	caller above callee
84	function call dependencies downward
85	80 chars wide		Python
88	w/o indentation		unreadable
90	team rules		agree on formatting style = consistent


Chp06.	Objects
93	private variables	don't want anyone to depend on them
	hide implementation
Global variables not mentioned
Global variables
make it difficult to track state changes
introduce hidden dependencies
can cause unexpected side effects	esp. larger / multithreaded apps

Global variables
discouraged due to maintainability and reproducibility concerns
better = config files, classes, parameters

94	interface [methods] enforce access policy
	hiding implementation = 	about abstractions
					layer of functions btwn variables
94	abstract interfaces that allows its users to manipulate essence of the
	data without having to know its implementation

95	do not expose details of data
95	Objects			hide data behind abstractions + expose functions on data
	Data structures		expose their data + no functions

97	Procedural code		Data structures		easy to add functions w/o change data structure
	Object Orientated	Classes			add new classes w/o change existing functions
	Usually want to add new functions rather than new data types

97	Law of Demeter
	module should not know about the innards of the objects it manipulates
However	internal structure	get accessor useful for unit tests

99	Hybrid			half object and half data structure
100	DTO			Data Transfer Objects
	useful when communicate w/ databases, messages from sockets
	move data efficiently between the layers

101	Active Record		special DTO but have navigational methods
101	Objects			expose behavior + hide data
	Data structures		expose data + no behavior
	Add new data types	prefer objects
	Add new behaviors	prefer data types and procedures


Chp07.	Error Handling
103	too much error handling	obscures logic	WRONG
104	better to throw an exception than to return an error code
105	exceptions define a scope within your program
106	narrow the type of exception to match type actually thrown
	checked exceptions not relevant for Python

107	context	create informative error messages pass with exceptions
	DO NOT log.error("something went wrong")

108	multiple exceptions caught here but Python can catch tuple of exceptions
	(TypeError, ValueError)
109	wrap third party API makes it easier to mock out third-party calls in UTs
110	No null -> empty object - used in games programming
112	Assertions - don't agree with this as modern way is to offload to UTs