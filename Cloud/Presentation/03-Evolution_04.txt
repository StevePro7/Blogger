4. Container Orchestration: enter Kubernetes
<br />
  
Increased container adoption prompted the need for container orchestration technologies like Kubernetes to
manage scale + monitor containerized applications esp. those hosted by managed Cloud providers
  
<br /><br />
Functions:
<br />
  
<table width="99%" border="1">
<tr>
<td>
&nbsp;<span style="font-family: 'Wingdings';">•</span>&nbsp;
Auto-scaling: orchestration systems can automatically scale apps based on denamd or sudden traffic spikes
<br />
&nbsp;<span style="font-family: 'Wingdings';">•</span>&nbsp;
Self-healing: if container or node fails then the orchestrator can restart or replace it = [more] increased reliability
<br />
&nbsp;<span style="font-family: 'Wingdings';">•</span>&nbsp;
Load Balancing: incoming requests are automatically distributed across containers to ensure optimal performance  
<br />
&nbsp;<span style="font-family: 'Wingdings';">•</span>&nbsp;
Service Discovery: as containers move across nodes, services can be discovered w/o any manual intervention
</td>
</tr>
</table>
