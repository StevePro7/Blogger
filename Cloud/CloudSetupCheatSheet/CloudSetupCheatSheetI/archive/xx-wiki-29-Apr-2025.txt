<span style="font-family:verdana;font-size:85%;">
  
In 2024, we checked out <a href="https://steveproxna.blogspot.com/2024/07/gitlab-cheat-sheet.html">GitLab Cheat Sheet</a> to streamline collaborative team workflows that leverage CI/CD pipelines.  Now, we will explain cluster provisioning process for managed cloud providers: <a href="https://portal.azure.com">Azure</a>, <a href="https://aws.amazon.com">AWS</a> + <a href="https://console.cloud.google.com">GCP</a>.

<br />
<!--  
<table width="99%" border="1">
<tr>
<td>
<a href="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEgUI-Hum7q-EyAT3L3whtJaWaGNSvQ3qf5PqgxKaqUBJz4pZEB8sKgRI2pt5cdm6lL02V7x2VEndOXpLOuxrEk2RVl6WridZfmrbme58oiKCY9zlTQE7dkweQn7LPeF5Bin5r45mdPfaInFicH27SAlEIsU-kXNMbFegcUCCpD8iQDlgnZUD3A56HVKvPA/s1280/Azure.png"><img alt="" border="0" width="98%" src="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEgUI-Hum7q-EyAT3L3whtJaWaGNSvQ3qf5PqgxKaqUBJz4pZEB8sKgRI2pt5cdm6lL02V7x2VEndOXpLOuxrEk2RVl6WridZfmrbme58oiKCY9zlTQE7dkweQn7LPeF5Bin5r45mdPfaInFicH27SAlEIsU-kXNMbFegcUCCpD8iQDlgnZUD3A56HVKvPA/s600/Azure.png"/></a>         
</td>  
<td>
<a href="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEgqDmLhoOxuMdAnFLK9eik1f36eOoDYnl4wp7kzZlVeOCD5_5cbEaUCewRcsUObBQ5JZ1rpes4JsHnOLYw-_g6J1hdLPUbU8IzLC56jPyN-po_FL1qQq-lzDFzv2h5d_cWen-Q4e7ZUyRLZurjuqyJagWlupWX5hcqU4W7z6k-hIqQhZ2F2JwZpI6TJEKE/s1280/AWS_org.png"><img alt="" border="0" width="98%" src="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEgqDmLhoOxuMdAnFLK9eik1f36eOoDYnl4wp7kzZlVeOCD5_5cbEaUCewRcsUObBQ5JZ1rpes4JsHnOLYw-_g6J1hdLPUbU8IzLC56jPyN-po_FL1qQq-lzDFzv2h5d_cWen-Q4e7ZUyRLZurjuqyJagWlupWX5hcqU4W7z6k-hIqQhZ2F2JwZpI6TJEKE/s600/AWS_org.png"/></a>
</td>
<td>
<a href="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEgLxxk1qQND-5_PHqUZY5uHTzic9Tefp3d6FJO5vOmYnbLP0xTXG0zujtNUMryHyiwEe6QJp4NLhKyrgy4KjkGa6KBLcLFw4b8cim2ip_Blm_ayiN-tO2CcinheHDNt3pEFNIjOfajAzeQCqe6PXLC-NOdFvsulPJ7dLdVstTUKiZmyhDCCZlul37sa9DY/s1280/GCP_org.png"><img alt="" border="0" width="98%" src="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEgLxxk1qQND-5_PHqUZY5uHTzic9Tefp3d6FJO5vOmYnbLP0xTXG0zujtNUMryHyiwEe6QJp4NLhKyrgy4KjkGa6KBLcLFw4b8cim2ip_Blm_ayiN-tO2CcinheHDNt3pEFNIjOfajAzeQCqe6PXLC-NOdFvsulPJ7dLdVstTUKiZmyhDCCZlul37sa9DY/s600/GCP_org.png"/></a>
</td>
</tr>
</table>
-->
<br />
Let's check it out!  
<br /><br />
<u>Pre-Requisites</u><br />
This blog post assumes an <a href="https://portal.azure.com">Azure</a>, <a href="https://aws.amazon.com">AWS</a>, <a href="https://console.cloud.google.com">GCP</a> account is setup.  The following links document paid or free tier:
<br />
<!--
<table width="99%" border="1">
<tr>
<td>&nbsp;<b>Azure [Microsoft]</b></td>
<td>&nbsp;AZ</td>
<td>&nbsp;<a href="https://www.datacamp.com/tutorial/how-to-set-up-and-configure-azure">PAID</a> Tier Account</td>
<td>&nbsp;<a href="https://k21academy.com/microsoft-azure/create-free-microsoft-azure-trial-account">FREE</a> Tier Account</td>
</tr>
<tr>
<td>&nbsp;<b>Amazon Web Services</b></td>
<td>&nbsp;AWS</td>
<td>&nbsp;<a href="https://www.geeksforgeeks.org/amazon-web-services-setting-up-an-aws-account">PAID</a> Tier Account</td>
<td>&nbsp;<a href="https://k21academy.com/amazon-web-services/aws-solutions-architect/create-aws-free-tier-account">FREE</a> Tier Account</td>
</tr>
<tr>
<td>&nbsp;<b>Google Cloud Platform</b></td>
<td>&nbsp;GCP</td>
<td>&nbsp;<a href="https://www.optimizesmart.com/how-to-create-a-new-google-cloud-platform-account">PAID</a> Tier Account</td>
<td>&nbsp;<a href="https://k21academy.com/google-cloud/create-google-cloud-free-tier-account">FREE</a> Tier Account</td>
</tr>
</table>
-->
<br />
  
<a href="https://learn.microsoft.com/en-us/cli/azure">Azure CLI</a><br />
The Azure Command Line Interface is a set of commands used to create and manage Azure resources.  The CLI is available across services designed to get working with Azure quickly with an emphasis on automation.
<br />
<!--
<br />
<b>Linux</b><br />
Install the <a href="https://learn.microsoft.com/en-us/cli/azure/install-azure-cli-linux">Azure CLI</a> on Linux | Choose an installation method e.g. apt (Ubunuty, Debian) | Launch Terminal
<br />
<table width="99%" border="1">
<tr><td>
&nbsp;curl -sL https://aka.ms/InstallAzureCLIDeb | sudo bash<br />
</td></tr>
</table>
<br />
<b>Mac OS/X</b><br />
Install <a href="https://learn.microsoft.com/en-us/cli/azure/install-azure-cli-macos">Azure CLI</a> on Mac OS/X | Install with Homebrew | Install <a href="https://docs.brew.sh/Installation.html">Homebrew</a> manager if you haven't already!
<br />
<table width="99%" border="1">
<tr><td>
&nbsp;brew update && brew install azure-cli<br />
</td></tr>
</table>
<br />
<b>Windows</b><br />
Install <a href="https://learn.microsoft.com/en-us/cli/azure/install-azure-cli-windows">Azure CLI</a> on Windows | Microsoft Install (MSI) | Download the Latest MSI of the <a href="https://aka.ms/installazurecliwindowsx64">Azure CLI</a> (64-bit)
<br />
<table width="99%" border="1">
<tr><td>
&nbsp;Download and install https://aka.ms/installazurecliwindowsx64<br />
</td></tr>
</table>
<br />  
After installing the Azure CLI on Linux, Mac OS/X, Windows confirm the current working version of the CLI:
<br />
<table width="99%" border="1">
<tr><td>
&nbsp;az version<br />
</td></tr>
</table>
<br />
-->
<br />
  
<a href="https://aws.amazon.com/cli">AWS CLI</a><br />
The AWS Command Line Interface is a unified tool used to manage your AWS services.  Use the AWS CLI tool to download configure and control AWS services from the command line and automate them through scripts.
<br />
<!--
<br />
<b>Linux</b><br />
Install the <a href="https://docs.aws.amazon.com/cli/latest/userguide/getting-started-install.html">AWS CLI</a> on Linux | Linux tab | Command line installer - Linux x86 (64-bit) | Launch the Terminal
<table width="99%" border="1">
<tr><td>
&nbsp;curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"<br />
&nbsp;unzip awscliv2.zip<br />
&nbsp;sudo ./aws/install<br />
</td></tr>
</table>
<br />
<b>Mac OS/X</b><br />
Install the <a href="https://docs.aws.amazon.com/cli/latest/userguide/getting-started-install.html">AWS CLI</a> on MacOS/X | macOS tab | GUI installer | Download the macOS pkg file <a href="https://awscli.amazonaws.com/AWSCLIV2.pkg">AWSCLIV2.pkg</a>
<br />
<table width="99%" border="1">
<tr><td>
&nbsp;Download and install https://awscli.amazonaws.com/AWSCLIV2.pkg<br />
</td></tr>
</table>
<br />
<b>Windows</b><br />
Install the <a href="https://docs.aws.amazon.com/cli/latest/userguide/getting-started-install.html">AWS CLI</a> on Windows | Windows tab | Download MSI | Download Windows (64-bit) <a href="https://awscli.amazonaws.com/AWSCLIV2.msi">AWSCLIV2.msi</a>
<br />
<table width="99%" border="1">
<tr><td>
&nbsp;Download and install https://awscli.amazonaws.com/AWSCLIV2.msi<br />
</td></tr>
</table>
<br />
After installing the AWS  CLI on Linux, Mac OS/X, Windows confirm the current working version of the CLI:
<br />
<table width="99%" border="1">
<tr><td>
&nbsp;aws --version<br />
</td></tr>
</table>
<br />
-->
<br />  
  
<a href="https://cloud.google.com/cli">GCP CLI</a><br />
The GCP Command Line Interface is used to create and manage Google Cloud resources + services directly from the command line and to perform common platform tasks faster by controlling cloud resources at scale.
<br />
<!--
<br />
<b>Linux</b><br />
Install the <a href="https://cloud.google.com/sdk/docs/install#linux">gcloud CLI</a> | Linux tab | Platform Linux 64-bit (x86_64) | Launch Terminal + execute commands:
<br />
<table width="99%" border="1">
<tr><td colspan="2">
&nbsp;curl -O https://dl.google.com/dl/cloudsdk/channels/rapid/downloads/google-cloud-cli-linux-x86_64.tar.gz<br />
&nbsp;tar -xf google-cloud-cli-linux-x86_64.tar.gz<br />
</td></tr>
<tr>
<td width="50%">&nbsp;cd google-cloud-sdk</td>
<td>&nbsp;./install.sh</td>
</tr>  
</table>
<br />
<b>Mac OS/X</b><br />
Install the <a href="https://cloud.google.com/sdk/docs/install#mac">gcloud CLI</a> | macOS tab | Platform macOS macOS 64-bit (ARM64, Apple silicon) | Launch Terminal
<br />  
<table width="99%" border="1">
<tr><td colspan="2">
&nbsp;curl -O https://dl.google.com/dl/cloudsdk/channels/rapid/downloads/google-cloud-cli-darwin-arm.tar.gz<br />
&nbsp;tar -xf google-cloud-cli-darwin-arm.tar.gz<br />
</td></tr>
<tr>
<td width="50%">&nbsp;cd google-cloud-sdk</td>
<td>&nbsp;./install.sh</td>
</tr>  
</table>
<br />
<b>Windows</b><br />
Install the <a href="https://cloud.google.com/sdk/docs/install#windows">gcloud CLI</a> | Windows tab | Download the Google Cloud CLI installer <a href="https://dl.google.com/dl/cloudsdk/channels/rapid/GoogleCloudSDKInstaller.exe">GoogleCloudSDKInstaller.exe</a>
<br />
<table width="99%" border="1">
<tr><td>
&nbsp;Download and install https://dl.google.com/dl/cloudsdk/channels/rapid/GoogleCloudSDKInstaller.exe<br />
</td></tr>
</table>
<br />
After installing the gcloud CLI on Linux, Mac OS/X, Windows confirm the current working version of the CLI:
<br />
<table width="99%" border="1">
<tr>
<td width="50%">&nbsp;gcloud init</td>
<td>&nbsp;gcloud version</td>
</tr>
</table>
<br />
-->  
<br />

<u>Master Key</u><br />
Next, create master SSH key for secure, automated and controlled access to your Kubernetes infrastructure:
<br />
<!--
<table border="1" width="99%">
<tr>
<td valign="top" width="60%">
&nbsp;cd ~/.ssh<br />
&nbsp;ssh-keygen -t rsa -b 4096 -N '' -f master_ssh_key<br />
</td>
<td>
&nbsp;eval $(ssh-agent -s)<br />
&nbsp;ssh-add master_ssh_key<br />
</td>
</tr>
</table>
<br />
-->
<br />

<a href="https://learn.microsoft.com/en-us/azure/aks">Azure AKS</a><br />
Microsoft provides Azure Kubernetes Services as fully managed Kubernetes container orchestration service.  Follow all instructions below in order to provision a Kubernetes cluster and end-to-end test its functionality. 
<br />
<!--
<br />

<b>Pre-Requisites</b><br />
<table width="99%" border="1">
<tr><td>
<pre style="font-size: 12px;">
&nbsp;&nbsp;az login
</pre>
</td></tr>
</table>
<br />

<b>Check Resources</b><br />
<table width="99%" border="1">
<tr><td>
<pre style="font-size: 12px;">
&nbsp;&nbsp;az account list --output table
&nbsp;&nbsp;az group list --output table
&nbsp;&nbsp;az resource list --output table
&nbsp;&nbsp;az resource list --query "[?location=='northeurope']" --output table
&nbsp;&nbsp;az vm list --output table
&nbsp;&nbsp;az aks list --output table
&nbsp;&nbsp;az container list --output table
&nbsp;&nbsp;az storage account list --output table
&nbsp;&nbsp;az network public-ip list --output table
</pre>
</td></tr>
</table>
<br />
  
<b>Resource Group</b><br />
<table width="99%" border="1">
<tr><td>
<pre style="font-size: 12px;">
&nbsp;&nbsp;az group create --name stevepro-azraks-rg --location northeurope --debug
</pre>
</td></tr>
</table>
<br />
  
<b>Security Principal</b><br />
<table width="99%" border="1">
<tr><td>
<pre style="font-size: 12px;">
&nbsp;&nbsp;az ad sp create-for-rbac --name ${USER}-sp --skip-assignment
</pre>
</td></tr>
</table>
<br /> 
<b>Output</b><br />
<table width="99%" border="1">
<tr><td>
<pre style="font-size: 12px;">
&nbsp;&nbsp;{
&nbsp;    "appId": "XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX",
&nbsp;    "displayName": "stevepro-sp",
&nbsp;    "name": "XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX",
&nbsp;    "password": "XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX",
&nbsp;    "tenant": "XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX",
&nbsp;&nbsp;}
</pre>
</td></tr>
</table>
<br />
  
<b>Export</b><br />
<table width="99%" border="1">
<tr><td>
<pre style="font-size: 12px;">
&nbsp;&nbsp;export AZ_SP_ID=&lt;value_from_appId&gt;
&nbsp;&nbsp;export AZ_SP_PASSWORD=&lt;value_from_password&gt;
</pre>
</td></tr>
</table>
<br />

<b>Create Cluster</b><br />
<table width="99%" border="1">
<tr><td>
<pre style="font-size: 12px;">
&nbsp;&nbsp;az aks create --name stevepro-azraks                 \
&nbsp;    --resource-group stevepro-azraks-rg               \
&nbsp;    --dns-name-prefix stevepro-azraks                 \
&nbsp;    --node-count 3                                    \
&nbsp;    --node-vm-size Standard_D2s_v3                    \
&nbsp;    --kubernetes-version 1.28                         \
&nbsp;    --ssh-key-value ~/.ssh/master_ssh_key.pub         \
&nbsp;    --service-principal ${AZ_SP_ID}                   \
&nbsp;    --client-secret ${AZ_SP_PASSWORD}                 \
&nbsp;    --load-balancer-sku standard                      \
&nbsp;    --network-plugin azure --debug
</pre>
</td></tr>
</table>
<br />

<b>Get Credentials</b><br />
<table width="99%" border="1">
<tr><td>
<pre style="font-size: 12px;">
&nbsp;&nbsp;export KUBECONFIG=~/.kube/config
&nbsp;&nbsp;az aks get-credentials --name stevepro-azraks        \
&nbsp;    --resource-group stevepro-azraks-rg --file ${KUBECONFIG}
</pre>
</td></tr>
</table>
<br />

<b>Deploy Test</b><br />
<table border="1" width="99%">
<tr><td>
<pre style="font-size: 12px;">
&nbsp;&nbsp;kubectl create ns test-ns
&nbsp;&nbsp;kubectl config set-context --current --namespace=test-ns
&nbsp;&nbsp;kubectl apply -f Kubernetes.yaml
&nbsp;&nbsp;kubectl port-forward service/flask-api-service 8080:80
&nbsp;&nbsp;curl http://localhost:8080
</pre>
</td></tr>
</table>
<br />

<b>Output</b><br />
<table width="99%" border="1">
<tr><td>
<pre style="font-size: 12px;">
&nbsp;&nbsp;Hello World (Python)!
</pre>
</td></tr>
</table>
<br />

<b>Shell into Node</b><br />
<table border="1" width="99%">
<tr><td>
<pre style="font-size: 12px;">
&nbsp;&nbsp;mkdir -p ~/GitHub/luksa
&nbsp;&nbsp;cd ~/GitHub/luksa
&nbsp;&nbsp;git clone https://github.com/luksa/kubectl-plugins.git
&nbsp;&nbsp;cd kubectl-plugins
&nbsp;&nbsp;chmod +x kubectl-ssh
&nbsp;&nbsp;kubectl get nodes
&nbsp;&nbsp;./kubectl-ssh node gke-stevepro-gcp-gke-default-pool-0b4ca8ca-sjpj
</pre>
</td></tr>
</table>
<br />

<b>Cleanup</b><br />
<table border="1" width="99%">
<tr><td>
<pre style="font-size: 12px;">
&nbsp;&nbsp;kubectl delete -f Kubernetes.yaml
&nbsp;&nbsp;kubectl delete ns test-ns
</pre>
</td></tr>
</table>
<br />
  
<b>Delete Cluster</b><br />
<table width="99%" border="1">
<tr><td>
<pre style="font-size: 12px;">
&nbsp;&nbsp;az aks delete --name stevepro-azraks                 \
&nbsp;    --resource-group stevepro-azraks-rg
</pre>
</td></tr>
</table>
-->  
<br />

<u>Summary</u><br />
To summarize, we have setup CLIs for Azure, Amazon and Google and provisioned an <a href="https://learn.microsoft.com/en-us/azure/aks">Azure AKS</a> Kubernetes cluster with end-to-end testing.  Next, we will resume to provision clusters for <a href="https://docs.aws.amazon.com/eks/latest/userguide/what-is-eks.html">Amazon EKS</a> and <a href="https://cloud.google.com/kubernetes-engine/docs/concepts/kubernetes-engine-overview">Google GKE</a>.  This will be the topic of the next post.

</span>