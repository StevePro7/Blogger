<span style="font-family:verdana;font-size:85%;">
  
In the previous <a href="https://steveproxna.blogspot.com/2025/05/cloud-setup-cheat-sheet.html">post</a>, we checked out Cloud Cheat Sheet to explain cluster provisioning process for managed cloud providers such as <a href="https://learn.microsoft.com/en-us/azure/aks">Azure AKS</a>.  Now we will resume to provision clusters: <a href="https://docs.aws.amazon.com/eks/latest/userguide/what-is-eks.html">Amazon EKS</a> and <a href="https://cloud.google.com/kubernetes-engine/docs/concepts/kubernetes-engine-overview">Google GKE</a>.
<br />
<!--  
<table width="99%" border="1">
<tr>
<td>
<a href="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEgUI-Hum7q-EyAT3L3whtJaWaGNSvQ3qf5PqgxKaqUBJz4pZEB8sKgRI2pt5cdm6lL02V7x2VEndOXpLOuxrEk2RVl6WridZfmrbme58oiKCY9zlTQE7dkweQn7LPeF5Bin5r45mdPfaInFicH27SAlEIsU-kXNMbFegcUCCpD8iQDlgnZUD3A56HVKvPA/s1280/Azure.png"><img alt="" border="0" width="98%" src="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEgUI-Hum7q-EyAT3L3whtJaWaGNSvQ3qf5PqgxKaqUBJz4pZEB8sKgRI2pt5cdm6lL02V7x2VEndOXpLOuxrEk2RVl6WridZfmrbme58oiKCY9zlTQE7dkweQn7LPeF5Bin5r45mdPfaInFicH27SAlEIsU-kXNMbFegcUCCpD8iQDlgnZUD3A56HVKvPA/s600/Azure.png"/></a>         
</td>  
<td>
<a href="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEgqDmLhoOxuMdAnFLK9eik1f36eOoDYnl4wp7kzZlVeOCD5_5cbEaUCewRcsUObBQ5JZ1rpes4JsHnOLYw-_g6J1hdLPUbU8IzLC56jPyN-po_FL1qQq-lzDFzv2h5d_cWen-Q4e7ZUyRLZurjuqyJagWlupWX5hcqU4W7z6k-hIqQhZ2F2JwZpI6TJEKE/s1280/AWS_org.png"><img alt="" border="0" width="98%" src="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEgqDmLhoOxuMdAnFLK9eik1f36eOoDYnl4wp7kzZlVeOCD5_5cbEaUCewRcsUObBQ5JZ1rpes4JsHnOLYw-_g6J1hdLPUbU8IzLC56jPyN-po_FL1qQq-lzDFzv2h5d_cWen-Q4e7ZUyRLZurjuqyJagWlupWX5hcqU4W7z6k-hIqQhZ2F2JwZpI6TJEKE/s600/AWS_org.png"/></a>
</td>
<td>
<a href="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEgLxxk1qQND-5_PHqUZY5uHTzic9Tefp3d6FJO5vOmYnbLP0xTXG0zujtNUMryHyiwEe6QJp4NLhKyrgy4KjkGa6KBLcLFw4b8cim2ip_Blm_ayiN-tO2CcinheHDNt3pEFNIjOfajAzeQCqe6PXLC-NOdFvsulPJ7dLdVstTUKiZmyhDCCZlul37sa9DY/s1280/GCP_org.png"><img alt="" border="0" width="98%" src="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEgLxxk1qQND-5_PHqUZY5uHTzic9Tefp3d6FJO5vOmYnbLP0xTXG0zujtNUMryHyiwEe6QJp4NLhKyrgy4KjkGa6KBLcLFw4b8cim2ip_Blm_ayiN-tO2CcinheHDNt3pEFNIjOfajAzeQCqe6PXLC-NOdFvsulPJ7dLdVstTUKiZmyhDCCZlul37sa9DY/s600/GCP_org.png"/></a>
</td>
</tr>
</table>
-->
Let's check it out!  
<br />
<br />

<u>Pre-Requisites</u><br />
This blog post assumes an <a href="https://portal.azure.com">Azure</a>, <a href="https://aws.amazon.com">AWS</a>, <a href="https://console.cloud.google.com">GCP</a> account is <a href="https://steveproxna.blogspot.com/2025/05/cloud-setup-cheat-sheet.html">setup</a> plus all the corresponding <a href="https://seroter.com/2020/09/15/lets-compare-the-cli-experiences-offered-by-aws-microsoft-azure-and-google-cloud-platform">CLIs</a> are configured!

<br /><br />
<u>AWS Login</u><br />
Navigate to <a href="https://aws.amazon.com">https://aws.amazon.com</a> | Sign In | Sign in using root user email.  Root user | Root user email address e.g.
steven_boland@hotmail.com | Next | Enter password.  Setup AWS Multi-Factor <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_mfa.html">Authentication</a>.
<br /><br />
  
<u>AWS Single Sign On</u><br />
Accessing AWS clusters programmatically is recommened to <a href="https://pushkar-sre.medium.com/how-to-set-up-aws-cli-with-aws-single-sign-on-sso-acf4dd88e056">setup</a> and configure AWS SSO.  Example config:
<br />
<table width="99%" border="1">
<tr><td>
<pre style="font-size: 12px;">
&nbsp;&nbsp;sso_start_url = https://stevepro.awsapps.com/start
&nbsp;&nbsp;sso_region = eu-west-1
&nbsp;&nbsp;sso_account_id = 4xxxxxxxxxx8
&nbsp;&nbsp;sso_role_name = AdministratorAccess
&nbsp;&nbsp;region = eu-west-1
&nbsp;&nbsp;output = json
</pre>
</td></tr>
</table>
<br />  
  
<a href="https://eksctl.io">eksctl</a><br />
Command-line tool that abstracts complexity involved in setting up AWS EKS clusters.  Here is how to install:
<br /><br />
<b>Linux</b><br />
<table width="99%" border="1">
<tr><td>
&nbsp;curl --silent --location "https://github.com/eksctl-io/eksctl/releases/latest/download/eksctl_$(uname <br />&nbsp;-s)_amd64.tar.gz" | tar xz -C /tmp<br />
&nbsp;sudo mv /tmp/eksctl /usr/local/bin<br />
</td></tr>
</table>
<br />
<b>Mac OS/X</b><br />
<table width="99%" border="1">
<tr>
<td width="50%">&nbsp;brew tap eksctl-io/eksctl</td>
<td>&nbsp;brew install eksctl</td>
</tr>
</table>
<br />
<b>Windows</b><br />
<table width="99%" border="1">
<tr>
<td width="50%">&nbsp;Launch Powershell</td>
<td>&nbsp;choco install eksctl</td>
</tr>
</table>
<br />
<br />

<u>Master Key</u><br />
Next, create master SSH key for secure, automated and controlled access to your Kubernetes infrastructure:
<br />
<table border="1" width="99%">
<tr>
<td valign="top" width="60%">
&nbsp;cd ~/.ssh<br />
&nbsp;ssh-keygen -t rsa -b 4096 -N '' -f master_ssh_key<br />
</td>
<td>
&nbsp;eval $(ssh-agent -s)<br />
&nbsp;ssh-add master_ssh_key<br />
</td>
</tr>
</table>
<br />
<br />
  
<a href="https://docs.aws.amazon.com/eks/latest/userguide/what-is-eks.html">Amazon EKS</a><br />
Amazon provides Elastic Kubernetes Service as a fully managed Kubernetes container orchestration service.  Follow all instructions below in order to provision a Kubernetes cluster and test its functionality end-to-end.
<br /><br />

Pre-Requisites
<table width="99%" border="1">
<tr><td>
<pre style="font-size: 12px;">
&nbsp;&nbsp;aws sso login
</pre>
</td></tr>
</table>
<br />

<b>Check Resources</b><br />
<table width="99%" border="1">
<tr>
<td valign="top">
&nbsp;&nbsp;aws ec2 describe-instances --query 'Reservations[*].Instances[*].InstanceId' --output table<br />
&nbsp;&nbsp;aws ec2 describe-addresses --query 'Addresses[*].PublicIp' --output table<br />
&nbsp;&nbsp;aws ec2 describe-key-pairs --query 'KeyPairs[*].KeyName' --output table<br />
&nbsp;&nbsp;aws ec2 describe-volumes --query 'Volumes[*].VolumeId' --output table<br />
&nbsp;&nbsp;aws ec2 describe-vpcs --query 'Vpcs[*].VpcId' --output table<br />
&nbsp;&nbsp;aws cloudformation list-stacks --query 'StackSummaries[*].StackName' --output table<br />  
&nbsp;&nbsp;aws cloudwatch describe-alarms --query 'MetricAlarms[*].AlarmName' --output table<br />
&nbsp;&nbsp;aws ecr describe-repositories --query 'repositories[*].repositoryName' --output table<br />
&nbsp;&nbsp;aws ecs list-clusters --query 'clusterArns' --output table<br />
&nbsp;&nbsp;aws eks list-clusters --query 'clusters' --output table<br />
&nbsp;&nbsp;aws elasticbeanstalk describe-environments --query 'Environments[*].EnvironmentName' --output table<br />
&nbsp;&nbsp;aws elb describe-load-balancers --query 'LoadBalancerDescriptions[*].LoadBalancerName' --output table<br />
&nbsp;&nbsp;aws elbv2 describe-load-balancers --query 'LoadBalancers[*].LoadBalancerName' --output table<br />
&nbsp;&nbsp;aws iam list-roles --query 'Roles[*].RoleName' --output table<br />
&nbsp;&nbsp;aws iam list-users --query 'Users[*].UserName' --output table<br />
&nbsp;&nbsp;aws lambda list-functions --query 'Functions[*].FunctionName' --output table<br />
&nbsp;&nbsp;aws rds describe-db-instances --query 'DBInstances[*].DBInstanceIdentifier' --output table<br />
&nbsp;&nbsp;aws route53 list-hosted-zones --query 'HostedZones[*].Name' --output table<br />
&nbsp;&nbsp;aws s3 ls<br />
&nbsp;&nbsp;aws sns list-topics --query 'Topics[*].TopicArn' --output table<br />
&nbsp;&nbsp;aws sqs list-queues --query 'QueueUrls' --output table<br />
&nbsp;&nbsp;aws ssm describe-parameters --query 'Parameters[*].Name' --output table<br />
</td>
</tr>
</table>
<br />
  
<b>Cluster YAML</b><br />
<table width="99%" border="1">
<tr><td>
<pre style="font-size: 12px;">
&nbsp;&nbsp;kind: ClusterConfig
&nbsp;&nbsp;apiVersion: eksctl.io/v1alpha5
&nbsp;&nbsp;
&nbsp;&nbsp;metadata:
&nbsp;&nbsp;  name: stevepro-aws-eks
&nbsp;&nbsp;  region: eu-west-1
&nbsp;&nbsp;  version: "1.27"
&nbsp;&nbsp;  tags:
&nbsp;&nbsp;    createdBy: stevepro
&nbsp;&nbsp;
&nbsp;&nbsp;kubernetesNetworkConfig:
&nbsp;&nbsp;  ipFamily: IPv4
&nbsp;&nbsp;
&nbsp;&nbsp;iam:
&nbsp;&nbsp;  withOIDC: true
&nbsp;&nbsp;  serviceAccounts:
&nbsp;&nbsp;  - metadata:
&nbsp;&nbsp;      name: ebs-csi-controller-sa
&nbsp;&nbsp;      namespace: kube-system
&nbsp;&nbsp;    attachPolicyARNs:
&nbsp;&nbsp;    - "arn:aws:iam::aws:policy/service-role/AmazonEBSCSIDriverPolicy"
&nbsp;&nbsp;    roleOnly: true
&nbsp;&nbsp;    roleName: stevepro-aws-eks-AmazonEKS_EBS_CSI_DriverRole
&nbsp;&nbsp;
&nbsp;&nbsp;addons:
&nbsp;&nbsp;- name: aws-ebs-csi-driver
&nbsp;&nbsp;  version: v1.38.1-eksbuild.2
&nbsp;&nbsp;  serviceAccountRoleARN: \
&nbsp;&nbsp;	arn:aws:iam::4xxxxxxxxxx8:role/stevepro-aws-eks-AmazonEKS_EBS_CSI_DriverRole
&nbsp;&nbsp;- name: vpc-cni
&nbsp;&nbsp;  version: v1.19.2-eksbuild.1
&nbsp;&nbsp;- name: coredns
&nbsp;&nbsp;  version: v1.10.1-eksbuild.18
&nbsp;&nbsp;- name: kube-proxy
&nbsp;&nbsp;  version: v1.27.16-eksbuild.14
&nbsp;&nbsp;
&nbsp;&nbsp;nodeGroups:
&nbsp;&nbsp;  - name: stevepro-aws-eks
&nbsp;&nbsp;    instanceType: m5.large
&nbsp;&nbsp;    desiredCapacity: 0
&nbsp;&nbsp;    minSize: 0
&nbsp;&nbsp;    maxSize: 3
&nbsp;&nbsp;    ssh:
&nbsp;&nbsp;      allow: true
&nbsp;&nbsp;      publicKeyPath: ~/.ssh/master_ssh_key.pub
&nbsp;&nbsp;    preBootstrapCommands:
&nbsp;&nbsp;      - "true"
</pre>
</td></tr>
</table>
<br />

<b>Create Cluster</b><br />
<table width="99%" border="1">
<tr><td>
<pre style="font-size: 12px;">
&nbsp;&nbsp;eksctl create cluster -f ~/stevepro-awseks/cluster.yaml          \
&nbsp;    --kubeconfig ~/stevepro-awseks/kubeconfig                     \
&nbsp;    --verbose 5
</pre>
</td></tr>
</table>
<br />

<b>Scale Nodegroup</b><br />
<table width="99%" border="1">
<tr><td>
<pre style="font-size: 12px;">
&nbsp;&nbsp;eksctl scale nodegroup                                           \
&nbsp;    --cluster=stevepro-aws-eks                                    \
&nbsp;    --name=stevepro-aws-eks                                       \
&nbsp;    --nodes=3                                                     \
&nbsp;    --nodes-min=0                                                 \
&nbsp;    --nodes-max=3                                                 \
&nbsp;    --verbose 5
</pre>
</td></tr>
</table>
<br />

<b>Deploy Test</b><br />
<table border="1" width="99%">
<tr><td>
<pre style="font-size: 12px;">
&nbsp;&nbsp;kubectl create ns test-ns
&nbsp;&nbsp;kubectl config set-context --current --namespace=test-ns
&nbsp;&nbsp;kubectl apply -f Kubernetes.yaml
&nbsp;&nbsp;kubectl port-forward service/flask-api-service 8080:80
&nbsp;&nbsp;curl http://localhost:8080
</pre>
</td></tr>
</table>
<br />

<b>Output</b><br />
<table width="99%" border="1">
<tr><td>
<pre style="font-size: 12px;">
&nbsp;&nbsp;Hello World (Python)!
</pre>
</td></tr>
</table>
<br />

<b>Shell into Node</b><br />
<table border="1" width="99%">
<tr><td>
<pre style="font-size: 12px;">
&nbsp;&nbsp;kubectl get po -o wide
&nbsp;&nbsp;cd ~/.ssh
&nbsp;&nbsp;ssh -i master_ssh_key ec2-user@node-ip-address
</pre>
</td></tr>
</table>
<br />
  
<b>Cleanup</b><br />
<table border="1" width="99%">
<tr><td>
<pre style="font-size: 12px;">
&nbsp;&nbsp;kubectl delete -f Kubernetes.yaml
&nbsp;&nbsp;kubectl delete ns test-ns
</pre>
</td></tr>
</table>
<br />
  
<b>Delete Cluster</b><br />
<table width="99%" border="1">
<tr><td>
<pre style="font-size: 12px;">
&nbsp;&nbsp;eksctl delete cluster                                            \
&nbsp;    --name=stevepro-aws-eks                                       \
&nbsp;    --region eu-west-1                                            \
&nbsp;    --force
</pre>
</td></tr>
</table>
<br />

<b>ERRORS</b><br />
<i>Error: getting availability zones for region operation error EC2: DescribeAvailabilityZones, StatusCode: 403</i>
<br />
<a href="https://stackoverflow.com/questions/60438285/error-getting-availability-zones-when-trying-to-create-eks-cluster">Reference</a>: Dashboard | IAM | Users | SteveProXNA | Permissions | Add Permission | AdministratorAccess:
<br />
<table width="99%" border="1">
<tr><td>
<pre style="font-size: 12px;">
&nbsp;&nbsp;{
&nbsp;    "Version": "2012-10-17",
&nbsp;    "Statement": [
&nbsp;        {
&nbsp;            "Effect": "Allow",
&nbsp;            "Action": "*",
&nbsp;            "Resource": "*"
&nbsp;        }
&nbsp;    ]
&nbsp;&nbsp;}
</pre>
</td></tr>
</table>
<br />

<i>Error:  unable to determine AMI from SSM Parameter Store: operation SSM: GetParameter, StatusCode: 400</i>
<br />
AWS Dashboard | IAM | Users | SteveProXNA | Create new group | Permission | AdministratorAccess-Amplify
<br />
<table width="99%" border="1">
<tr><td>
<pre style="font-size: 12px;">
&nbsp;&nbsp;{
&nbsp;    "Version": "2012-10-17",
&nbsp;    "Statement": [
&nbsp;        {
&nbsp;            "Effect": "Allow",
&nbsp;            "Action": ],
&nbsp;                "ssm:GetParameter",
&nbsp;                "ssm:GetParameters"
&nbsp;            ],
&nbsp;            "Resource": "arn:aws:ssm:*:*:parameter/aws/service/eks/optimized-ami/*"
&nbsp;        },
&nbsp;        {
&nbsp;            "Effect": "Allow",
&nbsp;            "Action": "ec2:DescribeImages",
&nbsp;            "Resource": "*"
&nbsp;        }
&nbsp;    ]
&nbsp;&nbsp;}
</pre>
</td></tr>
</table>
<br />
<br />

<a href="https://cloud.google.com/kubernetes-engine/docs/concepts/kubernetes-engine-overview">Google GKE</a><br />
Google provides the Google Kubernetes Engine as fully managed Kubernetes container orchestration service.  Follow all instructions below in order to provision a Kubernetes cluster and test its functionality end-to-end.
<br />
Download code sample <b><a href="https://github.com/SteveProXNA/CloudTesting/tree/main/CloudSetupCheatSheetII/stevepro-gcpgke">here</a></b>.
<br />
<br />

<b>Pre-Requisites</b><br />
<table width="99%" border="1">
<tr>
<td valign="top">
&nbsp;&nbsp;gcloud auth login<br />
&nbsp;&nbsp;gcloud auth application-default login<br />
</td>
<td valign="top">
&nbsp;&nbsp;gcloud auth configure-docker<br />
&nbsp;&nbsp;gcloud config set project SteveProProject<br />
</td>  
</tr>
</table>
<br />

<b>Check Resources</b><br />
<table width="99%" border="1">
<tr>
<td valign="top">
&nbsp;&nbsp;gcloud compute instances list<br />
&nbsp;&nbsp;gcloud compute disks list<br />
&nbsp;&nbsp;gcloud compute forwarding-rules list<br />
</td>
<td valign="top">
&nbsp;&nbsp;gcloud compute firewall-rules list<br />
&nbsp;&nbsp;gcloud compute addresses list<br />
&nbsp;&nbsp;gcloud container clusters list<br />
</td>  
</tr>
</table>
<br />
  
<b>Create Cluster</b><br />
<table width="99%" border="1">
<tr><td>
<pre style="font-size: 12px;">
&nbsp;&nbsp;&nbsp;gcloud container clusters create stevepro-gcp-gke               \
&nbsp;    --project=steveproproject                                     \
&nbsp;    --zone europe-west1-b                                         \
&nbsp;    --machine-type=e2-standard-2                                  \
&nbsp;    --disk-type pd-standard                                       \
&nbsp;    --cluster-version=1.30.10-gke.1070000                         \
&nbsp;    --num-nodes 3                                                 \
&nbsp;    --network=default                                             \
&nbsp;    --create-subnetwork=name=stevepro-gcp-gke-subnet,range=/28    \
&nbsp;    --enable-ip-alias                                             \
&nbsp;    --enable-intra-node-visibility                                \
&nbsp;    --logging=NONE                                                \
&nbsp;    --monitoring=NONE                                             \
&nbsp;    --enable-network-policy                                       \
&nbsp;    --labels=prefix=stevepro-gcp-gke,created-by=${USER}           \
&nbsp;    --no-enable-managed-prometheus                                \
&nbsp;    --quiet --verbosity debug
</pre>
</td></tr>
</table>
<br />

<b>Get Credentials</b><br />
<table width="99%" border="1">
<tr><td>
<pre style="font-size: 12px;">
&nbsp;&nbsp;gcloud container clusters get-credentials stevepro-gcp-gke       \
&nbsp;    --zone=europe-west1-b                                         \
&nbsp;    --quiet --verbosity debug
</pre>
</td></tr>
</table>
<br />

IMPORTANT - if you do not have the following <i>gke gcloud auth plugin</i> then execute the following commands:
<table width="99%" border="1">
<tr><td>
<pre style="font-size: 12px;">
&nbsp;&nbsp;gcloud components install gke-gcloud-auth-plugin
&nbsp;&nbsp;gke-gcloud-auth-plugin --version
</pre>
</td></tr>
</table>
<br />
  
<b>Deploy Test</b><br />
<table border="1" width="99%">
<tr><td>
<pre style="font-size: 12px;">
&nbsp;&nbsp;kubectl create ns test-ns
&nbsp;&nbsp;kubectl config set-context --current --namespace=test-ns
&nbsp;&nbsp;kubectl apply -f Kubernetes.yaml
&nbsp;&nbsp;kubectl port-forward service/flask-api-service 8080:80
&nbsp;&nbsp;curl http://localhost:8080
</pre>
</td></tr>
</table>
<br />

<b>Output</b><br />
<table width="99%" border="1">
<tr><td>
<pre style="font-size: 12px;">
&nbsp;&nbsp;Hello World (Python)!
</pre>
</td></tr>
</table>
<br />

<b>Shell into Node</b><br />
<table border="1" width="99%">
<tr><td>
<pre style="font-size: 12px;">
&nbsp;&nbsp;mkdir -p ~/GitHub/luksa
&nbsp;&nbsp;cd ~/GitHub/luksa
&nbsp;&nbsp;git clone https://github.com/luksa/kubectl-plugins.git
&nbsp;&nbsp;cd kubectl-plugins
&nbsp;&nbsp;chmod +x kubectl-ssh
&nbsp;&nbsp;kubectl get nodes
&nbsp;&nbsp;./kubectl-ssh node gke-stevepro-gcp-gke-default-pool-0b4ca8ca-sjpj
</pre>
</td></tr>
</table>
<br />

<b>Cleanup</b><br />
<table border="1" width="99%">
<tr><td>
<pre style="font-size: 12px;">
&nbsp;&nbsp;kubectl delete -f Kubernetes.yaml
&nbsp;&nbsp;kubectl delete ns test-ns
</pre>
</td></tr>
</table>
<br />
  
<b>Delete Cluster</b><br />
<table width="99%" border="1">
<tr><td>
<pre style="font-size: 12px;">
&nbsp;&nbsp;gcloud container clusters delete stevepro-gcp-gke                \
&nbsp;    --zone europe-west1-border                                    \
&nbsp;    --quiet --verbosity debug
</pre>
</td></tr>
</table>
<br />
  
<u>Summary</u><br />
To summarize, we have now setup and provisioned <a href="https://learn.microsoft.com/en-us/azure/aks">Azure AKS</a>, <a href="https://docs.aws.amazon.com/eks/latest/userguide/what-is-eks.html">Amazon EKS</a> and <a href="https://cloud.google.com/kubernetes-engine/docs/concepts/kubernetes-engine-overview">Google GKE</a> clusters with end-to-end tests.  In future we could explore provisioning AWS and GCP <a href="https://kubernetes.io/docs/reference/setup-tools/kubeadm">Kubeadm</a> clusters using <a href="https://rangapv.medium.com/terraform-scripts-to-create-a-k8s-cluster-using-kubeadm-in-aws-from-scratch-72fba6133797">Terraform</a>!

</span>