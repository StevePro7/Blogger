<span style="font-family:verdana;font-size:85%;">

In the previous <a href="https://steveproxna.blogspot.com/2021/03/z80-programming-sample.html">post</a>, we checked out Z80 Programming Sample for the <a href="https://en.wikipedia.org/wiki/Master_System">Sega Master System</a>: an 8-bit video game console based on the <a href="https://en.wikipedia.org/wiki/Zilog_Z80">Z80</a> chip.  Here we used <a href="https://www.villehelin.com/wla.html">WLA-DX</a> assembler for our development environment.
<br /><br />  
Here, we analyzed existing <a href="https://www.smspower.org/Homebrew/Index">Indie</a> game projects and disassembled classic 8-bit commercial <a href="https://coolrom.com.au/roms/mastersystem">games</a> to better understand the Z80 development process.  For completeness, we would now like to better understand this relationship between source code written in C using the <a href="https://github.com/sverx/devkitSMS">devkitSMS</a> and the underlying Z80 assembly code.
<br />
<!--
<a href="https://1.bp.blogspot.com/-jUvTBGAcOzQ/YFXYQpPUvYI/AAAAAAAAGkk/Xpu-Uh40wc4ncixSeGELZT8dTLNxdPCDACLcBGAsYHQ/s614/title.png" ><img alt="" border="0" width="98%" data-original-height="479" data-original-width="614" src="https://1.bp.blogspot.com/-jUvTBGAcOzQ/YFXYQpPUvYI/AAAAAAAAGkk/Xpu-Uh40wc4ncixSeGELZT8dTLNxdPCDACLcBGAsYHQ/s600/title.png"/></a>
-->
<br />
Let's check it out!
<br /><br />
<u>Software</u><br />
Follow all instructions from the previous <a href="https://steveproxna.blogspot.com/2021/02/z80-programming-setup.html">post</a>: this documents how to setup all the pre-requisite software.
Note: ensure you have downloaded and installed <a href="https://www.villehelin.com/wla.html">WLA-DX</a> assembler + <a href="https://code.visualstudio.com">Visual Studio</a> Code cross platform.
<br />
<br />
<u>Process</u><br />
Build small demo project in C using the devkitSMS.  Follow the numerous posts from <a href="https://steveproxna.blogspot.com/search/label/devkitSMS">devkitSMS</a> category to completion.  Next, disassemble the output.  Refactor the underlying Z80 assembly code using this process:
<br /> <br /> 

<u>Summary</u><br />
Now that we have setup a productive <a href="https://en.wikipedia.org/wiki/Zilog_Z80">Z80</a> assembler development environment and better understand this relationship between source code written in C using the <a href="https://github.com/sverx/devkitSMS">devkitSMS</a> and the underlying Z80 assembly code, we are now finally in a great spot to build our own Z80 ASM projects for Sega Master System from scratch!
<br /><br />
Now that we have a productive <a href="https://en.wikipedia.org/wiki/Zilog_Z80">Z80</a> assembler development environment and analyzed some larger projects to better understand the development process we are in a great spot to build our own projects from scratch.
<br /><br />
For completeness, we would still like to better understand relationship between <a href="https://en.wikipedia.org/wiki/Master_System">Sega Master System</a> source code written in C using the <a href="https://github.com/sverx/devkitSMS">devkitSMS</a> and connect the underlying Z80 assembly code generated accordingly.  This will be the topic of the next post.
</span>