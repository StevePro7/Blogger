<span style="font-family:verdana;font-size:85%;">
  
In the previous <a href="https://steveproxna.blogspot.com/2021/02/z80-programming-setup.html">post</a>, we checked out Z80 Programming Setup for the <a href="https://en.wikipedia.org/wiki/Master_System">Sega Master System</a>: an 8-bit video game console based on the <a href="https://en.wikipedia.org/wiki/Zilog_Z80">Z80</a> chip.  Here we used <a href="https://www.villehelin.com/wla.html">WLA-DX</a> assembler for our development environment.
<br /><br />
Now that we are setup, we would like to analyze existing <a href="https://www.smspower.org/Homebrew/Index">Indie</a> game projects for the Sega Master System and disassemble some classic 8-bit commercial <a href="https://coolrom.com.au/roms/mastersystem">games</a> to better understand the Z80 development process.
<br /><br />
Let's check it out!
<br /><br />
<u>Software</u><br />
Follow all instructions from the previous <a href="https://steveproxna.blogspot.com/2021/02/z80-programming-setup.html">post</a>: this documents how to setup all the pre-requisite software.
Note: ensure you have downloaded and installed <a href="https://www.villehelin.com/wla.html">WLA-DX</a> assembler + <a href="https://code.visualstudio.com">Visual Studio</a> Code cross platform.
<br /><br />
  
<u>Homebrew Games</u><br />
In the previous post, we setup the obligatory "<a href="http://www.smspower.org/maxim/uploads/HowToProgram/helloworld.zip">Hello World</a>" program.  Now we would like to analyze some larger Z80 projects.  Checkout "<a href="https://www.smspower.org/Articles/CreateARacingGame">Racing Game</a>" article on SMS Power! which is an in depth coding tutorial.
<br /><br />
  
<b>Car Racer</b> (classic)<br />
Create C:\CarRacerClassic or ~/CarRacerClassic.  Copy <b><a href="https://github.com/SteveProXNA/Z80code/tree/main/03-Codes/CarRacerClassic/.vscode">.vscode</a></b> folder from previous post with <a href="https://github.com/SteveProXNA/Z80code/blob/main/03-Codes/CarRacerClassic/.vscode/launch.json">launch.json</a> + <a href="https://github.com/SteveProXNA/Z80code/blob/main/03-Codes/CarRacerClassic/.vscode/tasks.json">tasks.json</a>.  Copy <a href="https://github.com/SteveProXNA/Z80code/blob/main/03-Codes/CarRacerClassic/build.bat">build.bat</a> + <a href="https://github.com/SteveProXNA/Z80code/blob/main/03-Codes/CarRacerClassic/build.sh">build.sh</a>.  Don't forget to grant execute permission chmod +x build.sh command.
<br /><br />
Download <a href="https://www.smspower.org/uploads/Homebrew/Racer-SMS-2.00.zip">source</a> code.  Copy <a href="https://github.com/SteveProXNA/Z80code/tree/main/03-Codes/CarRacerClassic/Assets">Assets</a> folder to CarRacerClassic.  Copy <a href="https://github.com/SteveProXNA/Z80code/blob/main/03-Codes/CarRacerClassic/main.asm">main.asm</a> file from Racer (classic) folder Version 1.12 here also.  Launch VS Code.  Some things to remember when coding Z80 source cross platform:
<ol>
<li>&nbsp;Ensure forward slash "/" used at all times for cross platform development</li>
<li>&nbsp;Ensure case sensitive folders + files are used at all times for include files</li>
<li>&nbsp;Ensure carriage returns is used between variables to avoid wla-dx errors</li> 
</ol>
<br />

Press Ctrl + Shift + B to execute build script => compile, link and run output.sms launched from Emulicious!  Assumption Emulicious installed C:\SEGA\Emulicious on Windows or ~/SEGA/Emulicious Mac OS/X + Linux.
<br /><br />

<b>Car Racer</b> (rebooted)<br />
Create C:\CarRacerRebooted or ~/CarRacerRebooted.  Copy <b>.vscode</b> folder from above with launch.json and tasks.json.  Copy build.bat + build.sh.  Don't forget to grant execute permission chmod +x build.sh command.
<br /><br />
Download source code.  Copy all assets folders with *.inc files to CarRacerRebooted.  Copy main.asm file from Racer (rebooted) folder here also.  Launch VS Code.  Tweak Z80 assembly code as above to be cross platform.
<br /><br />
Press Ctrl + Shift + B to execute build script => compile, link and run!  Repeat process for all these projects:

<table width="100%" border="0">
<tr>
<td>
<table width="100%" border="1">
<tr>
<td valign="top">&nbsp;Sega Master System</td>
<td valign="top">&nbsp;<a href="https://github.com/SteveProXNA/Z80code/tree/main/03-Codes/Astroswab">Astroswab</a></td>
</tr>
<tr>
<td valign="top">&nbsp;Sega Master System</td>
<td valign="top">&nbsp;<a href="https://github.com/SteveProXNA/Z80code/tree/main/03-Codes/CarRacerClassic">Car Racer [classic]</a></td>
</tr>
<tr>
<td valign="top">&nbsp;Sega Master System</td>
<td valign="top">&nbsp;<a href="https://github.com/SteveProXNA/Z80code/tree/main/03-Codes/CarRacerRebooted">Car Racer [reboot]</a></td>
</tr>
<tr>
<td valign="top">&nbsp;Sega Master System</td>
<td valign="top">&nbsp;<a href="https://github.com/SteveProXNA/Z80code/tree/main/03-Codes/DiggerBall">Digger Ball</a></td>
</tr>
<tr>
<td valign="top">&nbsp;Sega Master System</td>
<td valign="top">&nbsp;<a href="https://github.com/SteveProXNA/Z80code/tree/main/03-Codes/DiggerChan">Digger Chan</a></td>
</tr>
</table>
</td>
<td>&nbsp;</td>
<td>
<table width="100%" border="1">
<tr>
<td valign="top">&nbsp;Sega Master System</td>
<td valign="top">&nbsp;<a href="https://github.com/SteveProXNA/Z80code/tree/main/03-Codes/FairyForest">Fairy Forest</a></td>
</tr>
<tr>
<td valign="top">&nbsp;Sega Master System</td>
<td valign="top">&nbsp;<a href="https://github.com/SteveProXNA/Z80code/tree/main/03-Codes/Jetpac">Jetpac</a></td>
</tr>
<tr>
<td valign="top">&nbsp;Sega Master System</td>
<td valign="top">&nbsp;<a href="https://github.com/SteveProXNA/Z80code/tree/main/03-Codes/KunKunAndKokoKun">KunKun & KokoKun</a></td>
</tr>
<tr>
<td valign="top">&nbsp;Sega Master System</td>
<td valign="top">&nbsp;<a href="https://github.com/SteveProXNA/Z80code/tree/main/03-Codes/MegaMan2">Mega Man 2</a></td>
</tr>
<tr>
<td valign="top">&nbsp;Sega Master System</td>
<td valign="top">&nbsp;<a href="https://github.com/SteveProXNA/Z80code/tree/main/03-Codes/Minesweeper">Minesweeper</a></td>
</tr>
</table>
</td>
</tr>
</table>

<!--<br />-->
IMPORTANT<br />
For all examples: Launch Emulicious separately first.  In VS Code press F5 to debug step through Z80 code!
<br /><br />
  
<u>Commercial Games</u><br />
Now let us enhance this process to disassemble some commercial games built for the Sega Master System.  This way, we may gain insight into the early development process plus be able to hack original source code!
<br /><br />
<b>Transbot</b><br />
Create C:\Transbot or ~/Transbot folder.  Copy <b>.vscode</b> folder from above with launch.json and tasks.json files.  Copy build.bat + build.sh too.  Don't forget to grant execute permission chmod +x build.sh command.
<br /><br />
Download Transbot ROM.  Launch Emulicious | Open ROM.  Tools menu | Debugger | press Ctrl + A to select all disassembled code.  Save as Transbot.asm.  Update all ".incbin ..." statements using the following utility:
<br /><br />
<i>Utility</i><br />
Download Binary-File-Write utility.  Copy both Transbot.asm and Transbot.sms files to input folder.  Update the config file | set key="fileName" value to "Transbot".  Run BinaryFileWrite.exe.  Copy output to Transbot folder.
<br /><br />
Launch VS Code.  Open Transbot folder.  All prior ".incbin..." statements should now refer to binary data files.  Press Ctrl + Shift + B to execute build script => compile, link and run!  Repeat process for all these projects:
<br />

<table width="100%" border="0">
<tr>
<td>
<table width="100%" border="1">
<tr>
<td valign="top">&nbsp;Sega Master System</td>
<td valign="top">&nbsp;<a href="https://github.com/SteveProXNA/Z80code/tree/main/04-Games/AfterBurner">After Burner</a></td>
</tr>
<tr>
<td valign="top">&nbsp;Sega Master System</td>
<td valign="top">&nbsp;<a href="https://github.com/SteveProXNA/Z80code/tree/main/04-Games/AlienSyndrome">Alien Syndrome</a></td>
</tr>
<tr>
<td valign="top">&nbsp;SG-1000 / SC-3000</td>
<td valign="top">&nbsp;<a href="https://github.com/SteveProXNA/Z80code/tree/main/04-Games/CongoBongo">Congo Bongo</a></td>
</tr>
<tr>
<td valign="top">&nbsp;SG-1000 / SC-3000</td>
<td valign="top">&nbsp;<a href="https://github.com/SteveProXNA/Z80code/tree/main/04-Games/Flicky">Flicky</a></td>
</tr>
<tr>
<td valign="top">&nbsp;Sega Master System</td>
<td valign="top">&nbsp;<a href="https://github.com/SteveProXNA/Z80code/tree/main/04-Games/GoldenAxe">Golden Axe</a></td>
</tr>
</table>
</td>
<td>&nbsp;</td>
<td>
<table width="100%" border="1">
<tr>
<td valign="top">&nbsp;SG-1000 / SC-3000</td>
<td valign="top">&nbsp;<a href="https://github.com/SteveProXNA/Z80code/tree/main/04-Games/MonacoGP">Monaco GP</a></td>
</tr>
<tr>
<td valign="top">&nbsp;Sega Master System</td>
<td valign="top">&nbsp;<a href="https://github.com/SteveProXNA/Z80code/tree/main/04-Games/OutRun">Out Run</a></td>
</tr>
<tr>
<td valign="top">&nbsp;Sega Master System</td>
<td valign="top">&nbsp;<a href="https://github.com/SteveProXNA/Z80code/tree/main/04-Games/Shinobi">Shinobi</a></td>
</tr>
<tr>
<td valign="top">&nbsp;Sega Master System</td>
<td valign="top">&nbsp;<a href="https://github.com/SteveProXNA/Z80code/tree/main/04-Games/Transbot">Transbot</a></td>
</tr>
<tr>
<td valign="top">&nbsp;Sega Master System</td>
<td valign="top">&nbsp;<a href="https://github.com/SteveProXNA/Z80code/tree/main/04-Games/WonderBoy">Wonder Boy</a></td>
</tr>
</table>
</td>
</tr>
</table>

<!--<br />-->
IMPORTANT<br />
For all examples: Launch Emulicious separately first.  In VS Code press F5 to debug step through Z80 code!
<br /><br />

<b>Flicky</b><br />
Create C:\Flicky or ~/Flicky folder.  Repeat entire process for Transbot as above but with Flicky.sg ROM.  Copy the <b>.vscode</b> folder with launch.json and tasks.json files plus build.bat and build.sh.  Retrive main.asm + data folder from utility.  Press Ctrl + Shift + B to execute build script + press F5 to debug step through Z80 code!
<br /><br />
<i>Hack</i><br />
Use this new setup to hack the original source code!  For example, in Flicky you always start at level #1.  Wouudn't it be cool to start at any level?  Also, wouldn't it be cool to have infinite lives?  Let's check it out!
<br /><br />
Start level and lives count default values are hardcoded in ROM and loaded into RAM.  After debug stepping through Flicky source code we find a piece of code that loads 20x bytes of ROM into RAM on game start:
<br />

<pre class="csharp" name="code">
_LABEL_2AE_:
		xor a
		ld (_RAM_C0E1_), a
		ld hl, _DATA_2C3_
		ld de, _RAM_C0E7_
		ld bc, $0014
		ldir
		call _LABEL_207B_
		jp _LABEL_2D7_
	
; Data from 2C3 to 2CA (8 bytes)	
_DATA_2C3_:	
	.db $01 $01 $00 $00 $0C $80 $00 $02
	
; Data from 2CB to 2D6 (12 bytes)	
_DATA_2CB_:	
	.dsb 12, $00
</pre>

<br />
Bytes $02C3 and $02C4 default to $01; could either of these be start level #1?  Byte $02CA defaults to $02; could this be lives left?  The corresponding data is loaded in RAM at $C0E7, $C0E8 and $C0EE respectively.
<br /><br />
Launch Emulicious.  Tools menu | Memory Editor | RAM.  Right click $C0E7 | Toggle Watchpoint.  Repeat for $C0E8 and $C0EE.  Resume code.  Play game and die!  The value at RAM $C0EE decreases from $02 to $01.
<br />

<pre class="csharp" name="code">
_LABEL_387_:

		ld a, (_RAM_C0EE_)
		or a
		jr z, +
		dec a
		ld (_RAM_C0EE_), a
</pre>

<br />
Therefore, RAM $C0EE stores the lives count loaded from ROM $02CA!  Replace the original $02 with $FF for "infinite" lives.  Repeat process: complete level; see RAM $C0E8 stores start level loaded from ROM $02C4!
<br />
<a href="https://1.bp.blogspot.com/-7f-YXWf4ByE/YC5VhKIzltI/AAAAAAAAGhc/KcruhrOHS7gcDTuw2F-57M3DE6q1TPQAACLcBGAsYHQ/s635/FlickyHack.jpg"><img alt="" border="0" width="98%" data-original-height="411" data-original-width="635" src="https://1.bp.blogspot.com/-7f-YXWf4ByE/YC5VhKIzltI/AAAAAAAAGhc/KcruhrOHS7gcDTuw2F-57M3DE6q1TPQAACLcBGAsYHQ/s600/FlickyHack.jpg"/></a>
<br /> <br /> 
<u>Summary</u><br />
Now that we have a productive Z80 assembler development environment and analyzed some larger projects to better understand the development process we are in a great spot to build our own projects from scratch.
<br /><br />
For completeness, we would still like to better understand relationship between Sega Master System source code written in C using the devkitSMS and connect the underlying Z80 assembly code generated accordingly.  This will be the topic of the next post.

</span>