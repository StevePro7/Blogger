LAYOUT
14/01/2021


01.	SETUP
Intro
carry on from Sega Console Programming
aim to have better Z80 dev setup so can code
and disassemble existing code bases to learn better

Install pre-reqs
wla-dx
Fusion, Meka, Emulicious
VS Code
java

already have built HelloWorld.asm
from Maxim world of stuff

but that version of wla.dx is old so want to upgrade
also that was for Windows only; want Win, Mac, Lin


INSTALL wla-dx on Windows
INSTALL wla-dx on MacOS/X
INSTALL wla-dx on Linux

IMPORTANT
if you still want to use ConTEXT via HelloWorld
then you may have to update Compile.bat


Launch VS Code
Install extensions

ASM Code Lens
Z80 Assembly
Z80 Macro Assembler
wla-dx


Code Runner?


Open HelloWorld in VS Code
tasks.json
build.bat
build.sh
Ctrl + Shift + B
assemble, link, run output.sms


//Good starting point but would still like to disassemble existing 8-bit 
//Z80 video games to get better understanding of larger code bases
//plus
All good
can't debug step thru the assembly code directly in VS Code

this will be the topic of the next post


02.	SAMPLE
disassemble existing 8-bit Z80 ROMs to get better understanding
of larger code bases

My utility to automate this task
tasks.json
build.bat
build.sh
Ctrl + Shift + B


Debugging setup via Emulicious Debugger
F5 
setup process similar on Win, Mac, Lin
- launch Emulicious Debugger
- launch VS Code
- open code folder at root main.asm
- set breakpoint(s) in main.asm
- F5
- Emulicious [external] debugger breaks into ASM code
- F5 to run to first breakpoint
- Emulicious [internal] debugger "takes over" integrated directly from within VS Code
- F10, F11, Shift+F1 to step over, step in, step out ASM source code
- Benefits: Watch windows, Call Stack



Automate build + run
Ctrl + Shift + B	auto wired up execute whatever in tasks.json file
tasks.json

build.bat
build.sh
automate build script to
- Assemble
- Link
- Run

i.e. generate output.sms

F5
debug step thru output.sms binary source code via
launch.json