<span style="font-family:verdana;font-size:85%;">
  
TROUBLESHOOTING<br />
If you see popup "connect ECONNREFUSED 127.0.0:58870" then this is because Emulicious is not running.  Also, if F5 does not launch the debugger from VS Code then click output.sms and choose Debug File icon.
<br /><br />

If you see popup "connect ECONNREFUSED 127.0.0:58870" then this is because Emulicious is not running.  Also, if F5 does not launch the debugger from VS Code then right click output.sms and choose Debug File.
<br /><br />


In VS Code
If in VS Code you F5 and the debugger does not break + debug step thru Emulicious Debugger internally then click output.sms and choose Debug File icon as this always seems to work
afterwards you should be able to F5 to debug step thru on each subsequent run.
  
If you see this error make sure that you are running Emulicious and that Remote Debugging is enabled.
  <br /><br />

  
  
<u>Emulicious Debugger</u><br />
Now that we are able to compile, link and run Z80 assembler directly within Visual Studio Code the final step is to configure debugging.  In VS Code, install Emulicious Debugger extension.  Click the Run icon and "create a launch.json file".  Choose Emulicious Debugger from the drop down.  Complete launch.json file accordingly:
<!--
<a href="https://1.bp.blogspot.com/-pYDXDM2hO8I/YBGkOwvJQRI/AAAAAAAAGgQ/NaBineBIvOMWhH6YGbvvJ21OIrz1-HGmQCLcBGAsYHQ/s897/EmuliciousDebugger.png" style="display: block; padding: 1em 0; text-align: center; "><img alt="" border="0" width="99%" data-original-height="489" data-original-width="897" src="https://1.bp.blogspot.com/-pYDXDM2hO8I/YBGkOwvJQRI/AAAAAAAAGgQ/NaBineBIvOMWhH6YGbvvJ21OIrz1-HGmQCLcBGAsYHQ/s600/EmuliciousDebugger.png"/></a>

launch.json
<pre class="csharp" name="code">
{
    "version": "0.2.0",
    "configurations": [
        {
            "type": "emulicious-debugger",
            "request": "launch",
            "name": "Launch in Emulicious",
            "program": "${workspaceFolder}/output.sms",
            "port": 58870,
            "stopOnEntry": true
        }
    ]
}
</pre>
-->
<br /><br />
Launch Emulicious.  Configure the options below.  Open Tools menu | Debugger.  Configure these options also:
<table width="100%" border="1">
<tr>
<td>&nbsp;Tools menu | Remote Debugging | Enabled | CHECK</td>
<td>&nbsp;Debugger | File menu | Load Sources automatically</td>
</tr>
<tr>
<td>&nbsp;Tools menu | Reopen Tools | CHECK</td>
<td>&nbsp;Debugger | Run menu | Suspend On Open</td>
</tr>
</table>
<br />
In Visual Studio Code, open main.asm and set breakpoints.  Press F5.  Emulicious debugger should now break and debug step through Z80 assembly source code!  Access register variables, watch window, call stack etc.
<br /><br />

<u>Emulicious Debugger II</u><br />
For completeness, to better understand relationship between Sega Master System source code written in C and Z80 assembly code, let's debug step through "Hello World" program written in C using the devkitSMS.
<br /><br />
Follow the Hello World main.c program in devkitSMS Programming Setup.  Open C:\HelloWorld folder in VS Code.  Modify build.bat script ever so slightly that is add <b>--debug</b> flag to the SDCC commands for example:
<pre class="csharp" name="code">
  sdcc --debug -c -mz80 --std-sdcc99 main.c
  sdcc --debug -mz80 --no-std-crt0 --data-loc 0xC000 -o output.ihx crt0_sms.rel main.rel SMSlib.lib
</pre>
<br />
Fortunately, we can leverage the same launch.json and tasks.json files as before.  Launch Emulicious | Press F5.  Emulicious debugger should now break and debug step through C source code!  In the external debugger navigate the Z80 assembly code wrapped in C functions via output.map to better understand C / Z80 code!
<!--
<a href="https://1.bp.blogspot.com/-tjvgjntskXA/YBGw8eJ_OjI/AAAAAAAAGgc/D4V4ZBga3h88hmF9MK0PFSqQFqIiv1QPACLcBGAsYHQ/s930/DebuggingSource.png" style="display: block; padding: 1em 0; text-align: center; "><img alt="" border="0" width="98%" data-original-height="645" data-original-width="930" src="https://1.bp.blogspot.com/-tjvgjntskXA/YBGw8eJ_OjI/AAAAAAAAGgc/D4V4ZBga3h88hmF9MK0PFSqQFqIiv1QPACLcBGAsYHQ/s600/DebuggingSource.png"/></a>
-->
<br /><br />
  
TROUBLESHOOTING<br />
If you ever see the error popup "connect ECONNREFUSED 127.0.0:58870" then this is because Emulicious not launched
<br /><br />
If you see this error make sure that you are running Emulicious and that Remote Debugging is enabled.
  <br /><br />

IMPORTANT
If in VS Code you F5 and the debugger does not break + debug step thru Emulicious Debugger internally then click output.sms and choose Debug File icon as this always seems to work
afterwards you should be able to F5 to debug step thru on each subsequent run.

<br /><br />
<br /><br />

  
</span>