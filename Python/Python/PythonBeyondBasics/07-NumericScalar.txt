https://app.pluralsight.com/player?course=python-beyond-basics&author=robert-smallshire&name=python-beyond-basics-m06&clip=0&mode=live
25/04/2020


SUMMARY
use decimal instead of float
because there may be floating point precision errors


int
unlimited precision signed integer


float
IEEE 754 double precision (64-bit)

53 bits of binary precision
1 bit	sign
11	exponent
52	fraction

>>> import sys
>>> sys.float_info
sys.float_info(max=1.7976931348623157e+308, max_exp=1024, max_10_exp=308, min=2.2250738585072014e-308, min_exp=-1021, min_10_exp=-307, dig=15, mant_dig=53, epsilon=2.220446049250313e-16, radix=2, rounds=1)
>>> -sys.float_info.max
-1.7976931348623157e+308
>>> -sys.float_info.min
-2.2250738585072014e-308



>>> 2**53
9007199254740992

loss of precision
>>> 2**53
9007199254740992
>>> float(2**53)
9007199254740992.0
>>> float(2**53 + 1)
9007199254740992.0
>>> float(2**53 + 2)
9007199254740994.0

>>> 0.8 - 0.7
0.10000000000000009
>>> 2/3
0.6666666666666666

Check out "What every Computer Scientists should know about floating point arithmetic"


The standard library module
decimal

containing the class
Decimal

decimal floating point
configurable (although finite) precision
defaults to 28 of decimal precision

>>> import decimal
>>> decimal.getcontext()
Context(prec=28, rounding=ROUND_HALF_EVEN, Emin=-999999, Emax=999999, capitals=1, clamp=0, flags=[], traps=[InvalidOperation, DivisionByZero, Overflow])


>>> decimal.Decimal(5)
Decimal('5')
>>>
>>> from decimal import Decimal
>>> Decimal(7)
Decimal('7')
>>> Decimal('0.8')
Decimal('0.8')

SUCCESS
>>> Decimal('0.8') - Decimal('0.7')
Decimal('0.1')

FAILURE
>>> Decimal(0.8) - Decimal(0.7)
Decimal('0.1000000000000000888178419700')


IMPORTANT
always quote literal fractional values


Here is how you can enforce this
>>> decimal.getcontext().traps[decimal.FloatOperation] = True
>>> Decimal(0.8)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
decimal.FloatOperation: [<class 'decimal.FloatOperation'>]

>>> Decimal('0.8') > Decimal(0.7)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
decimal.FloatOperation: [<class 'decimal.FloatOperation'>]


Example
>>> a = Decimal(3)
>>> b = Decimal('3.0')
>>> c = Decimal('3.00')
>>>
>>> a
Decimal('3')
>>> b
Decimal('3.0')
>>> c
Decimal('3.00')
>>> a * 2
Decimal('6')
>>> b * 2
Decimal('6.0')
>>> c * 2
Decimal('6.00')


>>> decimal.getcontext().prec = 6
>>> d = Decimal('1.234567')
>>> d

Decimal('1.234567')
>>> d + Decimal(1)
Decimal('2.23457')


Infinity
>>> Decimal('Infinity')
Decimal('Infinity')
>>> Decimal('-Infinity')
Decimal('-Infinity')
>>> Decimal('NaN')
Decimal('NaN')
>>> Decimal('NaN') + Decimal('1.414')
Decimal('NaN')

>>> Decimal('1.4') + 0.6
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: unsupported operand type(s) for +: 'decimal.Decimal' and 'float'


>>> (-7) % 3
2
BUT
>>> Decimal(-7) % Decimal(3)
Decimal('-1')

Why?
float maintain backward compatibility with older Python
whereas decimal uses IEEE 765 floating point standard


Example

def _is_odd(n):
	return n % 2 == 1


function works for int and float but not negative decimal
is_odd(eDEcimal(-2))
False
is_odd(eDEcimal(-3))
False


because -1 != +1

However the following works for int, float, and decimal

def is_odd(n):
	return n % 2 != 0

is_odd(eDEcimal(-3))
True



Maintain consistency and preserve identity
This important identity is preserved

x == ( x // y ) * y + x % y


so integer division and modulus are consistent
[i.e. behaves differently]
e.g.

>>> (-7) // 3
-3
Largest multiple of 3 less than -7

>>> Decimal('-7')  // Decimal(3)
Decimal('-2')

Why?
because -2 * 3 = -6 which is next multiple of 3 towards zero


// floor division operator but not implemented this way above
BUT think
// is integer division whose semantics are type dependent

>>> Decimal('0.81').sqrt()
Decimal('0.9')


Due to issues sometimes need to turn to 4th number type in Python
to represent rational numbers


FRACTIONS
the standard library module
fractions

containing the class
Fraction

for ration numbers like 2/3 or 4/5

denominator MUST be non zero




>>> Fraction(0.5)
Fraction(1, 2)

>>> Fraction(0.1)
Fraction(3602879701896397, 36028797018963968)

>>> Fraction(Decimal('0.1'))
Fraction(1, 10)

EXAMPLES
>>> Fraction(2, 3) + Fraction(4, 5)
Fraction(22, 15)
>>> Fraction(2, 3) - Fraction(4, 5)
Fraction(-2, 15)
>>> Fraction(2, 3) * Fraction(4, 5)
Fraction(8, 15)
>>> Fraction(2, 3) / Fraction(4, 5)
Fraction(5, 6)
>>> Fraction(2, 3) // Fraction(4, 5)
0
>>> Fraction(2, 3) % Fraction(4, 5)
Fraction(2, 3)

Fraction does not support methods like sqrt()
but Fraction can be used with math ceil and floor functions
which do return integers

Python int, float, decimal allow us to represent a wide variety of numbers on the numberline with trade offs in 
precision, exactness, convenience and performance


The built-in type
complex

for complex numbers

real part
imaginary part

j suffix for sqrt(-1)

Python uses the electrical engineering notation for imaginary numbers
j

>>> 2j
2j
>>> 3 + 4j
(3+4j)

>>> 2j
2j
>>> 3 + 4j
(3+4j)
>>> type(3 + 4j)
<class 'complex'>
>>> complex(3)
(3+0j)
>>> complex(-2, 3)
(-2+3j)

complex construction
string argument may have parentheses but must not contains spaces

e.g.
>>> complex('(-2 + 3j)')
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
ValueError: complex() arg is a malformed string
>>> complex('(-2+3j)')
(-2+3j)




>>> c = 3 + 5j
>>> c.real
3.0
>>> c.imag
5.0
>>> c.conjugate()
(3-5j)


cmath module used for complex numbers
>>> import math
>>> math.sqrt(-1)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
ValueError: math domain error
>>> import cmath
>>> cmath.sqrt(-1)
1j



>>> cmath.phase(1+1j)
0.7853981633974483
>>> abs(1+1j)
1.4142135623730951

>>> modulus, phase = cmath.polar(1+1j)
>>> modulus
1.4142135623730951
>>> phase
0.7853981633974483

>>> cmath.rect(modulus, phase)
(1.0000000000000002+1.0000000000000002j)


Phase relation for current in electrial engineering
e.g.
def inductive(ohms):
	return complex(0.0, ohms)

def capacitive(ohms):
	return complex(0.0, -0hms)

def resistive(ohms):
	return complex(ohms)

def impedance(components):
	z = sum(components)
	return z

impedance([inductive(10, resistive(10, capacitive(5)])
(10+5j)


The built-in function
abs()

gives the distance from zero

e.g.
>>> abs(-5)
5
>>> abs(-5.0)
5.0
>>> abs(Decimal(-5))
Decimal('5')
>>> abs(Fraction(-5, 1))
Fraction(5, 1)
>>> abs(complex(0, -5))
5.0


The built-in function
round()

performs decimal rounding for all scalar number types
e.g.

>>> round(2.2812, 3)
2.281
>>> round(0.624, 1)
0.6
>>> round(1.5)
2
>>> round(2.5)
2
>>>
>>> round(Decimal('3.25'), 1)
Decimal('3.2')
>>> round(Fraction(57, 100), 2)
Fraction(57, 100)
>>> round(Fraction(57, 100), 1)
Fraction(3, 5)
>>> round(Fraction(57, 100), 0)
Fraction(1, 1)

round is NOT used for complex


round can show surprising behavior with float values
which can't be represeneted exactly in binary

e.g.
>>> round(2.675, 2)
2.67


Why?
float represented in base 10 can't always be accurately represented in base 2


IMPORTANT
if this is an issue then DON'T use float but instead USE the decimal type


Number base conversions
bin()		base 2
oct()		base 8
hex()		base 16

int(x, base)
x		0-9
base		2 to 36

Specifying base zero uses the base prefix
defaulting to decimal
No support for base 1 [tallying]


>>> 0b101010
42
>>> 0o52
42
>>> 0x2a
42
>>> bin(42)
'0b101010'
>>> oct(42)
'0o52'
>>> hex(42)
'0x2a'
>>> hex(42)[2:]
'2a'
>>> int("2a", base=16)
42



>>> int("abcghd", base=18)
1125247
>>> int("0b111000", base=2)
56
>>> int("0o664", base=0)
436



The standard library module
datetime

Gregorian Calendar
proleptic


DATE
year
month
day


TIME
hour
minute
second
microsecond


DATETIME
year
month
day
hour
minute
second
microsecond


tzinfo
timezone		utcoffset()

timedelta
days
seconds
microseconds


e.g.
>>> import datetime
>>> datetime.date(2014, 1, 6)
datetime.date(2014, 1, 6)

>>> datetime.date.today()
datetime.date(2020, 4, 25)
>>> datetime.date.fromtimestamp(1000000000)
datetime.date(2001, 9, 9)
>>> datetime.date.fromordinal(720669)
datetime.date(1974, 2, 15)

Epoch
number of seconds since Jan 1 1970



>>> d = datetime.date.today()
>>> d.year
2020
>>> d.day
25
>>> d.weekday()
5
>>> d.isoweekday()
6

SO isoweekday is range [1..7] NOT [0..6] but both start at Monday


strftime()
string-format-time
>>> d.strftime('%A %d %B %Y')
'Saturday 25 April 2020'
>>> "The date is {:%A %d %B %Y}".format(d)
'The date is Saturday 25 April 2020'


HOWWEVER
e = datetime.date(2014, 1, 6)

not portable
>>> e.strftime('%A %-d %B %Y')
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
ValueError: Invalid format string


but portable
>>> "{date:%A} {date.day} {date:%B} {date.year}".format(date=e)
'Monday 6 January 2014'

Finally
>>> datetime.date.min
datetime.date(1, 1, 1)
>>> datetime.date.max
datetime.date(9999, 12, 31)
>>> datetime.date.resolution
datetime.timedelta(days=1)


Time class
used to specify time within a day with optional time zone info


>>> datetime.time(3)
>>> datetime.time(3, 0)
datetime.time(3, 0)
>>> datetime.time(3, 1)
datetime.time(3, 1)
>>> datetime.time(3, 1, 2)
datetime.time(3, 1, 2)
>>> datetime.time(3, 1, 2, 232)
datetime.time(3, 1, 2, 232)
>>> datetime.time(hour=23, minute=59, second=59, microsecond=999999)
datetime.time(23, 59, 59, 999999)

>>> t = datetime.time(10, 32, 47, 675623)
>>> t.hour
10
>>> t.minute
32
>>> t.second
47
>>> t.microsecond
675623

>>> t.isoformat()
'10:32:47.675623'
>>> t.strftime('%Hh%Mm%Ss')
'10h32m47s'

but prefer, for portability, more Pythonic
>>> "{t.hour}h{t.minute}m{t.second}s".format(t=t)
'10h32m47s'


>>> datetime.time.min
datetime.time(0, 0)
>>> datetime.time.max
datetime.time(23, 59, 59, 999999)
>>> datetime.time.resolution
datetime.timedelta(microseconds=1)


Datetime type
all examples are fully qualified to avoid confusion between
datetime the module and datetime the class

so AVOID doing this
from datetime import datetime

could do this:
from datetime import datetime as Datetime

OR
import datetime as dt


Examples
>>> import datetime
>>> datetime.datetime(2003, 5, 12, 14, 33, 22, 245323)
datetime.datetime(2003, 5, 12, 14, 33, 22, 245323)
>>> datetime.datetime.today()
datetime.datetime(2020, 4, 25, 11, 55, 43, 773607)
>>> datetime.datetime.now()
datetime.datetime(2020, 4, 25, 11, 55, 49, 518286)
>>> datetime.datetime.utcnow()
datetime.datetime(2020, 4, 25, 10, 55, 53, 598510)

>>> datetime.datetime.fromordinal(5)
datetime.datetime(1, 1, 5, 0, 0)
>>> datetime.datetime.fromtimestamp(3635352)
datetime.datetime(1970, 2, 12, 1, 49, 12)
>>> datetime.datetime.utcfromtimestamp(3635352)
datetime.datetime(1970, 2, 12, 1, 49, 12)


>>> d = datetime.date.today()
>>> t = datetime.time(8, 15)
>>> datetime.datetime.combine(d, t)
datetime.datetime(2020, 4, 25, 8, 15)


strptime()
string-parse-time

>>> dt = datetime.datetime.strptime("Monday 5 January 2014, 12:13:31", "%A %d %B %Y, %H:%M:%S")
>>> dt
datetime.datetime(2014, 1, 5, 12, 13, 31)
>>> dt.date()
datetime.date(2014, 1, 5)
>>> dt.time()
datetime.time(12, 13, 31)
>>> dt.day
5
>>> dt.isoformat()
'2014-01-05T12:13:31'



Time delta
calculates the time difference between 2x time instances

timedelta
ctor accepts and sums
days
seconds
microseconds
milleseconds
minutes
hours
weekd

Instances store only
days
seconds
microseconds

best practice to use named args here
e.g.

>>> datetime.timedelta(milliseconds=1, microseconds=1000)
datetime.timedelta(microseconds=2000)
>>>
>>> td = datetime.timedelta(weeks=1, minutes=2, milliseconds=5500)
>>> td
datetime.timedelta(days=7, seconds=125, microseconds=500000)
>>> td.days
7
>>> td.seconds
125
>>> td.microseconds
500000
>>>
>>> str(td)
'7 days, 0:02:05.500000'
>>> repr(td)
'datetime.timedelta(days=7, seconds=125, microseconds=500000)'


Time delta arithmetic

e.g.
>>> a = datetime.datetime(year=2014, month=5, day=8, hour=14, minute=22)
>>> b = datetime.datetime(year=2014, month=3, day=14, hour=12, minute=9)
>>> a - b
datetime.timedelta(days=55, seconds=7980)
>>> d = a - b
>>> d
datetime.timedelta(days=55, seconds=7980)
>>> d.total_seconds()
4759980.0

good example:
how do you find date 3wks from today

>>> datetime.date.today() + datetime.timedelta(weeks=1) * 3
datetime.date(2020, 5, 16)


However arithmetic on time is NOT supported and will result in a type error



Time Zones
naive times	= time in local time

but can use tzinfo or third party Python modules like PyTZ

e.g.
Norway = UTC + 1

Example flight from Oslo to London using timezones

>>> cet = datetime.timezone(datetime.timedelta(hours=1), "CET")
>>> cet
datetime.timezone(datetime.timedelt(seconds=3600), 'CET')
>>>
>>> dep = datetime.datetime(year=2014, month=1, day=7, hour=11, minute=30, tzinfo=cet)
>>> arr = datetime.datetime(year=2014, month=1, day=7, hour=13, minute=5, tzinfo=datetime.timezone.utc)
>>>
>>> arr -dep
datetime.timedelta(seconds=9300)
>>>
>>> str(arr - dep)
'2:35:00'


DUCK TAILS
Floating point vs. Rational numbers for computational geometry


rational numbers represented by fraction can be robust for geometrical algorithms but must avoid irrational numbers as they cannot represented in finite precision

e.g.
using sqrt() with Pythgaoras to determine length of line is NOT permitted


Examples
collinearity predicate
tests whether 3pts are on the same line

orientation test
calc the sign of the determinant of 3x3 matrix of 3pts in question

+1	counterclockwise
 0	collinear
-1	clockwise


NO built-in sign function!!
def sign(x):
	if x < 0:
		return -1
	elif x > 0:
		return 1
	return 0


BUT
>>> False - False
0
>>> False - True
-1
>>> True - False
1
>>> True - True
0


bool in an int context
True	1
False	0

def sign():
	return (x > 0) - (x < 0)

>>> sign(-5)
-1
>>> sign(0)
0
>>> sign(5)
1


Determine
(qx - px)(ry - py) - (qy - py)(rx - px)

Again works for int but there will be issues when using floats due to loss in precision - break down due to rounding errors

SOLUTION
implement rational numbers using the fraction type

float		bad
fraction	good

understand the tradeoffs in choosing number types


SUMMARY
int
float
sys.float_info

limitations of floating point type and impact this has on representing numbers in binary

from decimal import Decimal
another floating point numeric type founded on base ten with user configurable precision

explained that decimal preferred for certain financial applications
e.g. accounting where problem inherently decimal in nature

highlight key differences in behavior btwn decimal and other numeric types esp. integer division and modulus operations 
Decimal %	tends towards 0
int, float %	tends towards -ve infinity

demo rational numbers using fractions type
from fractions import Fraction

show complex type for imaginary numbers
from cmath import *

abs()
distance from zero

round()		
issues esp. for float which are rep'd internal as binary


bin(), oct(), hex()
and conversions

from datetime import (date, time)
from datetime import datetime as Datetime


naive [local] and timezone aware times
string formatting of date time objects

from datetime import timedelta
from datetime import (tzinfo, timezone)

showed how floats unsuitable for geometrical computation owing to finite precision and solve this by applying the fraction type
