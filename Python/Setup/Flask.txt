Flask
25-Jul-2024

Flask_Web_Development_Developing
git clone https://github.com/miguelgrinberg/flasky.git


PART-I
Chp.1

Chp.2
Pg.7
All Flask applications must create an application instance
web server passes all requests rec'd from clients to application instance
[object] using protocol WSGI Web Server Gateway Interface
application instance is an object of class Flask

Pg.8
Decorator
register functons as handlers for an event

Pg.9
Routes
dynamic part
/user/<name>
/user/<int:id>


Pg.12
Request object

Flask context
temp make certain objects globally accessible

Pg.13
Thread
smallest sequence of instructions managed independently
Multithreaded web servers start a pool of threads and select a thread from the pol tohandle each incoming request


Two contexts
Application context	AC
Request context	RC

current_app	AC	application instance
g		AC	object application use for temp storage during request
request	RC	request object - encap contents of HTTP request sent by client
session	RC	user session - dict application use to store values across requests


Pg.14
from hello import app
app.url_map
Map([<Rule '/' (OPTIONS, HEAD, GET) -> index>,
 <Rule '/static/<filename>' (OPTIONS, HEAD, GET) -> static>,
 <Rule '/user/<name>' (OPTIONS, HEAD, GET) -> user>])

GET = request method


Pg.14
request hooks
e.g.
share data btwn request hook + view func = g context global
g.user

Pg.15
Response
HTTP Response = status code

@app.route('/')
def index():
return '<h1>Bad Request</h1>', 400

or
return Response object	
make_response()
example Pg.16

redirect()
abort(404)


Pg.18
Flask script
python hello.py runserver --help



Chp.3
Pg.21
Rendering
process replace variables w/ actual values + returns final response

Jinja2
template engine used by Flask

Pg.26
Bootstrap
Flask extension

Pg.33
Localization
server needs uniform time units independent of user location
UTC


Chp.4
Pg.37
CSRF
Cross-Site Request Forgery (CSRF) Protection
flask-wtf

CSRF
Cross-Site Request Forgergy 
attack
occurs when a malicious website sends requests to a different website
on which the victim is logged in

encrypted token
used to verify authenticity of [POST] requests w/ form data
e.g.
app = Flask(__name__)
app.config['SECRET_KEY'] = 'hard to guess string'

Pg.38
SECRET_KEY
general-purpose encryption key used by Flask

IMPORTANT
security: secret key should be stored in an environment variable
[Chp.7]

Pg.44
IMPORTANT
never leave a POST request as last request sent by the browser
send a redirect instead of a normal response
now last request = GET
Post/Redirect/Get pattern

Store any data for redirect in user session [request context]
private storage available to each connected client

Pg.45
session dictionary
user sessions are stored in client-side cookies that are 
cryptographically signed using configured SECRET_KEY

any tampering with the cookie content renders signature invalid
thus invalidating the session


Chp.5
Pg.49
NoSQL
document-orientated + key/value DBs

Pg.50
collections	instead of tables
documents	instead of rows

Denormalization
reduce number of tables at expense of data duplication

Pg.51
SQLAlchemy
higher level Python objecgs instead of DB entities
e.g. tables, documents or query languages

Abstraction layers
ORM	Object Relational Mappers
ODM	Object Document Mappers

transparen conversion high-level OO ops into low-level DB instructions

Pg.52
SQLAlchmeny ORM
Postres, MySQL, SQLite

Flask integration
Flask-SQLAlchemy: the Flask extension wrapper for SQLAlchemy

pip install flask-sqlalchemy

Pg.53
URLs
Postgres postgresql://username:password@hostname/database
SQLALCHEMY_DATABASE_URI

SQLALCHEMY_COMMIT_ON_TEARDOWN
True
auto commit DB changes end-of-each request

Pg.54
model
persistent entities in application
Python class w/ attributes match DB table columns

IMPORTANT
convention = use plurals for table names
SQLAlchemy column types

Pg.55
SQLAlchemy column option

Flask-SQLAlchemy requires all models to define a primary key column
which is normally named id

Pg.56
relationshops

Pg.57
SQLAlchemy relationship options
one-to-one	uselist=False
many-to-many	association table

Pg.58
Python shell
python hello.py shell

Pg.59
DB session
[transactions]

changes to DB managed thru DB session
Flask-SQLAlchemy provides as db.session
objects to be written to DB must be added to DB sesson

db.session.add_all([admin_role, mod_role, user_role, user_john, user_susan, user_david])

write objects to DB
db.session.commit()

db.session.rollback()
is called, any objects that were added to the database session are
restored to the state they have in the database

Pg.60
Add row
db.session.add(admin_role)

Delete row
db.session.delete(mod_role)

Query row
Role.query.all()
filters
User.query.filter_by(role=user_role).all()

SQL query
str(User.query.filter_by(role=user_role))
'SELECT users.id AS users_id, users.username AS users_username,
users.role_id AS users_role_id FROM users WHERE :param_1 = users.role_id'

Pg.61
user_role = Role.query.filter_by(name='User').first()

Common SQLAlchemy query filters

all()
cause query to execute
common SQLAlchemy query executors

Pg.62
lazy = 'dynamic' argument to request that the query is not
users = db.relationship('User', backref='role', lazy='dynamic')

Pg.63
Integration with the Python Shell
make_context callback function

Pg.64
Database Migrations with Flask-Migrate
database migration framework
changes to database schema

Alembic
book uses flask-migrate

Pg.65
Alembic
migration script
upgrade()		DB changes part of migration
downgrade()		removes them

alembic
revision + migrate commands
e.g.
python hello.py db migrate -m "initial migration"
vs. our example
alembic revision --autogenerate -m "Create initial tables"

Pg.66
Upgrading the Database
db upgrade
vs. our example
alembic upgrade head


CHp.6	Email
pip install flask-mail

Chp.7 	Application structure
Pg.75
similar project structure
app		Flass application
migrations	DB migration scripts
tests		unit / integration tests
.venv		virtual environment

requirements.txt	package dependencies
config.py		config settings
manage.py		app tasks mgt

Pg.76
config.py

import os
basedir = os.path.abspath(os.path.dirname(__file__))
class Config:
SECRET_KEY = os.environ.get('SECRET_KEY') or 'hard to guess string'

Pg.77
Using an Application Factory

delay creation of application into a factory function

create_app()
application factory

Pg.78
Pg.79
def create_app() -> Flask:
	app = Flask(__name__)
	# ...
	return app

factory function returns the created application instance
except
routes and custom error page handlers... next


Implementing Application Functionality in a Blueprint
app created at runtime = problem
app.route decorator begins to exist only after create_app() is invoked,
which is too late

Solution: blueprints	["delayed" routes]

blueprint
similar to application in that it can also define routes
difference = routes associated with blueprint = dormant state
until is registered with an applcation
at whcih point the routes become part of it [the Flask application]

Blueprint creation
from flask import Blueprint

Pg.80
Blueprints are created by instantiating an object Blueprint
ctor
Blueprint name and module	package where blueprint located

usually module [2nd arg]	__name__

routes
error handlers

bluieprint registered w/ application	[inside create_app()] factory function

NB: not used in our app
app_errorhandler 
app.register_blueprint(blueprint)

but does have
@blueprint.route("/")
@blueprint.errorhandler()

Pg.81
route decorator comes from the blueprint

endpoint name of the route
application based routes defaults name for view function
but
blueprints: Flask applies a namespace to all the endpoints
coming from a blueprint so multple blueprints can define view functions
w/ the same endpoint names w/o collisions

NB: could not find
url_for()

Pg.82
manage.py
script creates Flask application
configuration defined
Flask-Script
Flask-Migrate initialized

NB:
whole shebang
#!/usr/bin/env python

execute script
./manage.py

instead of
python manage.py

Requirements file
Applications must include requirements.txt to record all package dependencies
with exact version numbers

pip freeze >requirements.txt
pip install -r requirements.txt

Pg.83-84
Unit Tests
import unittest

def setUp(self):
self.app = create_app('testing')
self.app_context = self.app.app_context()
self.app_context.push()
db.create_all()

setup()
creates an application configured for testing and activates its context
creates a new database that tests can use


def tearDown(self):
db.session.remove()
db.drop_all()
self.app_context.pop()
tearDown()
database and the application context are removed

Pg.85
Database Setup
When working with Flask-Migrate to keep track of migrations, da‐
tabase tables can be created or upgraded to the latest revision with a single command:
(venv) $ python manage.py db upgrade



PART-II
Chp.8
Pg.89
Flask-Login
Werkzeug
itsdangerous

Pg.90
Password Security
Don't store password in DB
Store HASH of password in DB

Hashing Passwords with Werkzeug
Werkzeug’s security module conveniently implements secure password hashing

Pg.92
Creating an Authentication Blueprint
blueprints define routes in global scope after the creation of application
was moved into factory function
e.g.
auth blueprint
from flask import Blueprint
auth = Blueprint('auth', __name__)

pg.93
The auth blueprint needs to be attached to the application in the create_app() factory

def create_app(config_name):
	from .auth import auth as auth_blueprint
	app.register_blueprint(auth_blueprint, url_prefix='/auth')
	return app

Pg.94
User Authentication with Flask-Login
pip install flask-login

Pg.95
Protecting Routes
protect route so can only be accessed by authenticated users
@login_required decorator

from flask.ext.login import login_required
@app.route('/secret')
@login_required
def secret():
	return 'Only auth users'
	
Account Confirmation
Pg.101
Generating Confirmation Tokens with itsdangerous

Itsdangerous provides several types of token generators. Among them, the class
TimedJSONWebSignatureSerializer generates JSON Web Signatures (JWS) with a
time expiration. 

The constructor of this class takes an encryption key as argument,
which in a Flask application can be the configured SECRET_KEY.
	
Chp.9
User Roles
Pg.111
user role here = hybrid btwn discrete roles and permissions
roles defined in terms of permissions

Pg.112
Application permissions

Pg.113
Example 9-3. app/models.py: Create roles in the database
class Role(db.Model):

Role Assignment
Role Verification

Chp.10
User Profiles

Pg.119
User Profile

IMPORTANT
last_seen = db.Column(db.DateTime(), default=datetime.utcnow)

same as our app
Timestamps are given a default value of the current time. 
Note that datetime.utcnow is missing the () at the end.

Pg.127
User Avatars
Gravatar

Chp.11
Blog Posts

Chp.12
Followers
Pg.150
Many-to-Many Relationships

association table
registrations

Pg.151
m-2-m similar to o-2-m but additional secondary argument
must be set to the association table

relationshop can be defined w/ backref argument

classes uses list for m-2-m
e.g.
>>> s.classes.append(c)
>>> db.session.add(s)	

Queries
>>> s.classes.all()
>>> c.students.all()

Self-Referential Relationships
A relationship in which both sides belong to the same table is said to be self-
referential.

Pg.152
Advanced Many-to-Many Relationships
backref

Pg.153
The lazy argument for the back references is specified as joined . This lazy mode causes
the related object to be loaded immediately from the join query.

Pg.154
lazy
joined

Pg.159
return db.session.query(Post).select_from(Follow).\
	filter_by(follower_id=self.id).\
	join(Post, Follow.followed_id == Post.author_id)
	
Chp.13
User Comments

Chp.14
APIs
Pg.175
RAI
Rich Internet Applications

Server provides client w/ data retrieval and storage services
server becomes a web service or API

REST
Representational State Transfer
popular for web applications familiar model of the WWW

Flask
ideal framework to build RESTful web services due to lightweight nature

Pg.175
6x charactereistics
Client-Server
Stateless
Cache
Uniform Interface	HTTP protocol
Layered System
Code-on-Demand

Pg.176
Resources are Everything
resource
item of interest in the domain of the application

unique URL that represents it [resource]
/api/posts
/api/posts/12345
/api/posts/12345/comments/

IMPORTANT
Flask applies special treatment to routes that end with /
If client requests URL w/o trailing slash and the only matching route has trailing slash
then Flask will auto respond w/ redirect to the trailing slasH URL

Pg.177
Request Methods
HTTP request methods in RESTful APIs
GET
POST
PUT
DELETE

If the client invokes a method that is not supported for a given resource 
then a response with the 405 statuscode for “Method Not Allowed” should be returned.

Request and Response Bodies
Content-Type header in requests + responses indicate format
resource is encoded in the body

Pg.178
2x formats used w/ REST
JSON	JavaScript Object Notation
XML	eXtensible Markup Language

Well-designed RESTful API client knows short list of top-level resource URLs
and discovers the rest from links included in responses

Versioning
web apps work w/ old versions of API
version URL handled by web service
e.g.
/api/v1.0/posts/
/api/v1.1/posts/

Pg.179
RESTful Web Services with Flask
Creating an API Blueprint

Example 14-1. API blueprint structure
our app similar except
kraps
  app
    api_1_0
    
Pg.180
API blueprint implements each resource in a separate module
Modules take care of authentication, error handling, provide custom decorators
Example 14-2. app/api_1_0/__init__.py: API blueprint constructor

Error Handling
RESTful web service informs client status of requests sending HTTP status code
plus any additional info in response body
HTTP response status codes typically returned by APIs

NB: 404 and 500
errors generated by Flasks return HTML response = confuse an API client

Pg.181
content negotiation
generate responses for all clients = make error handlers adapt responses based
on format requested by the client

Example 14-4. app/main/errors.py: Error handlers with HTTP content negotiation
@main.app_errorhandler(404)

User Authentication with Flask-HTTPAuth
login credentials pass to server for verification

REST = stateless
clients must provide all necc info to carry out request in request itself
so all requests must include user credentials

Pg.182
login Flask stores login data in user session stored by default in client-side cookie
so server does not store any user-related info = stateless
[asks client to store it instead] 

but can be bad design choice to use them
When servers store info about clients = must have shared cache accessible to all
servers to ensure same server always get request from given client

REST architecture based on HTTP protocol
HTTP authentication is preferred method used to send credentials [Basic or Digest]

HTTP authentication = user credentials are included in Authorization header
with all requests

Example Flask-HTTPAuth extension
(venv) $ pip install flask-httpauth

Pg.183
Because user credentials are begin exchanged with every request it is extremely
important that the API routes are exposed over secure HTTP [ie HTTPS] so that
all requests and responses are encrypted

when authentication credentials invalid the server returns 401 HTTP status code

when all routes in the blueprint need to be protected in the same way the
login_required decorator can be included once in a before_request handler
for the blueprint

Pg.184
Token-Based Authentication
rather than clients send auth credentials w/ every request [sensitive info]
token-based authentication solution instead

token-based authentication
client sends login creds to special UTL that generates authentication tokens
once client has token it can use it [token] in place of the login credentials
to authenticate [every] request

Security
tokens are issues w/ an associated expiration
when token expires the client must re-authenticate = get new token
i.e.
risk of token stolen limited to short lifespan

Example 14-9. app/models.py: Token-based authentication support

Pg.185
route that returns authentication tokens to client is added to API blueprint

Example 14-11. app/api_1_0/authentication.py: Authentication token generation
@api.route('/token')

Pg.186
Serializing Resources to and from JSON
web service convert internal representation of resources to and from JSON

Pg.187
Convert JSON structure to model = data coming from client might be
invalid, wrong or unnecessary [email, role]

NB:
ValidationError implenented as subclass of Python ValueError

Pg.188
@errorhandler decorator used to register for HTTP status codes
decorated function invoked any time an exception of give class is raised

NB:
decorator obtained from API blueprint so handler will be invoked only
when the exception is raised while route from blueprint is being processed

Implementing Resource Endpoints
Pg.189
Route handles collection via list comprehension to generate JSON version of all posts
404 if id not found

POST
created from JSON data - 201 HTTP status code and Location header added with
the URL or the newly created resource
NB:
client receives body of the reponse include new resource
save client from having to issue GET resource for it immeidately after create resource

Pg.190
PUT
edit existing resources
NB:
good example for Admin check
build a decorator = good way to avoid code duplication

Summary
Table 14-3. Flasky API resources

Pg.191
Pagination of Large Resource Collections
large collection = web services choose to paginate collections

prev
next
count
Technique can be applied to all routes that return collections

Pg.192
pip install -r requirements/dev.txt

Testing Web Services with HTTPie
test a  web service  an HTTP client must be used - 2x ways
curl
HTTPie

(venv) $ pip install httpie
e.g.
(venv) $ http --json --auth <email>:<password> GET \
> http://127.0.0.1:5000/api/v1.0/posts

"prev": null
"next": "http://127.0.0.1:5000/api/v1.0/posts/?page=2",
"count": 150

anonymous user
(venv) $ http --json --auth : GET http://127.0.0.1:5000/api/v1.0/posts/
 
Pg.193
To use authentication tokens, a request to /api/v1.0/token is sent

(venv) $ http --auth <email>:<password> --json GET \
> http://127.0.0.1:5000/api/v1.0/token

And now the returned token can be used to make calls into the API for the next hour
by passing it along with an empty password field
(venv) $ http --json --auth eyJpYXQ...: GET http://127.0.0.1:5000/api/v1.0/posts/

When token expires, requests will be returned with HTTP status code 401 error
indicating that a new token needs to be obtained


Part-III
Chp.15

Pg.197
(venv) $ pip install coverage

Pg.199
(venv) $ python manage.py test --coverage	

Pg.200
The Flask Test Client
access Flask context globals such as request or session

Flask has test client to replicate the environment that exists when an application
is running inside a web server allowing tests to act as clients and send requests

requests are received and routed to the appropriate view functions
from which responses are generated and returned

Testing Web Applications
Pg.201
Ex15-2
self.client instance variable added to the test case = Flask test client object
object exposes methods that issue requests into the application

Pg.202
NB
disable CSRF protection in test configuration

Pg.205
IMPORTANT
any requests that send data in the body must encode it with json.dumps()
because the Flask test client does not automatically encode to JSON

Likewise response bodies are also returned in JSON format and must be decoded
with json.loads() before they can be inspected

Pg.207
setUpclass
tearDownClass

believe these are equivalent to
TestFixtureSetUp / TearDown

Chp.16
Pg.211
Logging Slow Database Performance

Flask-SQLAlchemy has an option to record stats about DB queries issue during request

from flask.ext.sqlalchemy import get_debug_queries
after_app_request handler

get_debug_queries() enabled only in debug mode

Pg.212
SQLALCHEMY_RECORD_QUERIES

Pg.213
Source Code Profiling

Flask's development web server [Werkzeug] optionally enable Python profiler
for each request
e.g.
"""Start the application under the code profiler."""
from werkzeug.contrib.profiler import ProfilerMiddleware
app.wsgi_app = ProfilerMiddleware(app.wsgi_app, restrictions=[length],
profile_dir=profile_dir)

Chp.17
Deployment
Pg.215	
deploy command

Pg.216
Logging of Errors During Production
Flask writes to log file

Startup
Flask creates an instance of Python logging.logger class and attaches to
application instance
 
Example 17-2 configure a
logging handler that sends the errors 
tells Flask-SQLAlchemy to enable recording of query stats

Pg.217
application logger configure to log errors

Cloud Deployment
Heroku

Pg.220
# log to stderr
import logging
from logging import StreamHandler
file_handler = StreamHandler()
file_handler.setLevel(logging.WARNING)
app.logger.addHandler(file_handler)

Pg.221
Running a production web server
development web server Flask [default] will perform poorly because it was not
designed to run in a Production environment

TWO production ready web servers work will w/ Flask applications
01.	Gunicorn
02.	uWSGI

(venv) $ pip install gunicorn
(venv) $ gunicorn manage:app

Note that Gunicorn uses port 8000 by default, not 5000 like Flask.

Pg.222
requirements.txt
psycopg2 package to enable Postgres database
support, and the Gunicorn web server.

gunicorn==18.0
psycopg2==2.5.1

Pg.223
Enabling Secure HTTP with Flask-SSLify

User credentials values can be intercepted during travel by third party
prevent user credentials from being stolen it is necessary to secure HTTP
which encrypts all communication btwn clients and server using public key
cryptography

Pg.224
Support for SSL needs to be enabled only in production mode
NB:
Heroku book uses
clients do not connect to hosted applications directly but to a reverse proxy server
that redirects requests into the applications

Pg.225
Proxy servers pass info that describes original request from the client to the
redirected web servers thru custom HTTP headers to tell whether use communicating
w/ applciation over SSL

Werkzeug provides WSGI middleware that checks custom headers from the proxy server
and updates the request object so that is_secure reflects security of request

Pg.227
Summary
Install production-read web server such as Gunicorn or uWSGI
Purchase install configure SSL certificate to enable secure HTTP
Instlal a front-end reverse proxy web server [Apache] that will serve static files directly and forward other requests into application's web server listening on private port

Pg.228
Setting Up Logging
Unix-based servers, logging can be sent the syslog daemon
thus
Pg.229
application logs will be written to
/var/log/messages

syslog service configure to write a separate log file or send logs to a
different machine if necessary
