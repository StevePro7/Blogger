Patching
22-Jul-2025


Ref: eric
08-patching.txt


//https://pytest-with-eric.com/mocking/pytest-common-mocking-problems
//https://pytest-with-eric.com/mocking/pytest-common-mocking-problems/#Mock-and-Patch-%E2%80%94-A-Brief-Recap

BLOG


<u>Patching</u><br />
<a href="https://pytest-with-eric.com/mocking/pytest-common-mocking-problems/#Mock-and-Patch-%E2%80%94-A-Brief-Recap">Patching</a> is technique that temporarily replaces real objects in code with mock objects during test execution.  <a href="https://pytest-with-eric.com/mocking/mocking-vs-patching/#Understanding-Patching-How-It-Works">Patching</a> helps ensure external systems do not affect test outcomes thus tests are consistent and repeatable.
<br /><br />
IMPORTANT - Mocks are <b>NOT</b> stubs!<br />
When we use the patch function with <i>return_value</i> or <i>side_effect</i> we are using a stub [but from Mock library]
  
<br /><br />
  
<a href="https://pytest-with-eric.com/mocking/pytest-common-mocking-problems/#Mock-and-Patch-%E2%80%94-A-Brief-Recap">Patching</a> is technique that temporarily replaces real objects in code with mock objects during test execution.  Patching is useful to ensure external systems do not affect the test outcome thus tests are consistent and repeatable.
<br /><br />