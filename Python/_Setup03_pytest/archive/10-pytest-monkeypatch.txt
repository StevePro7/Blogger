monkeypatch
23-Jul-2025

BLOG

<u>Monkeypatch</u><br />
<a href="https://pytest-with-eric.com/mocking/pytest-monkeypatch">Monkeypatching</a> is technique used to modify code behavior at runtime especially where certain dependencies or settings make it challenging to isolate functionality for example <a href="https://pytest-with-eric.com/mocking/pytest-monkeypatch/#Monkeypatching-Environment-Variables">environment variables</a> or <a href="https://pytest-with-eric.com/mocking/pytest-monkeypatch/#Monkeypatching-Functions">system paths</a>:
<br />
<table width="99%" border="1">
<tr>
<td valign="top">&nbsp;&nbsp;<b>app.py</b></td>
<td valign="top">&nbsp;&nbsp;<b>test_app.py</b></td>
</tr>  
<tr>
<td valign="top">
<pre style="font-size: 12px;">
&nbsp;&nbsp;import os
&nbsp;&nbsp;def get_app_mode() -> str:
&nbsp;&nbsp;    app_mode = os.getenv("APP_MODE")&nbsp;
&nbsp;&nbsp;    return app_mode.lower()
</pre>
</td>
<td valign="top">
<pre style="font-size: 12px;">
&nbsp;&nbsp;def test_get_app_mode(monkeypatch):
&nbsp;&nbsp;    """Test behavior when APP_MODE is set."""
&nbsp;&nbsp;    monkeypatch.setenv("APP_MODE", "Testing")&nbsp;
&nbsp;&nbsp;    assert get_app_mode() == "testing"
</pre>
</td>
</tr>
</table>
<br />