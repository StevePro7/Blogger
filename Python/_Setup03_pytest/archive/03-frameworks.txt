Frameworks
22-Jul-2025


Ref: eric
03-frameworks.txt

BLOG

<u>Frameworks</u><br />
When developing code in Python there are typically five Top Python Testing <a href="https://pytest-with-eric.com/comparisons/python-testing-frameworks">Frameworks</a> that are favorable:
<br />
<!--
<table width="99%" border="1">
<tr><td>&nbsp;<b>NAME</b>&nbsp;</td><td>&nbsp;<b>MONIKER </b>&nbsp;</td><td>&nbsp;<b>DESCRIPTION</b></td></tr>
<tr><td>&nbsp;unittest&nbsp;</td><td>&nbsp;PyUnit&nbsp;</td><td>&nbsp;The default Python testing framework built-in with the Python Standard Library</td></tr>
<tr><td>&nbsp;pytest&nbsp;</td><td>&nbsp;Pytest&nbsp;</td><td>&nbsp;Popular testing frameworks known for simplicity, flexibility + powerful features</td></tr>
<tr><td>&nbsp;noseTest&nbsp;</td><td>&nbsp;Nose2&nbsp;</td><td>&nbsp;Enhanced unittest version offering additional plugins to support test execution</td></tr>
<tr><td>&nbsp;DocTest&nbsp;</td><td>&nbsp;DocTest&nbsp;</td><td>&nbsp;Python Standard Library module generates tests within source code DocString</td></tr>
<tr><td>&nbsp;Robot&nbsp;</td><td>&nbsp;Robot&nbsp;</td><td>&nbsp;Acceptance testing keyword-driven module that simplifies testcase automation</td></tr>
</table>
-->
<br />
Here are some reasons why <a href="https://docs.pytest.org/en/stable">pytest</a> currently seems to be the most popular Python unit test framework out:
<br />
<!--
<table width="99%" border="1">
<tr>
<td valign="top">
<pre style="font-size: 12px;">
&nbsp;&nbsp;1. Simple and Readable Syntax
&nbsp;&nbsp;   You write plain Python functions instead of creating large verbose classes
&nbsp;&nbsp;   Assertions use plain assert statements which provide more detailed output
</pre>
</td>
</tr>
<tr>  
<td valign="top">
<pre style="font-size: 12px;">
&nbsp;&nbsp;2. Rich Plugin Ecosystem
&nbsp;&nbsp;   Plugins like pytest-mock, pytest-asyncio, pytest-cov, and more
&nbsp;&nbsp;   Easy to extend pytest plugins or write your own custom plugins
</pre>
</td>
</tr>
<tr>  
<td valign="top">
<pre style="font-size: 12px;">
&nbsp;&nbsp;3. Powerful Fixtures
&nbsp;&nbsp;   Allows for clean and re-usable setup and teardown using fixtures
&nbsp;&nbsp;   Supports various test level scopes, autouse, and parametrization
</pre>
</td>
</tr>
<tr>  
<td valign="top">
<pre style="font-size: 12px;">
&nbsp;&nbsp;4. Test Discovery
&nbsp;&nbsp;   Automatically disovers tests in files named test_*.py
&nbsp;&nbsp;   No need to manually register tests or use loader classes
</pre>
</td>
</tr>
<tr>  
<td valign="top">
<pre style="font-size: 12px;">
&nbsp;&nbsp;5. Great Reporting
&nbsp;&nbsp;   Colored output, diffs for failing assertions, and optional verbosity
&nbsp;&nbsp;   Integrates easily with tools like coverage, tox, and CI/CD systems
</pre>
</td>
</tr>
<tr>  
<td valign="top">
<pre style="font-size: 12px;">
&nbsp;&nbsp;6. Supports Complex Testing Needs
&nbsp;&nbsp;   Parameterized tests (@pytest.mark.parametrize)
&nbsp;&nbsp;   parallel test execution (pytest-xdist) + hooks
</pre>
</td>
</tr>
</table>
-->
<br />
<u>pytest</u>
<br />
<table width="99%" border="1">
<tr>
<td valign="top">
<pre style="font-size: 12px;">
&nbsp;&nbsp;pip install pytest
</pre>
</td>
</tr>
</table>
<br />  