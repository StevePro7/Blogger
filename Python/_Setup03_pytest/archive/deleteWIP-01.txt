<span style="font-family:verdana;font-size:85%;">
  

<u>Mocking</u><br />
<a href="https://pytest-with-eric.com/mocking/pytest-mocking">Mocking</a> is technique that allows you to isolate pieces of code being tested from its dependencies so the test can focus on the code under test in isolation.  The <a href="https://docs.python.org/3/library/unittest.mock.html">unittest.mock</a> package offers Mock and MagicMock objects:
<br /><br />
<i><a href="https://docs.python.org/3/library/unittest.mock.html#the-mock-class">Mock</a></i><br />
A mock object simulates the behavior of the object it replaces by creating attributes and methods on-the-fly.
<br /><br />
<i><a href="https://docs.python.org/3/library/unittest.mock.html#magic-mock">MagicMock</a></i><br />
Subclass of Mock with default implementations for most magic methods (__len__, __getitem__, etc.).  Useful when mocking objects that interact with Python's dunder methods that enable custom behaviors for common operations.
<br /><br />
  
<u>Patching</u><br />
<a href="https://pytest-with-eric.com/mocking/pytest-common-mocking-problems/#Mock-and-Patch-%E2%80%94-A-Brief-Recap">Patching</a> is technique that temporarily replaces real objects in code with mock objects during test execution.  <a href="https://pytest-with-eric.com/mocking/mocking-vs-patching/#Understanding-Patching-How-It-Works">Patching</a> helps ensure external systems do not affect test outcomes thus tests are consistent and repeatable.
<br /><br />
IMPORTANT - Mocks are <b>NOT</b> stubs!<br />
When we use the <a href="https://docs.python.org/3/library/unittest.mock.html#unittest.mock.patch">patch</a> function with <i>return_value</i> or <i>side_effect</i> we are using a stub [but from Mock library]
<br />
<table width="99%" border="1">
<tr><td>&nbsp;<b>METHOD</b></td><td>&nbsp;<b>DESCRIPTION</b></td></tr>
<tr><td>&nbsp;<a href="https://pytest-with-eric.com/mocking/pytest-mock-multiple-return-values/#Single-Return-Value-Mocking">return_value</a></td><td>&nbsp;Specify the single value of Mock object to be returned when method called</td></tr>
<tr><td>&nbsp;<a href="https://pytest-with-eric.com/mocking/pytest-mock-multiple-return-values/#Multiple-Return-Values-with-%E2%80%98side-effect%E2%80%99">side_effect</a></td><td>&nbsp;Specify multiple values of Mock object to be returned when method called</td></tr>
</table>
<br />
  
<u>Difference</u><br />
In pytest, Mock and patch are both <a href="https://pytest-with-eric.com/mocking/python-magicmock-raise-exception/#What-is-the-Difference-Between-Mock-and-Patch">tools</a> for simulating or replacing parts of your code during testing.  Mock creates mock objects while patch temporarily replaces real objects with mocks during tests to isolate code:
<br />
<!--
<table width="99%" border="1">
<tr>
<td>&nbsp;<b>Mock</b></td>
<td>&nbsp;<b>patch</b></td>
</tr>
<tr>
<td valign="top">
<pre style="font-size: 12px;">
&nbsp;&nbsp;from unittest.mock import Mock  
&nbsp;&nbsp;
&nbsp;&nbsp;mock_obj = Mock()
&nbsp;&nbsp;mock_obj.some_method.return_value = 42 
&nbsp;&nbsp;result = mock_obj.some_method()  
&nbsp;&nbsp;assert result == 42
</pre>
</td>
<td valign="top">
<pre style="font-size: 12px;">
&nbsp;&nbsp;from unittest.mock import patch
&nbsp;&nbsp;
&nbsp;&nbsp;def external_function(): 
&nbsp;&nbsp;    pass
&nbsp;&nbsp;
&nbsp;&nbsp;@patch('module_name.external_function')  
&nbsp;&nbsp;def test_function(mock_external): 
&nbsp;&nbsp;    mock_external.return_value = "Mock data"
&nbsp;&nbsp;    result = external_function() 
&nbsp;&nbsp;    assert result == "Mock data"
</pre>
</td>
</tr>
</table>
-->
<br />
  
IMPORTANT<br />
When creating mocks it is critical to ensure mock objects accurately reflect objects they are replacing.  Thus, it is best practice to use <b><a href="https://pytest-with-eric.com/mocking/pytest-common-mocking-problems/#Mocks-Fail-To-Respect-Method-Signature">autospec</a>=True</b> to ensure mock objects respect function signatures being replaced!
<br /><br />
<u>Assertions</u><br />
For completeness, here is list of <a href="https://pytest-with-eric.com/mocking/pytest-mock-assert-called/#Pytest-Mock-Assert-Call-The-Key-Concepts">assertion</a> methods to verify method on mock object was called during tests:
<br />
<table width="99%" border="1">
<tr><td>&nbsp;<b>METHOD</b></td><td>&nbsp;<b>DESCRIPTION</b></td></tr>
<tr><td>&nbsp;assert_called</td><td>&nbsp;verify specific method on mock object has been called during a test</td></tr>
<tr><td>&nbsp;assert_called_once</td><td>&nbsp;verify specific method on mock object has been called only one time</td></tr>
<tr><td>&nbsp;assert_called_once_with</td><td>&nbsp;verify specific method on mock object called once with specific args</td></tr>
<tr><td>&nbsp;assert_called_with</td><td>&nbsp;verify every time method on mock object called with fixed arguments</td></tr>
<tr><td>&nbsp;assert_not_called</td><td>&nbsp;verify specific method on mock object was not called during the test</td></tr>
<tr><td>&nbsp;assert_has_calls</td><td>&nbsp;verify the order in which specific method on mock object was called</td></tr>
<tr><td>&nbsp;assert_any_call</td><td>&nbsp;verify specific method on mock object has been called at least once</td></tr>
</table>
<br />
  
</span>