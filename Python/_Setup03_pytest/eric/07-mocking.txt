mocking
21-Jul-2025


01.
Common Mocking Problems & How To Avoid Them (+ Best Practices)
https://pytest-with-eric.com/mocking/pytest-common-mocking-problems
Mocking is a powerful technique used in testing to replace real objects with mock objects that simulate the behavior of real objects.

Patching
While Mock objects create stand-alone mock instances, whose interactions and calls can be verfied, patch is a feature that temporarily replaces the real objects in your code with mock objects during the test execution.

Key points to keep in mind — Mocks are NOT stubs.

When we use the patch function with return_value or side_effect , we’re essentially using a stub (even though we’re using the Mock library).


IMPORTANT
How autospec Solves This Problem

By using autospec=True, you can ensure that your mock objects respect the function signatures of the objects they’re replacing.


Use Autospec To Respect Method Signature
Autospec with Patch

You can also apply autospec=True directly in the patch function.


//02. unittest	Mock()	MagicMock()	@patch
//What Are Pytest Mock Assert Called Methods and How To Leverage Them
//https://pytest-with-eric.com/mocking/pytest-mock-assert-called
//Frequently Asked Questions
//Are mock and MagicMock the Same Methods?
//No.
//Mock
//The Mock class in Python’s unittest.mock library is used to mock objects.
//A mock object simulates the behavior of the object it replaces by creating attributes and methods on-the-fly.
//MagicMock 
//class is an extension of the Mock class.
//It has all the capabilities of a regular Mock, but with the addition of most of the “magic” or “dunder” methods pre-created. These are special methods in Python, like __getitem__ or __len__, that enable custom behaviors for common operations


@patch decorator
temporarily replace the get_total_price function with our mock object mock_calculator- this is what isolation of code means

return_value parameter
TODO

side_effect parameter
allows you to specify a function, object or even exception that will be called when the patched function or method is invoked.


https://pytest-with-eric.com/mocking/pytest-mock-assert-called/#Pytest-Mock-Assert-Call-The-Key-Concepts
//ASSERTS
//assert_called
//assert_called_once
//assert_called_once_with
//assert_called_with
//assert_not_called
//assert_has_calls
//assert_any_call
//Table ^^


IMPORTANT
there is also reference to Mock vs. MagicMock here

before diving into 
pytest-mock plugin uses MagicMock [by default]
as 
pytest-mock plugin built on top of the unittest.mock module