Chat02
21-Jul-2025


Recommended Approach for New pytest Unit Tests

1. Prefer pytest-mock and the mocker fixture
Use mocker for mocking functions, methods, classes, dicts, etc.

Why:
Cleaner syntax than unittest.mock.patch
Automatically cleaned up after each test
Plays well with other pytest fixtures
Centralizes all patching into one fixture (mocker)


2. Use mocker.spy() instead of manually inspecting calls
If you want to test that a real method was called, but don’t want to replace it:


3. Use monkeypatch for patching env vars, paths, or built-in functions
For simple things like os.environ, file paths, or patching open(), prefer monkeypatch for clarity and idiomatic pytest style.


4. Avoid @patch decorators unless migrating old tests
The @patch decorator from unittest.mock is fine but:
Has confusing scoping
Requires managing patch paths carefully
Can be harder to read or stack with multiple patches

- Better to use mocker.patch() inline.


5. Use autospec=True when mocking complex or external APIs
To ensure your mocks behave like the real objects (e.g., catch bad call signatures):


//6. Use create_autospec() for strict mocks
//Especially useful for mocking whole objects or modules:


7. Use fixtures to share mocks across tests
When you have a mock used by multiple tests, define it as a fixture:



LEGACY
Why do I see pytest but still references to unittest mock MagicMock and patch decorator

1. unittest.mock is the Standard Mocking Library in Python
Python’s built-in mocking comes from the unittest.mock module — even pytest-mock (and mocker) is just a thin wrapper around it.


2. It's Still the Source of Core Tools
Even if you use pytest + mocker, sometimes you'll still need:
These aren't replaced by pytest-mock — you just use them with pytest.


3. Legacy Code and Porting
Many Python projects started with unittest or used @patch decorators, like:
Even when switching to pytest, teams often keep these decorators for simplicity unless there's a compelling reason to refactor.


Recommendation for New Code
Prefer pytest-mock (mocker fixture) for readability and less boilerplate.
Import tools like MagicMock, Mock, call, ANY from unittest.mock when needed.
Avoid @patch unless needed — inline mocker.patch() is usually cleaner.
Keep everything in one style within a test module for consistency.