<span style="font-family:verdana;font-size:85%;">

In the previous <a href="http://steveproxna.blogspot.com/2020/07/python-setup-cheat-sheet.html">post</a> we checked out Python Setup Cheat Sheet to download and install Python and setup an integrated development environment for Python programming.  We installed open source Python distribution <a href="https://en.wikipedia.org/wiki/Anaconda_(Python_distribution)">Anaconda</a> used for data science.  Let's continue setup to build <a href="https://en.wikipedia.org/wiki/Artificial_intelligence">artificial intelligence</a> + <a href="https://en.wikipedia.org/wiki/Machine_learning">machine learning</a> apps.
<br />
<!--X-->
<a href="https://1.bp.blogspot.com/-1vbW7HNj1Xw/XwsUqeI21NI/AAAAAAAAGVQ/Z2ij0zajUa8tT2P8DwcvTlu74CsTwo8JgCLcBGAsYHQ/s1600/Anaconda.png" imageanchor="1" ><img border="0" src="https://1.bp.blogspot.com/-1vbW7HNj1Xw/XwsUqeI21NI/AAAAAAAAGVQ/Z2ij0zajUa8tT2P8DwcvTlu74CsTwo8JgCLcBGAsYHQ/s640/Anaconda.png" width="98%" height="200" /></a>
<!--X-->
<br />
Let's check it out!
<br />
<br /><br />
<u>Install VS Code</u><br />
<a href="https://en.wikipedia.org/wiki/Visual_Studio_Code">VS Code</a> is an integrated development environment with useful plugins for Python and Data Science.  Install VS Code from Anaconda navigator.  Otherwise install VS Code for <a href="https://code.visualstudio.com/docs/?dv=win64user">Windows</a> and <a href="https://code.visualstudio.com/docs/?dv=osx">Mac OS/X</a> and <a href="https://code.visualstudio.com/docs/?dv=linux64_deb">Linux</a> directly.
<br /><br />
Launch VS Code.  Install Python extension for Visual Studio Code.  Install other plugins for example <a href="https://marketplace.visualstudio.com/items?itemName=ms-vscode-remote.remote-ssh">Remote SSH</a> to connect to Linux VM or <a href="https://marketplace.visualstudio.com/items?itemName=formulahendry.code-runner">Code Runner</a>.  Install VS Code <a href="https://code.visualstudio.com/insiders">Insiders</a> to try pre-release version of VS Code.
<br /><br />
Update global <i><a href="https://code.visualstudio.com/docs/getstarted/settings">settings.json</a></i> file to your particular preferences.  Here are some common VS Code examples:
<br />
<!--X-->
<table width="98%" border="1">
<tr>
<td valign=top>&nbsp;SYSTEM</td>
<td valign=top>&nbsp;LOCATION</td>
</tr>
<tr>
<td valign=top>&nbsp;Windows</td>
<td valign=top>&nbsp;%APPDATA%/Code/User/settings.json</td>
</tr>
<tr>
<td valign=top>&nbsp;Mac OS/X</td>
<td valign=top>&nbsp;~/Library/Application Support/Code/User/settings.json</td>
</tr>
<tr>
<td valign=top>&nbsp;Linux</td>
<td valign=top>&nbsp;~/.config/Code/User/settings.json</td>
</tr>
</table>
Note: VS Code Insiders location replace Code/User/settings.json with <b>Code - Insiders</b>/User/settings.json
<br />
<br />
<i>settings.json</i>
<table width="98%" border="1">
<tr>
<td valign=top>
<pre class="csharp" name="code">
&nbsp;{
    "workbench.colorTheme": "Visual Studio Light",
    "window.zoomLevel": 0,
    "editor.trimAutoWhitespace": false,
    "editor.renderIndentGuides": false,
    "editor.roundedSelection": false,
    "editor.suggestSelection": "first",
    "python.dataScience.sendSelectionToInteractiveWindow": true,
    "python.jediEnabled": false,
    "code-runner.clearPreviousOutput": true,
    "code-runner.runInTerminal": true,
    "code-runner.showExecutionMessage": false,
    "code-runner.respectShebang": false,
    "code-runner.defaultLanguage": "python3",
&nbsp;}
</pre>
</td>
</tr>
</table>
<br />
<table width="98%" border="1">
<tr>
<td valign=top>&nbsp;Windows</td>
<td valign=top>&nbsp;Mac OS/X + Linux</td>
</tr>
<tr>
<td valign=top>
<pre class="csharp" name="code">
&nbsp;{
    "python.pythonPath": "%USERPROFILE%/Anaconda3/python.exe",
    "code-runner.executorMap": {
        "python": "python.exe",
        "python.pythonPath": "%USERPROFILE%/Anaconda3",
    },
&nbsp;}
</pre>
</td>
<td valign=top>
<pre class="csharp" name="code">
&nbsp;{
    "python.pythonPath": "/anaconda3/bin/python",
    "code-runner.executorMap": {
        "python": "python",
        "python.pythonPath": "/anaconda3/bin",
    },
&nbsp;}
</pre>
</td>
</tr>
</table>
<!--X-->
<br />
<br />
<u>Hello VS Code</u><br />
Create folder "<a href="https://github.com/SteveProXNA/PythonSetup/tree/master/HelloVScode">HelloVScode</a>".  Launch VS Code.  File | Open Folder |  HelloVScode | Select Folder.  Create simple "<a href="https://github.com/SteveProXNA/PythonSetup/blob/master/HelloVScode/hello_world.py">HelloWorld.py</a>" file.  Enter simple code <i>print('Hello World')</i>.  Press F5 to debug Python script.  Customize Run + Debug click "create a launch.json file".  Click Python File: Debug the currently active Python file.  Press F5.
<br /><br />

IMPORTANT<br />
Press Ctrl + Shift + P | Python: Select Interpreter.  If creates new workspace <i>settings.json</i> + override Python interpreter user <i>settings.json</i> then do not check python.pythonPath into source control when deploying cross platform.
<br /><br />

<b>Virtual Environment</b><br />
Unlike <a href="https://en.wikipedia.org/wiki/PyCharm">PyCharm</a>, VS Code does not automagically create an isolated Python environment for new projects.  Therefore, follow all instructions <a href="https://dev.to/idrisrampurawala/setting-up-python-workspace-in-visual-studio-code-vscode-149p">here</a> to setup and activate virtual environment for Python using VS Code.
<br /><br />

<b>CommandNotFoundError</b><br />
When running Python script using Anaconda you may get error <i>CommandNotFoundError: Your shell has not been properly configured to use 'conda activate'</i>.  Terminal | Click "+" | Spawn new Terminal default "Conda".
<br /><br />

<b>Code Runner</b><br />
Automate process by installing <a href="https://marketplace.visualstudio.com/items?itemName=formulahendry.code-runner">Code Runner</a> plugin.  Press F1 | Run Code first time to set Output to "Code".  Ensure entries above in user <i>settings.json</i> for fast turnaround.  Press Ctrl + Alt + N for each subsequent run!
<br /><br />

IMPORTANT<br />
On Mac OS/X if Ctrl + Alt + N does not work then you may have to swap Ctrl for Cmd in <a href="https://code.visualstudio.com/docs/getstarted/keybindings">keybindings.json</a>:
<br />
<!--X-->
<i>~/Library/Application Support/Code/User/keybindings.json</i>
<pre class="csharp" name="code">
// Place your key bindings in this file to override the defaultsauto[]
[
    {
        "key": "cmd+alt+n",
        "command": "code-runner.run"
    },
    {
        "key": "cmd+alt+n",
        "command": "-code-runner.run"
    }
]
</pre>
<!--X-->
<br />
<br />

<u>Code Sample</u><br />
Let's test drive develop a simple code sample as a Python module that could be deployed as Python package.
<br /><br />
IMPORTANT<br />
A module is a single Python script file whereas a <a href="https://packaging.python.org/tutorials/packaging-projects">package</a> is a collection of modules.  A package is a directory of Python modules containing an additional <i>__init__.py</i> file to distinguish from a directory of Python scripts.
<br /><br />

Create folder "<a href="https://github.com/SteveProXNA/PythonSetup/tree/master/PackageVScode">PackageVScode</a>".  Launch VS Code.  File | Open Folder | PackageVScode.  Create New Folder "MyPackage".  Create other top level folders, for example, Build + Docs etc.  Create hidden .vscode folder.
<br /><br />
Create sub folders <b>src</b> and <b>tests</b> beneath "<a href="https://github.com/SteveProXNA/PythonSetup/tree/master/PackageVScode/MyPackage">MyPackage</a>".  Create <i>requirements.txt</i> file + <i>setup.py</i> beneath "MyPackage" also.  Finally, create <i>module.py</i> and <i>__init__.py</i> under <b>src</b> and <i>test_module.py</i> under <b>tests</b>. 
<br />
<!--X-->
<a href="https://3.bp.blogspot.com/-HVEe0dx-n8w/XxCtjhAO7qI/AAAAAAAAGXc/TEUOL1F6ezAAmDCjjYaPldER9SDto6ClgCLcBGAsYHQ/s1600/VScodePackage.png" imageanchor="1" ><img border="0" src="https://3.bp.blogspot.com/-HVEe0dx-n8w/XxCtjhAO7qI/AAAAAAAAGXc/TEUOL1F6ezAAmDCjjYaPldER9SDto6ClgCLcBGAsYHQ/s640/VScodePackage.png" width="98%" height="300" /></a>
<br />
<table width="99%" border="1">
<tr>
<td valign=top>&nbsp;<a href="https://github.com/SteveProXNA/PythonSetup/blob/master/PackageVScode/MyPackage/tests/test_module.py">test_module.py</a></td>
<td valign=top>&nbsp;<a href="https://github.com/SteveProXNA/PythonSetup/blob/master/PackageVScode/MyPackage/src/module.py">module.py</a></td>
</tr>
<tr>
<td valign=top>
<pre class="csharp" name="code">
&nbsp;import unittest
&nbsp;from MyPackage.src.module import add_one

&nbsp;class TestSimple(unittest.TestCase):

    def test_add_one(self):
        result = add_one(5)
        self.assertEqual(result, 6)

&nbsp;if __name__ == '__main__':
    unittest.main()
</pre>
</td>
<td valign=top>
<pre class="csharp" name="code">
&nbsp;def add_one(number):
    return number + 1
</pre>
</td>
</tr>
</table>
<!--X-->
<br />
Add <i>launch.json</i> to <b>.vscode</b> folder.  Accept default to launch current Python file from integrated terminal:
<br />
<a href="https://github.com/SteveProXNA/PythonSetup/blob/master/PackageVScode/.vscode/launch.json">launch.json</a>
<br />
<!--X-->
<pre class="csharp" name="code">
&nbsp;{
    "version": "0.2.0",
    "configurations": [
        {
            "name": "Python: Current File",
            "type": "python",
            "request": "launch",
            "program": "${file}",
            "console": "integratedTerminal"
        }
    ]
&nbsp;}
</pre>
<!--X-->
<br />
Open <i>test_module.py</i>.  Press F5 to debug.  Output <b>ModuleNotFoundError</b>: No module named 'MyPackage'.  In VS Code you must correctly set PYTHONPATH in order to debug step through and run local source code!
<br /><br />
Add <i>settings.json</i> to <b>.vscode</b> folder.  Configure Python source folders by configuring the env PYTHONPATH:
<br />
<a href="https://github.com/SteveProXNA/PythonSetup/blob/master/PackageVScode/.vscode/settings.json">settings.json</a>
<br />
<!--X-->
<pre class="csharp" name="code">
&nbsp;{
    "terminal.integrated.env.windows": {
        "PYTHONPATH": "${env:PYTHONPATH};${workspaceFolder}"
    },
	"terminal.integrated.env.osx": {
        "PYTHONPATH": "${env:PYTHONPATH}:${workspaceFolder}",
    },
    "terminal.integrated.env.linux": {
        "PYTHONPATH": "${env:PYTHONPATH}:${workspaceFolder}",
    },
    "python.envFile": "${workspaceFolder}/.env"
    ]
&nbsp;}
</pre>
<!--X-->
<br />
Finally, you must add "hidden"<b><a href="https://github.com/SteveProXNA/PythonSetup/blob/master/PackageVScode/.env">.env</a></b> file beneath "PackageVScode" that sets workspace folder per platform:
<br />
<pre class="csharp" name="code">
&nbsp;WORKSPACE_FOLDER=/Absolute/Path/to/PackageVScode/
&nbsp;PYTHONPATH=${WORKSPACE_FOLDER}
</pre>
<br />
IMPORTANT<br />
The "hidden"<b>.env</b> file "lives" locally to project and should NOT be checked into source code version control!  It may also be necessary to close VS Code and re-open after configuring <b>.env</b> file.  Windows must use "/".
<br /><br />

Now press F5 to debug test code or press Ctrl + Alt + N for Code Runner.  Alternatively, Terminal command:
<br />
<!--X-->
<a href="https://1.bp.blogspot.com/-kvbqnAvbS5s/XxC5YkU2nsI/AAAAAAAAGXo/R1XteNAEfmIkOWZRyFxF28cG9Eln0Bt4ACLcBGAsYHQ/s1600/VScodeUnittests.png" imageanchor="1" ><img border="0" src="https://1.bp.blogspot.com/-kvbqnAvbS5s/XxC5YkU2nsI/AAAAAAAAGXo/R1XteNAEfmIkOWZRyFxF28cG9Eln0Bt4ACLcBGAsYHQ/s640/VScodeUnittests.png" width="98%" height="194" /></a>
<br />
<!--X-->
<i>python -m unittest discover MyPackage</i>
<br /><br />
IMPORTANT<br />
If the Terminal reveals Run 0 tests then ensure package has <i>__init__.py</i> setup in every relevant sub folder.  Finally, enter dependencies for requirements.txt file and setup.py e.g. <i>numpy</i>.  Install package at terminal:  
<br />
<!--X-->
<table width="99%" border="1">
<tr>
<td valign=top>&nbsp;<a href="https://github.com/SteveProXNA/PythonSetup/blob/master/PackageVScode/MyPackage/setup.py">setup.py</a></td>
<td valign=top>&nbsp;<a href="https://github.com/SteveProXNA/PythonSetup/blob/master/PackageVScode/MyPackage/requirements.txt">requirements.txt</a></td>
</tr>
<tr>
<td valign=top>
<pre class="csharp" name="code">
&nbsp;import setuptools

&nbsp;with open("README.md", "r") as fh:
    LONG_DESCRIPTION = fh.read()

&nbsp;setuptools.setup(
    name='MyPackage',
    version='0.1.2',
    description="My test package.",
    long_description=LONG_DESCRIPTION,
    long_description_content_type="text/markdown",
    packages=setuptools.find_packages(),
    install_requires=[
        "numpy>=1.17.1",
    ]
&nbsp;)
</pre>
</td>
<td valign=top>
<pre class="csharp" name="code">
&nbsp;numpy>=1.17.1
</pre>
</td>
</tr>
</table>
<a href="https://4.bp.blogspot.com/-6C_lZq2Hyjw/XxC7fXqJaDI/AAAAAAAAGX0/ZBKSivjggy8N-KAgUBRKHmFiBUDuXEyNgCLcBGAsYHQ/s1600/VScodePackage.png" imageanchor="1" ><img border="0" src="https://4.bp.blogspot.com/-6C_lZq2Hyjw/XxC7fXqJaDI/AAAAAAAAGX0/ZBKSivjggy8N-KAgUBRKHmFiBUDuXEyNgCLcBGAsYHQ/s640/VScodePackage.png" width="98%" height="240" /></a>
<!--X-->
<i>pip install MyPackage/.</i>
<br /><br />

Finally, we could also replicate the unit test code directly on the <a href="https://codewith.mu/en/tutorials/1.0/repl">REPL</a>.  Select Terminal tab.  Enter commands:
<br />
<a href="https://2.bp.blogspot.com/-ZSMfqteiYP0/XxMiVbSHF7I/AAAAAAAAGYM/Gfn8c1E6yWcQeVjNb-NPIJ15YDZUg5VogCLcBGAsYHQ/s1600/VScodeREPL.png" imageanchor="1" ><img border="0" src="https://2.bp.blogspot.com/-ZSMfqteiYP0/XxMiVbSHF7I/AAAAAAAAGYM/Gfn8c1E6yWcQeVjNb-NPIJ15YDZUg5VogCLcBGAsYHQ/s640/VScodeREPL.png" width="98%" height="161" /></a>
<br />

<pre class="csharp" name="code">
&nbsp;python
&nbsp;>>> from MyPackage.src.module import add_one
&nbsp;>>> result = add_one(5)
&nbsp;>>> print(result)
</pre>
<br />

<u>Code Linting</u><br />
Linting highlights syntactical and stylistic problems in Python source code which helps identify and correct subtle programming errors.  In VS Code, navigate to Python script via Terminal e.g. <i><a href="https://www.pylint.org">Pylint</a> test_module.py</i>.
<br /><br />
Alternatively, select Terminal and type specific linter like <i><a href="https://flake8.pycqa.org/en/latest">flake8</a></i> to check Python source code against <a href="https://www.python.org/dev/peps/pep-0008">PEP8</a> coding style programming errors.  If flake8 is not installed then simply type <i>pip install flake8</i> at Terminal.
<br /><br />

<br />
<u>Jupyter Notebooks</u><br />
<a href="https://jupyter-notebook.readthedocs.io/en/stable/examples/Notebook/What%20is%20the%20Jupyter%20Notebook.html">Notebooks</a> are becoming the standard for prototyping and analysis for data scientists.  Many cloud providers and Anaconda navigator offer machine learning and deep learning services in the form of Jupyter notebooks.
<br /><br />
Launch Anaconda navigator | Choose Jupyter Notebook | Launch.  After the browser launches create a New | Python 3 | Jupyter notebook.  Follow <a href="https://www.dataquest.io/blog/jupyter-notebook-tutorial">tutorial</a>.  Change browser from Google Chrome to Firefox if any issues!  Alternatively, create notebook in VS Code | Ctrl + Shift + P | Python: Create New Blank Jupyter Notebook.
<br /><br />

<br />
<u>Remote SSH</u><br />
Often machine learning AI projects may require <a href="https://code.visualstudio.com/blogs/2019/05/02/remote-development">remote</a> development in VS Code to use Windows to develop in a Linux-based environment.  Install Remote SSH to run and debug Linux-based applications on Windows.  Start | run | cmd.  <i>ssh username@linux_server</i>.  Enter passphrase.  Enter verification code if setup for MFA.
<br /><br />
<b>SSH Keys</b><br />
Use SSH key <a href="https://docs.microsoft.com/en-us/azure/devops/repos/git/use-ssh-keys-to-authenticate?view=azure-devops&tabs=current-page">authentication</a> and setup SSH keys to connect local Windows host and remote Linux VM server.
<br />
<table width="99%" border="1">
<tr>
<td valign=top>&nbsp;Windows</td>
<td valign=top>&nbsp;Linux</td>
</tr>
<tr>
<td valign=top>
<pre class="csharp" name="code">
&nbsp;cd %USERPROFILE%
&nbsp;cd .ssh
&nbsp;ssh-keygen -C "username@emailaddress.com"
</pre>
</td>
<td valign=top>
<pre class="csharp" name="code">
&nbsp;ssh username@linux_server
&nbsp;cd ~/.ssh
&nbsp;ssh-keygen -C "username@emailaddress.com"
</pre>
</td>
</tr>
</table>
<br />
Dump the contents of id_rsa.pub file from local Windows host to authorized_keys file on Linux VM server:
<br />
<pre class="csharp" name="code">
cd ~/.ssh
echo "contents_of_Windows_id_rsa.pub_file" >> authorized_keys
</pre>
<br />
Finally, configure <i>%USERPROFILE%\.ssh\config</i> file with Linux VM server information to alias connection.
<br />
<pre class="csharp" name="code">
&nbsp;Host ENVIRONMENT
     HostName linux_server
     User username
     IdentityFile ~/.ssh/id_rsa
</pre>
<br />

<b>SSH Tunnel</b><br />
<a href="https://help.ubuntu.com/community/SSH/OpenSSH/PortForwarding">Port forwarding</a> via SSH Tunnel creates a secure connection between the local computer and remote machine through which services can be relayed.  SSH Tunnel is useful for transmitting data over encrypted connection.
<br />
<pre class="csharp" name="code">
&nbsp;ssh -N -L localhost:8787:LoadBalancer_External-IP:8000 username@linux_server
</pre>
<br />
The same technique can be uesd to access Jupyter Notebook on Linux VM server.  Launch terminal and enter:
<br />
<pre class="csharp" name="code">
&nbsp;ssh username@linux_server
&nbsp;cd ~/
&nbsp;jupyter notebook --no-browser --port=8889
&nbsp;ssh -N -L localhost:8889:localhost:8889 username@linux_server
</pre>
<br />

<b>WinSCP</b><br />
Install <a href="https://winscp.net/eng/download.php">WinSCP</a> as popular SFTP client to navigate + copy files between local Windows and remote Linux VM.  Launch WinSCP.  Enter Host Name, Port number, User name, Password and verification code if setup for MFA.
<br /><br />

<br />
<u>Summary</u><br />
To summarize, we have setup Python distribution Anaconda on Windows, Mac OS/X and Linux to now build artificial intelligence and machine learning apps.  We are now set to develop machine learning models then deploy using <a href="https://www.analyticsvidhya.com/blog/2020/04/how-to-deploy-machine-learning-model-flask">Flask</a> API.  Apps can then be containerized using <a href="https://aws.amazon.com/blogs/opensource/why-use-docker-containers-for-machine-learning-development">Docker</a> and orchestrated using <a href="https://blog.udemy.com/why-all-developers-want-their-it-infrastructure-to-adopt-kubernetes">Kubernetes</a> to significantly increase the efficiency of a Continuous Integration / Continuous Deployment infrastructure <span style='font-family:Wingdings'>J</span><span><o:p></o:p></span>

</span>