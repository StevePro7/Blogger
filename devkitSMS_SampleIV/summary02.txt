Summary 02
05/06/2020

To summarize,

the development process to build Candy Kid, like all previous SMS projects, has been educational

and provided opportunities to collaborate more with the [SMS Power!] community.


However, the biggest challenge in completing Candy Kid was to stay within the 32KB ROM game code limits

Hence we discussed some options to resolve 


Therefore, 




BLOG
<u>Summary</u><br />
To summarize, the development process to build Candy Kid, like all previous SMS projects, has been very educational.  It has provided numerous opportunities to collaborate more with the SMS Power! community.
<br /><br />
However, the biggest challenge in completing Candy Kid was to stay within the 32KB ROM game code limit.  Here is a short list of the options:

<ul>
<li>Build game code in Z80 assembly directly for complete control of the machine code byte output</li>
<li>Refactor duplicate code to store generic code in function pointer arrays accessible by fixed bank</li>
<li>Integrate z88dk and devkitSMS that produces smaller object code by only using supported APIs</li>
<li>Upgrade from 8-bit Master System to 16-bit Mega Drive and bypass 32KB hard limit altogether!</li>
</ul>
<br />

In fact, the final option is the most unique: much like how the Sega Master System has the devkitSMS to support homebrew game development using C language the, Sega Mega Drive has the SGDK.  Therefore, would be interesting to transition many Sega Retro Gaming ideas developed from 8-bit onward to 16-bit.
<br /><br />

In fact, the final option is the most unique: much like how the Sega Master System has the devkitSMS to support homebrew game development using C language the, Sega Mega Drive has the SGDK.  Therefore, would be interesting transition many Sega Retro Gaming ideas developed from 8-bit upward to 16-bit!
<br /><br />

In fact the final option is an interesting one.  Much like how the Sega Master System has the devkitSMS to support homebrew game development using C language the Sega Mega Drive has the SGDK.  Todo: transition these ideas to 16-bit!
<br /><br />

In fact the final option is an interesting one.  Much like how the Sega Master System has the devkitSMS to support homebrew development in C the Sega Mega Drive has the SGDK.
<br /><br />

In fact the final option is an interesting one.  Much like how the Sega Master System has the devkitSMS to support homebrew game development using C language the Sega Mega Drive has the SGDK.
<br /><br />

<br /><br />

<u>Summary</u><br />
To summarize, the development process to build Candy Kid, like all previous SMS projects, has been very educational.  It has provided numerous opportunities to collaborate more with the SMS Power! community.
<br /><br />
However, the biggest challenge in completing Candy Kid was to stay within the 32KB ROM game code limit.  Here is a short list of the options:

<ul>
<li>Build game code in Z80 assembly directly for complete control of the machine code byte output</li>
<li>Refactor duplicate code to store generic code in function pointer arrays accessible by fixed bank</li>
<li>Integrate z88dk and devkitSMS that produces smaller object code by only using supported APIs</li>
<li>Upgrade from 8-bit Master System to 16-bit Mega Drive and bypass 32KB hard limit altogether!</li>
</ul>

<br />
Build game code in Z80 assembly directly for complete control of the machine code byte output
<br />
Refactor duplicate code to store generic code in function pointer arrays accessible by fixed bank
<br />
Integrate z88dk and devkitSMS that produces smaller object code by only using supported APIs
<br />
Upgrade from 8-bit Master System to 16-bit Mega Drive and bypass 32KB hard limit altogether!

<br /><br />


<u>Summary</u><br />
To summarize, the development process to build Candy Kid, like all previous SMS projects, has been very educational.  It has provided numerous opportunities to collaborate more with the SMS Power! community.
<br /><br />
However, the biggest challenge in completing Candy Kid was to stay within the 32KB ROM game code limits!  Here is a short list of the options:

<br />
Build game code in Z80 assembly directly for complete control of the machine code byte output
<br />
Refactor duplicate code to store generic code in function pointer arrays accessible by fixed bank
<br />
Integrate z88dk and devkitSMS that produces smaller object code by only using supported APIs
<br />
Upgrade from 8-bit Master System to 16-bit Mega Drive and bypass 32KB hard limit altogether!