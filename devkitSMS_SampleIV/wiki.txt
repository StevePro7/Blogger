<span style="font-family:verdana;font-size:85%;">

<u>Emulicious</u><br />
In 2013, we checked out Sega Console Programming with goal to build retro game in Z80 assembler for the Sega Master System.  However, the process to write Z80 assembly language from scratch seemed daunting.

<br /><br />
In 2019, since collaborating with Calindro, we now have the opportunity to understand relationship between C source code and the generated Z80 assembly: Emulicious will decorate Z80 code in the debugger with its corresponding C function!

<br /><br />
Launch Emulicious. Tools menu | ensure "Reopen Tools" option is checked. Launch the debugger. File menu | ensure "Load Sources automatically" is checked + Run menu | ensure "Suspend On Open" is checked.  Close

<a href="https://3.bp.blogspot.com/-fkOzJSV7b3I/XtaVckohaQI/AAAAAAAAGL4/K71AKqFw2t4dyX2xFPbediWFTegZpfITACLcBGAsYHQ/s1600/emulicious01.png" imageanchor="1" ><img border="0" src="https://3.bp.blogspot.com/-fkOzJSV7b3I/XtaVckohaQI/AAAAAAAAGL4/K71AKqFw2t4dyX2xFPbediWFTegZpfITACLcBGAsYHQ/s640/emulicious01.png" width="98%" /></a>

<br />
Ensure the output.map file is <b>not</b> deleted in build script.  E.g. both output.sms and output.map are built and loaded into Emulicious.  The output.map maps C source code functions to the underlying Z80 assembly code.

<br /><br />
<i>Example</i><br />
Search for main function.  Ctrl + F | Find "_main"  Ctrl+click "main" to navigate there.  Ctrl+click any function name to navigate + inspect Z80 assembly code built for that function.  Click Alt+Left to navigate back.  Nice!

<a href="https://1.bp.blogspot.com/-aIDQ5wzWFKE/XtaV4Iz0vXI/AAAAAAAAGMA/d7zmYe29S78eFgYDnaSi_dJedEL9a4qzgCLcBGAsYHQ/s1600/emulicious02.png" imageanchor="1" ><img border="0" src="https://1.bp.blogspot.com/-aIDQ5wzWFKE/XtaV4Iz0vXI/AAAAAAAAGMA/d7zmYe29S78eFgYDnaSi_dJedEL9a4qzgCLcBGAsYHQ/s640/emulicious02.png" width="98%" /></a>

<br /><br />
<br /><br />

In <a href="http://steveproxna.blogspot.com/2017/11/devkitsms-programming-sample.html">2017</a>, we checked out <a href="https://github.com/sverx/devkitSMS">devkitsms</a> to setup productive development environment to build 8-bit retro video games for the Sega Master System (<a href="http://en.wikipedia.org/wiki/Master_System">SMS</a>).  In <a href="http://steveproxna.blogspot.com/2019/04/devkitsms-programming-sample-iii.html">2019</a>, we improved build process to develop <a href="https://www.smspower.org/Homebrew/PlatformExplorer-SMS">Platform Explorer</a>.

<br /><br />
Though after five years of SMS development we would like to connect more <a href="http://en.wikipedia.org/wiki/C_(programming_language)">C language</a> with the underlying <a href="http://en.wikipedia.org/wiki/Zilog_Z80#Z80_assembly_language">Z80 assembly</a> code.  Look for opportunities to consolidate 8-bit retro game development to build <a href="https://www.smspower.org/Homebrew/CandyKid-SMS">Candy Kid</a>!

<!--
<a href="https://3.bp.blogspot.com/-zT9aLBPp0Wk/Xpi6uVGyT1I/AAAAAAAAGH8/9LcVK5jl8aY-ltvqiMaA5n3jI9VZA6vYgCLcBGAsYHQ/s1600/01.png" imageanchor="1" ><img border="0" src="https://3.bp.blogspot.com/-zT9aLBPp0Wk/Xpi6uVGyT1I/AAAAAAAAGH8/9LcVK5jl8aY-ltvqiMaA5n3jI9VZA6vYgCLcBGAsYHQ/s640/01.png" width="98%" height="526" /></a>
-->
<br />

Let's check it out!
<br /><br />

<u>Game</u><br />
<a href="https://www.smspower.org/Scans/SegaComputer-Magazine-Issue02?gallerypage=17">Candy Kid</a> video game was originally programmed by Grandstand Leisure from New Zealand in September 1984.  The game written in BASIC on the Sega SC-3000.  Thanks to the awesome SMS Power! community Candy Kid is available on Sega Master System in <a href="http://www.smspower.org/Competitions/Coding-2020">2020</a> Coding Competition.  Download source code <b><a href="https://github.com/SteveProXNA/CandyKidSMS">here</a></b>.
<br /><br />

<u>Software</u><br />
Follow all instructions from the previous <a href="http://steveproxna.blogspot.com/2017/09/devkitsms-programming-setup.html">post</a>: this documents how to setup the pre-requisite software.
<br />
Note: ensure you have downloaded and installed the <a href="https://github.com/sverx/devkitSMS">devkitSMS</a> and Small Device C Compiler [<a href="http://sdcc.sourceforge.net">SDCC</a>].
<br /><br />
<u>Checklist</u>
<br />
Here is a checklist of tasks to complete in order to try and improve the existing development environment:
<ul>
<li>TODO - must complete checklist!</li>
</ul>


</span>
